/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(wideband_detector1.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(d99253fc60e92e075bb41df0e2db7907)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ainfosec/wideband_detector1.h>
// pydoc.h is automatically generated in the build directory
#include <wideband_detector1_pydoc.h>

void bind_wideband_detector1(py::module& m)
{

    using wideband_detector1 = ::gr::ainfosec::wideband_detector1;


    py::class_<wideband_detector1,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<wideband_detector1>>(
        m, "wideband_detector1", D(wideband_detector1))

        .def(py::init(&wideband_detector1::make),
             py::arg("address"),
             py::arg("rx_freq"),
             py::arg("fft_size"),
             py::arg("sample_rate"),
             D(wideband_detector1, make))


        .def("set_address",
             &wideband_detector1::set_address,
             py::arg("address"),
             D(wideband_detector1, set_address))


        .def("set_rx_freq",
             &wideband_detector1::set_rx_freq,
             py::arg("rx_freq"),
             D(wideband_detector1, set_rx_freq))


        .def("set_fft_size",
             &wideband_detector1::set_fft_size,
             py::arg("fft_size"),
             D(wideband_detector1, set_fft_size))


        .def("set_sample_rate",
             &wideband_detector1::set_sample_rate,
             py::arg("sample_rate"),
             D(wideband_detector1, set_sample_rate))

        ;
}
