#!/usr/bin/env python2
from PyQt4 import QtCore, QtGui, uic


import subprocess
import os
import sys
import time
import re

this_file_directory = os.path.dirname(os.path.realpath(__file__))
fissure_directory = os.path.abspath(os.path.join(this_file_directory, os.pardir))

form_class = uic.loadUiType(fissure_directory + "/UI/install.ui")[0]
form_class2 = uic.loadUiType(fissure_directory + "/UI/install2.ui")[0]

# Program Format: ('name','command',checked/default, parent_category)

larger_categories = ['Minimum Install','Hardware','Out-of-Tree Modules','Compile Flow Graphs','433 MHz','802.11','Aircraft','AIS','Audio','Bluetooth','Data','Development',
    'GPS','GSM','Ham Radio','HD Radio','LTE','Mapping','POCSAG','Radiosonde','RFID','Satellite','SDR','SSH','Trunked Radio','V2V','Video','Z-Wave']

########################################################################
############################# Ubuntu 18.04 #############################
########################################################################

programs_ubuntu18_04 = []

# Misc. Dependencies
programs_ubuntu18_04.append(('Misc. Dependencies (676.9 MB)',
"""sudo apt-get -y update
sudo apt-get -y install cmake
sudo apt-get install -y python-setuptools python-dev build-essential
sudo apt install -y python-pip
sudo python2 -m pip install --upgrade setuptools
sudo python2 -m pip install Cheetah
sudo python2 -m pip install --upgrade pip
sudo python2 -m pip install --upgrade virtualenv
# sudo python -mpip uninstall matplotlib 
sudo python2 -m pip install matplotlib
sudo python2 -m pip install --upgrade PyYAML --ignore-installed
sudo apt-get install -y python-scipy
sudo apt-get install -y gedit
sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
sudo apt-get install -y git 
sudo apt-get install -y libcanberra-gtk-module
sudo apt-get install -y python3-pip
sudo python2 -m pip install bitarray
sudo apt install net-tools
sudo python2 -m pip install crcmod
sudo apt-get install -y python3-pip
sudo python3 -m pip install pyopenssl
sudo python3 -m pip install cryptography
sudo python3 -m pip install pycrypto
sudo apt-get install -y expect
sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python2 -m pip install pypcapfile
sudo python2 -m pip install psutil
sudo python2 -m pip install pyserial
sudo apt-get install -y gpsd-clients python-gi-cairo
sudo python2 -m pip install pandas
sudo apt-get install -y dsniff
sudo python2 -m pip install seaborn 
source ~/.bashrc
""",True,'Minimum Install'))

# fissure Command 
programs_ubuntu18_04.append(('fissure Command (20.5 kB)',
"""mkdir -p ~/.local/bin  # Open a new terminal to use fissure command
if grep -Fq "~/.local/bin" ~/.bashrc
then
  echo "~/.local/bin is already in ~/.bashrc"
else
  printf "\\n%s\\n" "export PATH=~/.local/bin:$PATH" >> ~/.bashrc
fi
/bin/echo -e "python2 """ + fissure_directory + """/dashboard.py" > ~/.local/bin/fissure
sudo chmod +x ~/.local/bin/fissure
echo "[Desktop Entry]\\nStartupWMClass=dashboard.py\\nName=FISSURE\\nTerminal=false\\nType=Application\\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=/home/$USER/.local/bin/fissure" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/docs/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
source ~/.bashrc
########## Verify ##########
ls ~/.local/bin/fissure
""",True,'Minimum Install'))

# GNU Radio
programs_ubuntu18_04.append(('GNU Radio (858.3 MB)',
"""sudo add-apt-repository -y ppa:mormj/gnuradio-releases-3.7
sudo apt-get update
sudo apt-get install -y gnuradio=3.7.13.5~gnuradio~bionic-4
sudo apt-get install -y python-qwt5-qt4  # Needed for Filter Design Tool
sudo rm -f /usr/share/mime/packages/gnuradio.xml
sudo ln -s /usr/share/gnuradio/grc/freedesktop/gnuradio-grc.xml /usr/share/mime/packages/gnuradio.xml
sudo update-mime-database -V /usr/share/mime/

# Configure GNU Radio
(gnuradio-companion &) && sleep 5 && killall gnuradio-companion
/bin/echo -e "[grc]\nlocal_blocks_path=""" + fissure_directory + """/Custom_Blocks\nxterm_executable=/usr/bin/gnome-terminal" > ~/.gnuradio/config.conf
sudo cp /usr/lib/uhd/utils/uhd-usrp.rules /etc/udev/rules.d/  # For B205 mini
sudo udevadm control --reload-rules
sudo udevadm trigger
sudo mkdir /usr/share/uhd
sudo chmod -R 777 /usr/share/uhd
uhd_images_downloader

sudo apt-get install -y libzmq3-dev
sudo apt-get install -y swig
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig
########## Verify ##########
gnuradio-companion --help
""",True,'Minimum Install'))

# Scapy
programs_ubuntu18_04.append(('Scapy (38.0 MB)',
"""sudo python2 -m pip install scapy
sudo python3 -m pip install scapy
sudo python2 -m pip install -U cryptography
########## Verify ##########
python2 -c "import scapy" && python3 -c "import scapy"
""",True,'Minimum Install'))

# Wireshark
programs_ubuntu18_04.append(('Wireshark (49.3 MB)',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,'Minimum Install'))

# LimeSDR
programs_ubuntu18_04.append(('LimeSDR (175.3 MB)',
"""sudo add-apt-repository -y ppa:myriadrf/drivers
sudo apt-get update
sudo apt-get install -y limesuite liblimesuite-dev limesuite-udev limesuite-images
sudo apt-get install -y soapysdr-tools soapysdr-module-lms7
sudo apt-get install -y libboost-all-dev swig
########## Verify ##########
ls /usr/bin/LimeSuiteGUI
""",True,'Hardware'))

# HackRF, RTL-SDR, gr-osmosdr
programs_ubuntu18_04.append(('HackRF, RTL-SDR, gr-osmosdr',
"""sudo apt-get install -y libusb-1.0-0-dev git cmake pkg-config

# HackRF
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/greatscottgadgets/hackrf/releases/download/v2022.09.1/hackrf-2022.09.1.zip
unzip hackrf-2022.09.1.zip
rm hackrf-2022.09.1.zip
mkdir ~/Installed_by_FISSURE/hackrf-2022.09.1/host/build
cd ~/Installed_by_FISSURE/hackrf-2022.09.1/host/build
cmake ..
make
sudo make install
sudo ldconfig
sudo cp """ + fissure_directory + """/Tools/53-hackrf.rules /etc/udev/rules.d/53-hackrf.rules
sudo udevadm trigger --action=change

# RTL-SDR
cd ~/Installed_by_FISSURE/
git clone https://gitea.osmocom.org/sdr/rtl-sdr.git
cd rtl-sdr
mkdir build
cd build
cmake ../ -DINSTALL_UDEV_RULES=ON
make
sudo make install
sudo cp ../rtl-sdr.rules /etc/udev/rules.d/
sudo ldconfig
sudo rmmod dvb_usb_rtl28xxu
echo 'blacklist dvb_usb_rtl28xxu' | sudo tee --append /etc/modprobe.d/blacklist-dvb_usb_rtl28xxu.conf

# gr-osmosdr
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/gr-osmosdr.git
cd gr-osmosdr
git checkout gr3.7
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/bin/osmocom_fft
""",True,'Hardware'))

# BladeRF
programs_ubuntu18_04.append(('BladeRF (621.1 MB)',
"""sudo apt-get install -y libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 libtecla1-dev pkg-config git wget	# bladeRF 2.0 requires gr-osmosdr from source			
#sudo apt-get install -y bladerf  # 2016 - probe doesn't work for bladeRF 2.0 micro
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Nuand/bladeRF.git
cd bladeRF
cd host
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DINSTALL_UDEV_RULES=ON ../
make
sudo make install
sudo ldconfig
sudo apt-get install -y bladerf-fpga-hostedx115  # A4, A5, A9 does not exist
sudo apt-get install -y bladerf-fpga-hostedx40   # A4, A5, A9 does not exist
sudo mkdir -p /usr/share/Nuand/bladeRF
sudo wget https://www.nuand.com/fpga/hostedxA4-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA4.rbf
sudo wget https://www.nuand.com/fpga/hostedxA5-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA5.rbf
sudo wget https://www.nuand.com/fpga/hostedxA9-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA9.rbf
#sudo wget https://www.nuand.com/fpga/hostedx40-latest.rbf -O /usr/share/Nuand/bladeRF/hostedx40.rbf  
#sudo wget https://www.nuand.com/fpga/hostedx115-latest.rbf -O /usr/share/Nuand/bladeRF/hostedx115.rbf  # Causes compatibility errors
########## Verify ##########
bladeRF-cli --help
""",True,'Hardware'))

# USRP X300 Series
programs_ubuntu18_04.append(('USRP X300 Series (9.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE  # Set MTU to 9000 and run uhd_image_loader command
cd ~/Installed_by_FISSURE
wget https://codeload.github.com/EttusResearch/uhd/zip/release_003_010_003_000 -O uhd.zip
unzip uhd.zip
cd uhd-release_003_010_003_000/host/include
sudo cp -Rv uhd/rfnoc /usr/share/uhd/
rm -Rf ~/Installed_by_FISSURE/uhd-release_003_010_003_000
""",True,'Hardware'))

# 8812au Driver
programs_ubuntu18_04.append(('8812au Driver (31.1 MB)',
"""mkdir -p ~/Installed_by_FISSURE
gzip -dc """ + fissure_directory + """/Tools/rtl8812au.tar.gz | tar -zxf - -C ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/rtl8812au
make
sudo make install
sudo modprobe 8812au
# This method below breaks < 20.04 on reboot
#sudo apt-get install -y dkms
#mkdir -p ~/Installed_by_FISSURE
#cd ~/Installed_by_FISSURE
#git clone https://github.com/aircrack-ng/rtl8812au -b v5.3.4
#cd rtl8812au/
#sudo ./dkms-install.sh
""",True,'Hardware'))

# Zigbee Sniffer
programs_ubuntu18_04.append(('Zigbee Sniffer (90.1 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/OpenSniffer-0.1/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/OpenSniffer-0.1/
sudo python3 setup.py install
""",True,'Hardware'))

# fl2k
programs_ubuntu18_04.append(('fl2k (16.8 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_ubuntu18_04.append(('Proxmark3 (1.3 GB)',
"""sudo apt-get install -y p7zip git build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev libqt4-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libpcsclite-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# PlutoSDR
programs_ubuntu18_04.append(('PlutoSDR (12.2 MB)',
"""sudo apt-get install -y gr-iio
#sudo apt-get install -y libglib2.0-dev libgtk2.0-dev libgtkdatabox-dev libmatio-dev libfftw3-dev libxml2 libxml2-dev bison flex libavahi-common-dev libavahi-client-dev libjansson-dev cmake libaio-dev libserialport-dev libcdk5-dev libusb-1.0-0-dev doxygen graphviz libgmp-dev swig liborc-dev  # libcurl4-openssl-dev, git  (not available)
#cd ~/Installed_by_FISSURE
#git clone https://github.com/pcercuei/libini.git
#cd libini
#mkdir build && cd build && cmake ../ && make && sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/libiio.git
#cd libiio
#mkdir build && cd build && cmake ../ && make && sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/libad9361-iio.git
#cd libad9361-iio
#cmake ./
#make
#sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/iio-oscilloscope.git  # IIO oscilloscope is optional
#cd iio-oscilloscope
#git checkout origin/master
#mkdir build && cd build
#cmake ../ && make
#sudo make install
#cd ~/Installed_by_FISSURE  # Did not work
#git clone https://github.com/analogdevicesinc/gr-iio.git
#cd gr-iio
#cmake .
#make
#sudo make install
#cd ..
#sudo ldconfig
########## Verify ##########
python2 -c "from gnuradio import iio"
""",True,'Hardware'))

# gr-acars
programs_ubuntu18_04.append(('gr-acars (2.9 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-acars/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/acars
""",True,'Out-of-Tree Modules'))

# gr-adsb
programs_ubuntu18_04.append(('gr-adsb (528.3 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-adsb/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-adsb/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/adsb
""",True,'Out-of-Tree Modules'))

# gr-ainfosec
programs_ubuntu18_04.append(('gr-ainfosec (3.2 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ainfosec/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/ainfosec
""",True,'Minimum Install'))

# gr-ais
programs_ubuntu18_04.append(('gr-ais (5.1 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ais/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/ais
""",True,'Out-of-Tree Modules'))

# gr-bluetooth
programs_ubuntu18_04.append(('gr-bluetooth (10.6 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-bluetooth/)" ]; 
then
  mkdir -p ~/Installed_by_FISSURE
  cd ~/Installed_by_FISSURE
  rm -Rf libbtbb
  git clone https://github.com/greatscottgadgets/libbtbb -b master
  cd libbtbb
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-bluetooth/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/bin/btrx
""",True,'Out-of-Tree Modules'))

# gr-clapper_plus
programs_ubuntu18_04.append(('gr-clapper_plus (704.5 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-clapper_plus/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-clapper_plus/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/clapper_plus
""",True,'Out-of-Tree Modules'))

# gr-dect2
programs_ubuntu18_04.append(('gr-dect2 (4.5 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-dect2/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/dect2
""",True,'Out-of-Tree Modules'))

# gr-foo
programs_ubuntu18_04.append(('gr-foo (9.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-foo/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-foo/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/foo
""",True,'Out-of-Tree Modules'))

# gr-fuzzer
programs_ubuntu18_04.append(('gr-fuzzer (3.1 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-fuzzer/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/fuzzer
""",True,'Out-of-Tree Modules'))

# gr-garage_door
programs_ubuntu18_04.append(('gr-garage_door (733.2 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-garage_door/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-garage_door/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/garage_door
""",True,'Out-of-Tree Modules'))

# gr-gsm-master
programs_ubuntu18_04.append(('gr-gsm-master (42.3 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-gsm-master/
sudo rm -Rf build
#sudo apt-get install -y gr-osmosdr  # Installing from source
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# gr-gsm needs to be made twice for "import arfcn" block to work
make 
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/grgsm
""",True,'Out-of-Tree Modules'))

# gr-ieee802-11
programs_ubuntu18_04.append(('gr-ieee802-11 (14.4 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/examples/wifi_phy_hier.grc
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/ieee802_11
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4
programs_ubuntu18_04.append(('gr-ieee802-15-4 (23.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/examples/ieee802_15_4_CSS_PHY.grc
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/examples/ieee802_15_4_OQPSK_PHY.grc
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/ieee802_15_4
""",True,'Out-of-Tree Modules'))

# gr-iridium-maint-3.7
programs_ubuntu18_04.append(('gr-iridium-maint-3.7 (8.5 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-iridium-maint-3.7/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/iridium
""",True,'Out-of-Tree Modules'))

# gr-j2497
programs_ubuntu18_04.append(('gr-j2497 (909.3 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-j2497/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-j2497/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/J2497
""",True,'Out-of-Tree Modules'))

# gr-limesdr
programs_ubuntu18_04.append(('gr-limesdr (4.3 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-limesdr/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-limesdr/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/limesdr
""",True,'Out-of-Tree Modules'))

# gr-mixalot
programs_ubuntu18_04.append(('gr-mixalot (10.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-mixalot/)" ]; 
then
  sudo apt-get install -y libitpp-dev
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-mixalot/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/mixalot
""",True,'Out-of-Tree Modules'))

# gr-nrsc5
programs_ubuntu18_04.append(('gr-nrsc5 (39.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-nrsc5/)" ]; 
then
  sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev liborc-0.4-dev
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-nrsc5/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/nrsc5
""",True,'Out-of-Tree Modules'))

# gr-paint
programs_ubuntu18_04.append(('gr-paint (3.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/
  gcc tgatoluma.c -o tgatoluma
  chmod +x tgatoluma
  cp tgatoluma ~/.local/bin/
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/paint
""",True,'Out-of-Tree Modules'))

# gr-rds
programs_ubuntu18_04.append(('gr-rds (5.9 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-rds/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-rds/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/rds
""",True,'Out-of-Tree Modules'))

# gr-tpms
programs_ubuntu18_04.append(('gr-tpms (5.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/tpms
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore
programs_ubuntu18_04.append(('gr-tpms_poore (786.4 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms_poore/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms_poore/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/tpms_poore
""",True,'Out-of-Tree Modules'))

# gr-X10
programs_ubuntu18_04.append(('gr-X10 (798.7 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-X10/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-X10/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/X10
""",True,'Out-of-Tree Modules'))

# gr-Zwave
programs_ubuntu18_04.append(('gr-Zwave (4.4 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-Zwave/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/Zwave
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore
programs_ubuntu18_04.append(('gr-zwave_poore (786.4 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-zwave_poore/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-zwave_poore/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/zwave_poore
""",True,'Out-of-Tree Modules'))

# QSpectrumAnalyzer
programs_ubuntu18_04.append(('QSpectrumAnalyzer (181.1 MB)',
"""#sudo add-apt-repository -y ppa:myriadrf/drivers
#sudo apt-get -y update
sudo apt-get install -y python3-pip python3-pyqt5 python3-numpy python3-scipy soapysdr python3-soapysdr
sudo apt-get install -y soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7
python3 -m pip install --user qspectrumanalyzer
PATH=$PATH:~/.local/bin
export PATH
. ~/.bashrc
sudo cp ~/.local/bin/qspectrumanalyzer /usr/local/bin/
########## Verify ##########
ls ~/.local/bin/qspectrumanalyzer
""",True,'SDR'))

# GQRX
programs_ubuntu18_04.append(('GQRX (18.7 MB)',
"""sudo apt-get install -y gqrx-sdr
########## Verify ##########
ls /usr/bin/gqrx
""",True,'SDR'))

# Dump1090
programs_ubuntu18_04.append(('Dump1090 (3.1 MB)',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,'Aircraft'))

# QtDesigner
programs_ubuntu18_04.append(('QtDesigner (2.6 MB)',
"""sudo apt-get install -y python-qt4 qt4-designer
########## Verify ##########
ls /usr/bin/designer
""",True,'Development'))

# Grip
programs_ubuntu18_04.append(('Grip (15.2 MB)',
"""python2 -m pip install grip
########## Verify ##########
ls ~/.local/bin/grip
""",True,'Development'))

# Kismet
programs_ubuntu18_04.append(('Kismet (6.0 MB)',
"""sudo apt-get install -y kismet
########## Verify ##########
ls /usr/bin/kismet
""",True,'802.11'))

# UDP Replay
programs_ubuntu18_04.append(('UDP Replay (725.0 kB)',
"""sudo apt-get install -y libpcap-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/rigtorp/udpreplay.git
cd ~/Installed_by_FISSURE/udpreplay
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls /usr/local/bin/udpreplay
""",True,'802.11'))

# V2Verifier
programs_ubuntu18_04.append(('V2Verifier (7.5 MB)',
"""sudo apt-get install -y libgmp3-dev python3-tk python3-pil.imagetk
python3 -m pip install fastecdsa
python3 -m pip install -U pyyaml
#sudo apt install -y git cmake libuhd-dev uhd-host swig libgmp3-dev python3-pip python3-tk python3-pil 
#python3-pil.imagetk gnuradio
#Needs gr-foo and gr-ieee802-11
""",True,'V2V'))

# OpenBTS
programs_ubuntu18_04.append(('OpenBTS (1.4 GB)',
"""sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get update
sudo apt-get install -y git
sudo apt-get install -y asterisk
sudo apt-get install -y twinkle
sudo apt-get install -y autoconf libtool libosip2-dev libortp-dev libusb-1.0-0-dev g++ sqlite3 libsqlite3-dev erlang libreadline6-dev libncurses5-dev
mkdir -p ~/Installed_by_FISSURE/OpenBTS
cd ~/Installed_by_FISSURE/OpenBTS
git clone https://github.com/RangeNetworks/dev.git
cd dev
./clone.sh
./switchto.sh master
cd liba53/
sudo make install
cd ..
git clone https://github.com/tom-2015/fakecoredumper.git
cd fakecoredumper
chmod +x install.sh
./install.sh
cd ..
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/build.sh ./build.sh
sudo apt install g++-5 -y
sudo update-alternatives --remove-all gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 
./build.sh B210
sudo mkdir /etc/OpenBTS
cd openbts
sudo sqlite3 -init ./apps/OpenBTS.example.sql /etc/OpenBTS/OpenBTS.db ".quit"
#sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/usrp_b210_fpga.bin /usr/share/uhd/images/usrp_b210_fpga.bin
cd apps
ln -s ../Transceiver52M/transceiver .
sudo apt-get install -y sqlitebrowser
sudo mkdir -p /var/lib/asterisk/sqlite3dir
cd ../../subscriberRegistry
make
cd apps
cp """ + fissure_directory + """/Tools/openbts_files_18_04/sipauthserve.example.sql sipauthserve.example.sql
sudo sqlite3 -init sipauthserve.example.sql /etc/OpenBTS/sipauthserve.db ".quit"
cd ../../smqueue
autoconf -i
./configure
make
cp """ + fissure_directory + """/Tools/openbts_files_18_04/smqueue.example.sql smqueue/smqueue.example.sql
sudo sqlite3 -init smqueue/smqueue.example.sql /etc/OpenBTS/smqueue.db ".quit"
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/sip.conf /etc/asterisk/sip.conf
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/extensions.conf /etc/asterisk/extensions.conf
sudo apt-get install -y pcscd pcsc-tools libccid libpcsclite-dev
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/pysim
cd pysim
sudo python3 -m pip install -r requirements.txt
sudo update-alternatives --remove-all gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
""",True,'GSM'))

# srsRAN/srsLTE
programs_ubuntu18_04.append(('srsRAN (837.2 MB)',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
sudo make install
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,'LTE'))

# FALCON
programs_ubuntu18_04.append(('FALCON (677.5 MB)',
"""sudo apt-get install -y build-essential git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev  # For srsLTE
cd ~/Installed_by_FISSURE
sudo apt-get install -y libglib2.0-dev libudev-dev libcurl4-gnutls-dev libboost-all-dev qtdeclarative5-dev libqt5charts5-dev  # FALCON
git clone https://github.com/falkenber9/falcon.git
cd falcon
mkdir build
cd build
cmake -DFORCE_SUBPROJECT_SRSLTE=ON -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
#sudo xargs rm < install_manifest.txt  # uninstall
#make clean
########## Verify ##########
ls /usr/bin/FalconGUI
""",True,'LTE'))

# LTE-ciphercheck
programs_ubuntu18_04.append(('LTE-ciphercheck (151.9 MB)',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp ../srsue/ciphercheck.conf.example ../srsue/ciphercheck.conf
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf
""",True,'LTE'))

# Aircrack-ng
programs_ubuntu18_04.append(('Aircrack-ng (19.1 MB)',
"""sudo apt-get install -y aircrack-ng
########## Verify ##########
aircrack-ng --help
""",True,'802.11'))

# Geany
programs_ubuntu18_04.append(('Geany (14.2 MB)',
"""sudo apt-get install -y geany
########## Verify ##########
geany --help
""",True,'Development'))

# Arduino IDE
programs_ubuntu18_04.append(('Arduino IDE (630.2 MB)',
"""wget -P ~/Installed_by_FISSURE/ https://downloads.arduino.cc/arduino-1.8.15-linux64.tar.xz
cd ~/Installed_by_FISSURE
tar -xf arduino-1.8.15-linux64.tar.xz
rm arduino-1.8.15-linux64.tar.xz
cd arduino-1.8.15/
sudo ./install.sh
cp -R """ + fissure_directory + """/Tools/Esp8266_listen_trigger/ ~/Installed_by_FISSURE/
########## Verify ##########
arduino --version
""",True,'Development'))

# Minicom
programs_ubuntu18_04.append(('Minicom (1.6 MB)',
"""sudo apt-get install -y minicom
########## Verify ##########
ls /usr/bin/minicom
""",True,'Hardware'))

# PuTTY
programs_ubuntu18_04.append(('PuTTY (4.2 MB)',
"""sudo apt-get install -y putty
########## Verify ##########
putty --help
""",True,'Hardware'))

# openHAB
programs_ubuntu18_04.append(('openHAB (223.6 MB)',
"""wget -qO - 'https://openhab.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
sudo apt-get install -y apt-transport-https
echo 'deb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list
sudo apt-get update
sudo apt-get install -y openhab
########## Verify ##########
ls /usr/bin/openhab-cli
""",True,'Z-Wave'))

# rtl-zwave
programs_ubuntu18_04.append(('rtl-zwave (102.4 kB)',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y libpcap-dev
cp -R """ + fissure_directory + """/Tools/rtl-zwave-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/rtl-zwave-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/rtl-zwave-master/rtl_zwave
""",True,'Z-Wave'))

# waving-z
programs_ubuntu18_04.append(('waving-z (2.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/
git clone https://github.com/baol/waving-z.git
cd ~/Installed_by_FISSURE/waving-z
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build .
########## Verify ##########
ls ~/Installed_by_FISSURE/waving-z/build/wave-in
""",True,'Z-Wave'))

# baudline
programs_ubuntu18_04.append(('baudline (4.9 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://www.baudline.com/baudline_1.08_linux_x86_64.tar.gz
tar -xf baudline_1.08_linux_x86_64.tar.gz
rm baudline_1.08_linux_x86_64.tar.gz
########## Verify ##########
~/Installed_by_FISSURE/baudline_1.08_linux_x86_64/baudline --help
""",True,'SDR'))

# Universal Radio Hacker
programs_ubuntu18_04.append(('Universal Radio Hacker (35.9 MB)',
"""sudo python3 -m pip install cython
sudo python3 -m pip install urh
########## Verify ##########
urh --version
""",False,'SDR'))

# Inspectrum
programs_ubuntu18_04.append(('Inspectrum (1.5 MB)',
"""sudo apt-get install -y inspectrum
########## Verify ##########
inspectrum --help
""",True,'SDR'))

# OpenCPN
programs_ubuntu18_04.append(('OpenCPN (121.7 MB)',
"""sudo add-apt-repository -y ppa:opencpn/opencpn
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C865EB40
sudo apt-get update
sudo apt-get install -y opencpn
########## Verify ##########
ls /usr/bin/opencpn
""",False,'AIS'))

# Kalibrate
programs_ubuntu18_04.append(('Kalibrate (1.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/steve-m/kalibrate-rtl.git
cd kalibrate-rtl
./bootstrap && CXXFLAGS='-W -Wall -O3' ./configure && make
########## Verify ##########
ls ~/Installed_by_FISSURE/kalibrate-rtl/src/kal
""",True,'GSM'))

# retrogram-rtlsdr
programs_ubuntu18_04.append(('retrogram-rtlsdr (1.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y librtlsdr-dev libncurses5-dev libboost-program-options-dev
cp -R """ + fissure_directory + """/Tools/retrogram-rtlsdr-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/retrogram-rtlsdr-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/retrogram-rtlsdr-master/retrogram-rtlsdr
""",True,'SDR'))

# RTLSDR-Airband
programs_ubuntu18_04.append(('RTLSDR-Airband (9.7 MB)',
"""sudo apt-get install -y build-essential cmake pkg-config libmp3lame-dev libshout3-dev libconfig++-dev libfftw3-dev libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/szpajder/RTLSDR-Airband.git
cd RTLSDR-Airband
mkdir build
cd build
cmake ../
make
sudo make install
########## Verify ##########
rtl_airband -h
""",True,'SDR'))

# Spektrum
programs_ubuntu18_04.append(('Spektrum (241.9 MB)',
"""echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/rtl-sdr.conf  # Restart computer to use RTL device
echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", GROUP="adm", MODE="0666"' | sudo tee /etc/udev/rules.d/20.rtlsdr.rules
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/pavels/spektrum/releases/download/2.1.0/spektrum-linux64.tar.gz
cd ~/Installed_by_FISSURE
tar -xf spektrum-linux64.tar.gz
rm spektrum-linux64.tar.gz
########## Verify ##########
ls ~/Installed_by_FISSURE/spektrum/spektrum
""",True,'SDR'))

# SDRTrunk
programs_ubuntu18_04.append(('SDRTrunk (106.9 MB)',
"""#sudo apt-get -yq install gnupg curl  # Java (if needed)
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
#cd ~/Downloads
#curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
#sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
#sudo apt-get update
#sudo apt-get install -y zulu11-jdk
#rm zulu-repo_1.0.0-2_all.deb
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/DSheirer/sdrtrunk/releases/download/v0.5.0-alpha.6/sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
cd ~/Installed_by_FISSURE
unzip -q sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
rm sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
########## Verify ##########
ls ~/Installed_by_FISSURE/sdr-trunk-linux-x86_64-v0.5.0-alpha6/bin/sdr-trunk
""",True,'Trunked Radio'))

# Audacity
programs_ubuntu18_04.append(('Audacity (110.1 MB)',
"""sudo apt-get install -y audacity
########## Verify ##########
audacity --version
""",True,'Audio'))

# Sound eXchange
programs_ubuntu18_04.append(('Sound eXchange (2.1 MB)',
"""sudo apt-get install -y sox
########## Verify ##########
sox --version
""",True,'Audio'))

# LAME
programs_ubuntu18_04.append(('LAME (180.2 kB)',
"""sudo apt-get install -y lame
########## Verify ##########
lame --version
""",True,'Audio'))

# mpv
programs_ubuntu18_04.append(('mpv (146.5 MB)',
"""sudo apt-get install -y mpv
########## Verify ##########
mpv --version
""",True,'Audio'))

# FFmpeg
programs_ubuntu18_04.append(('FFmpeg',
"""sudo apt-get install -y ffmpeg 
########## Verify ##########
ffmpeg --help
""",True,'Audio'))

# MPlayer
programs_ubuntu18_04.append(('MPlayer (14.5 MB)',
"""sudo apt-get install -y mplayer
########## Verify ##########
ls /usr/bin/mplayer
""",True,'Audio'))

# VLC
programs_ubuntu18_04.append(('VLC (343.3 MB)',
"""sudo apt-get install -y snapd
sudo snap install vlc
########## Verify ##########
vlc --help
""",True,'Video'))

# Simple Screen Recorder
programs_ubuntu18_04.append(('Simple Screen Recorder (4.5 MB)',
"""sudo apt-get install -y simplescreenrecorder
########## Verify ##########
simplescreenrecorder --help
""",True,'Video'))

# radiosonde_auto_rx
programs_ubuntu18_04.append(('radiosonde_auto_rx (55.4 MB)',
"""sudo apt-get install -y python3 python3-numpy python3-setuptools python3-crcmod python3-requests python3-dateutil python3-pip python3-flask sox git build-essential libtool cmake usbutils libusb-1.0-0-dev rng-tools libsamplerate-dev libatlas3-base libgfortran5
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/projecthorus/radiosonde_auto_rx.git
cd radiosonde_auto_rx/auto_rx
./build.sh
cp station.cfg.example station.cfg
sudo python3 -m pip install -r requirements.txt
########## Verify ##########
ls ~/Installed_by_FISSURE/radiosonde_auto_rx/auto_rx/auto_rx.py
""",True,'Radiosonde'))

# SdrGlut
programs_ubuntu18_04.append(('SdrGlut (305.0 MB)',
"""sudo apt-get install -y librtaudio-dev libsoapysdr0.6 libsoapysdr-dev libopenal-dev libliquid-dev freeglut3 freeglut3-dev libalut0 libalut-dev libsndfile1-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/righthalfplane/SdrGlut.git
cp -f """ + fissure_directory + """/Tools/SdrGlut/firstFile.h ~/Installed_by_FISSURE/SdrGlut/MainSource/
cd SdrGlut
make -f makefileUbunta
########## Verify ##########
ls ~/Installed_by_FISSURE/SdrGlut/sdrglut.x
""",True,'SDR'))

# rehex
programs_ubuntu18_04.append(('rehex (550.1 MB)',
"""sudo apt-get install -y build-essential git libwxgtk3.0-dev libjansson-dev libcapstone-dev liblua5.3-dev lua5.3 lua5.2 libunistring-dev gtk2.0 libgtk2.0-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/solemnwarning/rehex.git
cd rehex
sudo cpan Template
sudo make install
########## Verify ##########
ls /usr/local/bin/rehex 
""",True,'Data'))

# ZEPASSD
programs_ubuntu18_04.append(('ZEPASSD (9.2 MB)',
"""#sudo apt-get install -y # boost.program-options, boost.crc, boost.circular-buffer, libfftw3, libuhd 3.9.5 or later
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/pvachon/zepassd.git
cd zepassd
make
########## Verify ##########
ls ~/Installed_by_FISSURE/zepassd/zepassd
""",True,'RFID'))

# iridium-toolkit
programs_ubuntu18_04.append(('iridium-toolkit (3.1 MB)',
"""#Python (2.7), NumPy (scipy), crcmod
sudo apt-get install -y mplayer
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/muccc/iridium-toolkit.git
git clone git://git.osmocom.org/osmo-ir77
cd osmo-ir77/codec/
sudo make
cp ir77_ambe_decode ~/Installed_by_FISSURE/iridium-toolkit/
########## Verify ##########
ls ~/Installed_by_FISSURE/osmo-ir77/codec/ir77_ambe_decode
""",True,'Satellite'))

# IridiumLive
programs_ubuntu18_04.append(('IridiumLive (97.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/microp11/iridiumlive.git
wget -P ~/Installed_by_FISSURE/ https://github.com/microp11/iridiumlive/releases/download/v1.2/linux-x64.zip
unzip -q linux-x64.zip
rm linux-x64.zip
cd linux-x64
sudo chmod +x IridiumLive
########## Verify ##########
ls ~/Installed_by_FISSURE/linux-x64/IridiumLive
""",True,'Satellite'))

# NETATTACK2
programs_ubuntu18_04.append(('NETATTACK2 (37.7 MB)',
"""sudo python2 -m pip install netifaces
sudo apt-get install -y python-scapy python-nmap python-nfqueue nmap
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/chrizator/netattack2.git
""",True,'802.11'))

# Wifite
programs_ubuntu18_04.append(('Wifite (549.0 MB)',
"""# python, iwconfig, ifconfig, Aircrack-ng, tshark, reaver, bully, coWPAtty, pyrit, hashcat, hcxdumptool, hcxpcaptool
sudo apt-get install -y build-essential libpcap-dev aircrack-ng pixiewps libssl-dev hashcat libcurl4-openssl-dev pkg-config macchanger
sudo python2 -m pip install psycopg2-binary scapy
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/derv82/wifite2.git
git clone https://github.com/t6x/reaver-wps-fork-t6x
cd reaver-wps-fork-t6x/src
./configure
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/aanarchyy/bully
cd bully/src
make
sudo make install
cd ~/Installed_by_FISSURE
wget http://www.willhackforsushi.com/code/cowpatty/4.6/cowpatty-4.6.tgz
tar zxfv cowpatty-4.6.tgz
rm cowpatty-4.6.tgz
cd cowpatty-4.6
make
sudo cp cowpatty /usr/bin
cd ~/Installed_by_FISSURE
mkdir Pyrit-v0.5.0
cd Pyrit-v0.5.0
wget https://github.com/JPaulMora/Pyrit/releases/download/v0.5.0/Pyrit-v0.5.0.zip
unzip -q Pyrit-v0.5.0.zip
rm Pyrit-v0.5.0.zip
python2 setup.py clean
python2 setup.py build
sudo python2 setup.py install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxdumptool.git
cd hcxdumptool
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxtools.git
cd hcxtools
make
sudo make install
sudo ln -s /usr/bin/hcxpcapngtool /usr/bin/hcxpcaptool
########## Verify ##########
~/Installed_by_FISSURE/wifite2/Wifite.py --help
""",True,'802.11'))

# rtl_433
programs_ubuntu18_04.append(('rtl_433 (23.0 MB)',
"""sudo apt-get install -y libtool libusb-1.0-0-dev librtlsdr-dev rtl-sdr build-essential cmake pkg-config
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/merbanan/rtl_433/archive/refs/tags/22.11.zip
unzip 22.11.zip
rm 22.11.zip
mv rtl_433-22.11/ rtl_433/
#git clone https://github.com/merbanan/rtl_433.git
cd rtl_433/
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
rtl_433 -help
""",True,'433 MHz'))

# RouterSploit
programs_ubuntu18_04.append(('RouterSploit (516.2 MB)',
"""#sudo add-apt-repository universe
sudo apt-get install -y python3-pip libglib2.0-dev rustc
sudo python3 -m pip install setuptools-rust
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/threat9/routersploit
cd routersploit
python3 -m pip install setuptools
sed -i 's/paramiko/#paramiko/g' requirements.txt
python3 -m pip install -r requirements.txt
python3 -m pip install bluepy
########## Verify ##########
~/Installed_by_FISSURE/routersploit/rsf.py --help
""",True,'802.11'))

# Metasploit
programs_ubuntu18_04.append(('Metasploit (1.1 GB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
mkdir metasploit
cd metasploit
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
########## Verify ##########
ls /usr/bin/msfconsole
""",True,'802.11'))

# monitor_rtl433
programs_ubuntu18_04.append(('monitor_rtl433 (33.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mcbridejc/monitor_rtl433.git
cd monitor_rtl433
sudo python3 setup.py install
########## Verify ##########
ls /usr/local/bin/monitor_rtl433
""",True,'433 MHz'))

# scan-ssid
programs_ubuntu18_04.append(('scan-ssid (229.4 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y iw
git clone https://github.com/Resethel/scan-ssid.git
cd scan-ssid
sudo cp scan-ssid /usr/local/bin
sudo chmod 755 /usr/local/bin/scan-ssid
########## Verify ##########
scan-ssid --help
""",True,'802.11'))

# minimodem
programs_ubuntu18_04.append(('minimodem (106.5 kB)',
"""sudo apt-get install -y minimodem
########## Verify ##########
minimodem --version
""",True,'Audio'))

# WSJT-X
programs_ubuntu18_04.append(('WSJT-X (4.1 MB)',
"""sudo apt-get install -y wsjtx
########## Verify ##########
ls /usr/bin/wsjtx
""",True,'Ham Radio'))

# Google Earth Pro
programs_ubuntu18_04.append(('Google Earth Pro (314.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
sudo dpkg -i google-earth-pro-stable_current_amd64.deb
########## Verify ##########
ls /usr/bin/google-earth-pro
""",True,'Mapping'))

# gr-air-modes
programs_ubuntu18_04.append(('gr-air-modes (1.4 MB)',
"""sudo apt-get install -y gr-air-modes
########## Verify ##########
modes_rx --help
""",True,'Aircraft'))

# ESP8266 Deauther v2
programs_ubuntu18_04.append(('ESP8266 Deauther v2 (6.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/SpacehuhnTech/esp8266_deauther/archive/v2.zip
unzip -q v2.zip
rm v2.zip
""",True,'802.11'))

# Viking
programs_ubuntu18_04.append(('Viking (458.1 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.code.sf.net/p/viking/code viking
sudo apt install -y gtk-doc-tools docbook-xsl yelp-tools libpng-dev libgtk-3-dev libicu-dev libjson-glib-dev intltool
sudo apt-get install -y libcurl4-gnutls-dev libglib2.0-dev-bin
sudo apt-get install -y libsqlite3-dev nettle-dev libmapnik-dev libgeoclue-2-dev libgexiv2-dev libgps-dev libmagic-dev libbz2-dev libzip-dev liboauth-dev libnova-dev
cd viking
./autogen.sh
./configure
make
sudo make install
########## Verify ##########
viking --help
""",True,'Mapping'))

# PyGPSClient
programs_ubuntu18_04.append(('PyGPSClient (10.7 MB)',
"""sudo apt install -y python3-pip python3-tk python3-pil python3-pil.imagetk libjpeg-dev zlib1g-dev
sudo apt install -y tk-devel
sudo python3 -m pip install --upgrade PyGPSClient
########## Verify ##########
ls /usr/local/bin/pygpsclient
""",True,'GPS'))

# Gpredict
programs_ubuntu18_04.append(('Gpredict (12.5 MB)',
"""sudo apt-get install -y gpredict
########## Verify ##########
gpredict --help
""",True,'GPS'))

# FoxtrotGPS
programs_ubuntu18_04.append(('FoxtrotGPS (2.3 MB)',
"""sudo apt-get install -y foxtrotgps
########## Verify ##########
foxtrotgps --help
""",True,'GPS'))

# multimon-ng
programs_ubuntu18_04.append(('multimon-ng (9.0 MB)',
"""sudo apt-get install -y libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/EliasOenal/multimonNG.git
cd multimonNG
mkdir build
cd build
qmake ../multimon-ng.pro
make
sudo make install
########## Verify ##########
ls /usr/local/bin/multimon-ng
""",True,'POCSAG'))

# Xastir
programs_ubuntu18_04.append(('Xastir (120.9 MB)',
"""sudo apt-get install -y xastir
########## Verify ##########
sudo xastir -V
""",True,'Ham Radio'))

# LTE-Cell-Scanner
programs_ubuntu18_04.append(('LTE-Cell-Scanner (137.8 MB)',
"""sudo apt-get install -y cmake libncurses5-dev liblapack-dev libblas-dev libboost-thread-dev libboost-system-dev libitpp-dev librtlsdr-dev libfftw3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/JiaoXianjun/LTE-Cell-Scanner.git
cd LTE-Cell-Scanner
mkdir build
cd build
cmake ..
make 
sudo make install
########## Verify ##########
ls /usr/local/bin/CellSearch
""",True,'LTE'))

# btscanner
programs_ubuntu18_04.append(('btscanner (921.6 kB)',
"""sudo apt-get install -y btscanner
########## Verify ##########
btscanner --help
""",True,'Bluetooth'))

# hcidump
programs_ubuntu18_04.append(('hcidump (602.1 kB)',
"""sudo apt-get install -y bluez-hcidump
########## Verify ##########
hcidump --help
""",True,'Bluetooth'))

# GraphicsMagick
programs_ubuntu18_04.append(('GraphicsMagick (4.9 MB)',
"""sudo apt-get install -y graphicsmagick-imagemagick-compat
########## Verify ##########
gm -help
""",True,'SDR'))

# Spectrum Painter
programs_ubuntu18_04.append(('Spectrum Painter (10.1 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/polygon/spectrum_painter.git
#cd spectrum_painter/
#python3 -m pip install --user -e .  # call with "python3 -m spectrum_painter.img2iqstream"
""",True,'SDR'))

# nrsc5 and nrsc5-gui
programs_ubuntu18_04.append(('nrsc5 (154.7 MB)',
"""sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev python3-pyaudio
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/theori-io/nrsc5.git
cd nrsc5
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# nrsc5-gui
python3 -m pip install --upgrade Pillow
python3 -m pip install pyaudio
sudo apt-get install -y python-gobject
cd ~/Installed_by_FISSURE
git clone https://github.com/cmnybo/nrsc5-gui.git
########## Verify ##########
nrsc5 -v
""",True,'HD Radio'))

# HAM2MON
programs_ubuntu18_04.append(('HAM2MON (1.0 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/madengr/ham2mon.git
########## Verify ##########
~/Installed_by_FISSURE/ham2mon/apps/ham2mon.py --help
""",True,'Ham Radio'))

# Anki
programs_ubuntu18_04.append(('Anki (318.2 MB)',
"""sudo apt-get install -y anki
########## Verify ##########
anki -h
""",True,'Ham Radio'))

# Bless
programs_ubuntu18_04.append(('Bless (7.7 MB)',
"""sudo apt-get install -y bless
########## Verify ##########
ls /usr/bin/bless
""",True,'Data'))

# trackerjacker
programs_ubuntu18_04.append(('trackerjacker (15.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/calebmadrigal/trackerjacker.git
cd trackerjacker
sudo python3 setup.py install
########## Verify ##########
sudo trackerjacker --help
""",False,'802.11'))

# airgeddon
programs_ubuntu18_04.append(('airgeddon (212.2 MB)',
"""sudo apt-get install -y crunch mdk3 hostapd lighttpd ruby-dev xterm isc-dhcp-server ettercap-text-only libxcrypt-dev john libnl-3-dev libnl-genl-3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone --depth 1 https://github.com/v1s1t0r1sh3r3/airgeddon.git
#asleap
git clone https://github.com/joswr1ght/asleap
cd asleap
make
sudo cp asleap /usr/bin/
#bettercap
sudo apt-get install -y build-essential libpcap-dev net-tools 
cd ~/Installed_by_FISSURE
mkdir bettercap
cd bettercap
wget https://github.com/bettercap/bettercap/releases/download/v2.31.1/bettercap_linux_amd64_v2.31.1.zip
unzip -q bettercap_linux_amd64_v2.31.1.zip
rm bettercap_linux_amd64_v2.31.1.zip
sudo cp bettercap /usr/bin/
#mdk4
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/mdk4
cd mdk4
make
sudo make install
""",True,'802.11'))

# Hydra
programs_ubuntu18_04.append(('Hydra (10.6 MB)',
"""sudo apt-get install -y hydra
########## Verify ##########
ls /usr/bin/hydra
""",True,'SSH'))

# Enscribe
programs_ubuntu18_04.append(('Enscribe (98.2 kB)',
"""sudo apt-get install -y enscribe
########## Verify ##########
ls /usr/bin/enscribe
""",True,'Audio'))

# ESP32 Bluetooth Classic Sniffer
programs_ubuntu18_04.append(('ESP32 BT Classic Sniffer (400.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE  # Requires Wireshark 3.4 by default, modifying it for 3.6.5
cd ~/Installed_by_FISSURE
git clone https://github.com/Matheus-Garbelini/esp32_bluetooth_classic_sniffer
cd esp32_bluetooth_classic_sniffer
rm ./dissectors/config.h
sed -i 's/Bluetooth Link Manager Protocol/ESP32 Bluetooth Link Manager Protocol/g' ./dissectors/packet-btbrlmp.c
sed -i 's/btlmp/esp32_btlmp/g' ./dissectors/packet-btbrlmp.c
sed -i 's/3.4/3.6/g' ./dissectors/build.sh
sudo ./requirements.sh
./build.sh
sudo cp dissectors/h4bcm.so /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.6/epan/  # Placing it where "sudo Wireshark" dissectors are located
rm ~/.local/lib/wireshark/plugins/3.6/epan/h4bcm.so  # To avoid "plugin 'h4bcm.so' was found in multiple directories" warning
########## Verify ##########
ls /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.6/epan/h4bcm.so
""",True,'Bluetooth'))

# QSSTV
programs_ubuntu18_04.append(('QSSTV (3.4 MB)',
"""sudo apt-get install -y qsstv
########## Verify ##########
ls /usr/bin/qsstv
""",True,'Ham Radio'))

# Fldigi
programs_ubuntu18_04.append(('Fldigi (11.0 MB)',
"""sudo apt-get install -y fldigi
########## Verify ##########
ls /usr/bin/fldigi
""",True,'Ham Radio'))

# Bootable USB
programs_ubuntu18_04.append(('Bootable USB (107.4 MB)',
"""sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 382003C2C8B7B4AB813E915B14E4942973C62A1B
sudo add-apt-repository -y "deb http://ppa.launchpad.net/nemh/systemback/ubuntu xenial main"
sudo apt update
sudo apt install -y systemback
sudo add-apt-repository -y ppa:mkusb/ppa
sudo apt-get update
sudo apt-get install -y mkusb usb-pack-efi mkusb-plug guidus
########## Verify ##########
ls /usr/bin/systemback && ls /usr/bin/guidus
""",True,'Development'))

# Dire Wolf
programs_ubuntu18_04.append(('Dire Wolf (204.9 MB)',
"""sudo apt-get -y install git gcc g++ make cmake libasound2-dev libudev-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/wb2osz/direwolf
cd direwolf
git checkout dev
mkdir build
cd build
cmake ..
make -j4
sudo make install
make install-conf
########## Verify ##########
ls /usr/local/bin/direwolf
""",True,'Ham Radio'))

# Meld
programs_ubuntu18_04.append(('Meld (4.8 MB)',
"""sudo apt-get -y install meld
########## Verify ##########
ls /usr/bin/meld
""",True,'Data'))

# HamClock
programs_ubuntu18_04.append(('HamClock (42.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://www.clearskyinstitute.com/ham/HamClock/ESPHamClock.zip
unzip -q ESPHamClock.zip
rm ESPHamClock.zip
cd ESPHamClock
make install hamclock-1600x960
sudo make install hamclock-1600x960
########## Verify ##########
ls /usr/local/bin/hamclock
""",True,'Ham Radio'))

# ICE9 Bluetooth Sniffer
programs_ubuntu18_04.append(('ICE9 Bluetooth Sniffer (4.7 MB)',
"""sudo apt install -y libliquid-dev libbtbb-dev libuhd-dev
sudo apt-get install -y libhackrf-dev libbladerf-dev  # Separating in case there are conflicts with Hardware install
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mikeryan/ice9-bluetooth-sniffer.git
cd ice9-bluetooth-sniffer
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls ~/Installed_by_FISSURE/ice9-bluetooth-sniffer/build/ice9-bluetooth
""",True,'Bluetooth'))

# dump978
programs_ubuntu18_04.append(('dump978 (1.6 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mutability/dump978.git
cd dump978
make
########## Verify ##########
ls ~/Installed_by_FISSURE/dump978/dump978
""",True,'Aircraft'))

# htop
programs_ubuntu18_04.append(('htop (319.5 kB)',
"""sudo apt-get install -y htop
########## Verify ##########
ls /usr/bin/htop
""",True,'Development'))

# CRC RevEng
programs_ubuntu18_04.append(('CRC RevEng (905.2 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -T 20 https://sourceforge.net/projects/reveng/files/3.0.5/reveng-3.0.5.zip/download
unzip download
rm download
cd reveng-3.0.5
make
########## Verify ##########
ls ~/Installed_by_FISSURE/reveng-3.0.5/bin/i386-linux/reveng
""",True,'Data'))

# Gpick
programs_ubuntu18_04.append(('Gpick (1.5 MB)',
"""sudo apt-get install -y gpick
########## Verify ##########
ls /usr/bin/gpick
""",True,'Development'))

# GHex
programs_ubuntu18_04.append(('GHex',
"""sudo apt-get install -y ghex
########## Verify ##########
ls /usr/bin/ghex
""",True,'Data'))

# Archive Flow Graphs
programs_ubuntu18_04.append(('Archive Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Archive\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Fuzzing Flow Graphs
programs_ubuntu18_04.append(('Fuzzing Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Fuzzing\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Inspection Flow Graphs
programs_ubuntu18_04.append(('Inspection Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Inspection\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# IQ Flow Graphs
programs_ubuntu18_04.append(('IQ Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/IQ\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# PD Flow Graphs
programs_ubuntu18_04.append(('PD Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/PD\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Single-Stage Flow Graphs
programs_ubuntu18_04.append(('Single-Stage Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Single-Stage\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Sniffer Flow Graphs
programs_ubuntu18_04.append(('Sniffer Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Sniffer\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Standalone Flow Graphs
programs_ubuntu18_04.append(('Standalone Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Standalone\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# TSI Flow Graphs
programs_ubuntu18_04.append(('TSI Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/TSI\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# pyais
programs_ubuntu18_04.append(('pyais',
"""sudo python3 -m pip install pyais
########## Verify ##########
ls /usr/local/lib/python3*/dist-packages/pyais
""",True,'AIS'))

# HAMRS
programs_ubuntu18_04.append(('HAMRS (105.8 MB)',
"""mkdir -p ~/Installed_by_FISSURE/HAMRS
cd ~/Installed_by_FISSURE/HAMRS
wget https://hamrs-releases.s3.us-east-2.amazonaws.com/1.0.6/hamrs-1.0.6-linux-x86_64.AppImage
sudo chmod +x hamrs*
########## Verify ##########
ls ~/Installed_by_FISSURE/HAMRS/hamrs*
""",True,'Ham Radio'))

# Binwalk
programs_ubuntu18_04.append(('Binwalk',
"""sudo apt-get install -y python3-binwalk binwalk
########## Verify ##########
ls /usr/bin/binwalk
""",True,'Data'))



########################################################################
############################# Ubuntu 18.04.5 ###########################
########################################################################

programs_ubuntu18_04_5 = []

# Misc. Dependencies
programs_ubuntu18_04_5.append(('Misc. Dependencies (676.9 MB)',
"""sudo apt-get -y update
sudo apt-get -y install cmake
sudo apt-get install -y python-setuptools python-dev build-essential
sudo apt install -y python-pip
sudo python2 -m pip install --upgrade setuptools
sudo python2 -m pip install Cheetah
sudo python2 -m pip install --upgrade pip
sudo python2 -m pip install --upgrade virtualenv
# sudo python2 -m pip uninstall matplotlib 
sudo python2 -m pip install matplotlib
sudo python2 -m pip install --upgrade PyYAML --ignore-installed
sudo apt-get install -y python-scipy
sudo apt-get install -y gedit
sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
sudo apt-get install -y git
sudo apt-get install -y libcanberra-gtk-module
sudo apt-get install -y python3-pip
sudo python2 -m pip install bitarray
sudo apt install net-tools
sudo python2 -m pip install crcmod
sudo apt-get install -y python3-pip
sudo python3 -m pip install pyopenssl
sudo python3 -m pip install cryptography
sudo python3 -m pip install pycrypto
sudo apt-get install -y expect
sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python2 -m pip install pypcapfile
sudo python2 -m pip install psutil
sudo python2 -m pip install pyserial
sudo apt-get install -y gpsd-clients python-gi-cairo
sudo python2 -m pip install pandas
sudo apt-get install -y dsniff
sudo python2 -m pip install seaborn 
source ~/.bashrc
""",True,'Minimum Install'))

# fissure Command 
programs_ubuntu18_04_5.append(('fissure Command (20.5 kB)',
"""mkdir -p ~/.local/bin  # Open a new terminal to use fissure command
if grep -Fq "~/.local/bin" ~/.bashrc
then
  echo "~/.local/bin is already in ~/.bashrc"
else
  printf "\\n%s\\n" "export PATH=~/.local/bin:$PATH" >> ~/.bashrc
fi
/bin/echo -e "python2 """ + fissure_directory + """/dashboard.py" > ~/.local/bin/fissure
sudo chmod +x ~/.local/bin/fissure
echo "[Desktop Entry]\\nStartupWMClass=dashboard.py\\nName=FISSURE\\nTerminal=false\\nType=Application\\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=/home/$USER/.local/bin/fissure" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/docs/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
source ~/.bashrc
########## Verify ##########
ls ~/.local/bin/fissure
""",True,'Minimum Install'))

# GNU Radio
programs_ubuntu18_04_5.append(('GNU Radio (858.3 MB)',
"""sudo add-apt-repository -y ppa:mormj/gnuradio-releases-3.7
sudo apt-get update
sudo apt-get install -y gnuradio=3.7.13.5~gnuradio~bionic-4
sudo apt-get install -y python-qwt5-qt4  # Needed for Filter Design Tool
sudo rm -f /usr/share/mime/packages/gnuradio.xml
sudo ln -s /usr/share/gnuradio/grc/freedesktop/gnuradio-grc.xml /usr/share/mime/packages/gnuradio.xml
sudo update-mime-database -V /usr/share/mime/

# Configure GNU Radio
(gnuradio-companion &) && sleep 5 && killall gnuradio-companion
/bin/echo -e "[grc]\nlocal_blocks_path=""" + fissure_directory + """/Custom_Blocks\nxterm_executable=/usr/bin/gnome-terminal" > ~/.gnuradio/config.conf
sudo cp /usr/lib/uhd/utils/uhd-usrp.rules /etc/udev/rules.d/  # For B205 mini
sudo udevadm control --reload-rules
sudo udevadm trigger
sudo mkdir /usr/share/uhd
sudo chmod -R 777 /usr/share/uhd
uhd_images_downloader

sudo apt-get install -y libzmq3-dev
sudo apt-get install -y swig
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig
########## Verify ##########
gnuradio-companion --help
""",True,'Minimum Install'))

# Scapy
programs_ubuntu18_04_5.append(('Scapy (38.0 MB)',
"""sudo python2 -m pip install scapy
sudo python3 -m pip install scapy
sudo python2 -m pip install -U cryptography
########## Verify ##########
python2 -c "import scapy" && python3 -c "import scapy"
""",True,'Minimum Install'))

# Wireshark
programs_ubuntu18_04_5.append(('Wireshark (49.3 MB)',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,'Minimum Install'))

# LimeSDR
programs_ubuntu18_04_5.append(('LimeSDR (175.3 MB)',
"""sudo add-apt-repository -y ppa:myriadrf/drivers
sudo apt-get update
sudo apt-get install -y limesuite liblimesuite-dev limesuite-udev limesuite-images
sudo apt-get install -y soapysdr-tools soapysdr-module-lms7
sudo apt-get install -y libboost-all-dev swig
########## Verify ##########
ls /usr/bin/LimeSuiteGUI
""",True,'Hardware'))

# HackRF, RTL-SDR, gr-osmosdr
programs_ubuntu18_04_5.append(('HackRF, RTL-SDR, gr-osmosdr',
"""sudo apt-get install -y libusb-1.0-0-dev git cmake pkg-config

# HackRF
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/
wget https://github.com/greatscottgadgets/hackrf/releases/download/v2022.09.1/hackrf-2022.09.1.zip
unzip hackrf-2022.09.1.zip
rm hackrf-2022.09.1.zip
mkdir ~/Installed_by_FISSURE/hackrf-2022.09.1/host/build
cd ~/Installed_by_FISSURE/hackrf-2022.09.1/host/build
cmake ..
make
sudo make install
sudo ldconfig
sudo cp """ + fissure_directory + """/Tools/53-hackrf.rules /etc/udev/rules.d/53-hackrf.rules
sudo udevadm trigger --action=change

# RTL-SDR
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/rtl-sdr.git
cd rtl-sdr
mkdir build
cd build
cmake ../ -DINSTALL_UDEV_RULES=ON
make
sudo make install
sudo cp ../rtl-sdr.rules /etc/udev/rules.d/
sudo ldconfig
sudo rmmod dvb_usb_rtl28xxu
echo 'blacklist dvb_usb_rtl28xxu' | sudo tee --append /etc/modprobe.d/blacklist-dvb_usb_rtl28xxu.conf

# gr-osmosdr
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/gr-osmosdr.git
cd gr-osmosdr
git checkout gr3.7
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/bin/osmocom_fft
""",True,'Hardware'))

# BladeRF
programs_ubuntu18_04_5.append(('BladeRF (621.1 MB)',
"""sudo apt-get install -y libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 libtecla1-dev pkg-config git wget  # bladeRF 2.0 requires gr-osmosdr from source		
#sudo apt-get install -y bladerf  # 2016 - probe doesn't work for bladeRF 2.0 micro
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Nuand/bladeRF.git
cd bladeRF
cd host
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DINSTALL_UDEV_RULES=ON ../
make
sudo make install
sudo ldconfig
sudo apt-get install -y bladerf-fpga-hostedx115  # A4, A5, A9 does not exist
sudo apt-get install -y bladerf-fpga-hostedx40   # A4, A5, A9 does not exist
sudo mkdir -p /usr/share/Nuand/bladeRF
sudo wget https://www.nuand.com/fpga/hostedxA4-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA4.rbf
sudo wget https://www.nuand.com/fpga/hostedxA5-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA5.rbf
sudo wget https://www.nuand.com/fpga/hostedxA9-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA9.rbf
#sudo wget https://www.nuand.com/fpga/hostedx40-latest.rbf -O /usr/share/Nuand/bladeRF/hostedx40.rbf  
#sudo wget https://www.nuand.com/fpga/hostedx115-latest.rbf -O /usr/share/Nuand/bladeRF/hostedx115.rbf  # Causes compatibility errors
########## Verify ##########
bladeRF-cli --help
""",True,'Hardware'))

# USRP X300 Series
programs_ubuntu18_04_5.append(('USRP X300 Series (9.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE  # Set MTU to 9000 and run uhd_image_loader command
cd ~/Installed_by_FISSURE
wget https://codeload.github.com/EttusResearch/uhd/zip/release_003_010_003_000 -O uhd.zip
unzip uhd.zip
cd uhd-release_003_010_003_000/host/include
sudo cp -Rv uhd/rfnoc /usr/share/uhd/
rm -Rf ~/Installed_by_FISSURE/uhd-release_003_010_003_000
""",True,'Hardware'))

# 8812au Driver
programs_ubuntu18_04_5.append(('8812au Driver (31.1 MB)',
"""mkdir -p ~/Installed_by_FISSURE
gzip -dc """ + fissure_directory + """/Tools/rtl8812au.tar.gz | tar -zxf - -C ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/rtl8812au
make
sudo make install
sudo modprobe 8812au
# This method below breaks < 20.04 on reboot
#sudo apt-get install -y dkms
#mkdir -p ~/Installed_by_FISSURE
#cd ~/Installed_by_FISSURE
#git clone https://github.com/aircrack-ng/rtl8812au -b v5.3.4
#cd rtl8812au/
#sudo ./dkms-install.sh
""",True,'Hardware'))

# Zigbee Sniffer
programs_ubuntu18_04_5.append(('Zigbee Sniffer (90.1 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/OpenSniffer-0.1/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/OpenSniffer-0.1/
sudo python3 setup.py install
""",True,'Hardware'))

# fl2k
programs_ubuntu18_04_5.append(('fl2k (16.8 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_ubuntu18_04_5.append(('Proxmark3 (1.3 GB)',
"""sudo apt-get install -y p7zip git build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev libqt4-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libpcsclite-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# PlutoSDR
programs_ubuntu18_04_5.append(('PlutoSDR (12.2 MB)',
"""sudo apt-get install -y gr-iio
#sudo apt-get install -y libglib2.0-dev libgtk2.0-dev libgtkdatabox-dev libmatio-dev libfftw3-dev libxml2 libxml2-dev bison flex libavahi-common-dev libavahi-client-dev libjansson-dev cmake libaio-dev libserialport-dev libcdk5-dev libusb-1.0-0-dev doxygen graphviz libgmp-dev swig liborc-dev  # libcurl4-openssl-dev, git  (not available)
#cd ~/Installed_by_FISSURE
#git clone https://github.com/pcercuei/libini.git
#cd libini
#mkdir build && cd build && cmake ../ && make && sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/libiio.git
#cd libiio
#mkdir build && cd build && cmake ../ && make && sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/libad9361-iio.git
#cd libad9361-iio
#cmake ./
#make
#sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/iio-oscilloscope.git  # IIO oscilloscope is optional
#cd iio-oscilloscope
#git checkout origin/master
#mkdir build && cd build
#cmake ../ && make
#sudo make install
#cd ~/Installed_by_FISSURE  # Did not work
#git clone https://github.com/analogdevicesinc/gr-iio.git
#cd gr-iio
#cmake .
#make
#sudo make install
#cd ..
#sudo ldconfig
########## Verify ##########
python2 -c "from gnuradio import iio"
""",True,'Hardware'))

# gr-acars
programs_ubuntu18_04_5.append(('gr-acars (2.9 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-acars/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/acars
""",True,'Out-of-Tree Modules'))

# gr-adsb
programs_ubuntu18_04_5.append(('gr-adsb (528.3 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-adsb/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-adsb/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/adsb
""",True,'Out-of-Tree Modules'))

# gr-ainfosec
programs_ubuntu18_04_5.append(('gr-ainfosec (3.2 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ainfosec/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/ainfosec
""",True,'Minimum Install'))

# gr-ais
programs_ubuntu18_04_5.append(('gr-ais (5.1 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ais/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/ais
""",True,'Out-of-Tree Modules'))

# gr-bluetooth
programs_ubuntu18_04_5.append(('gr-bluetooth (10.6 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-bluetooth/)" ]; 
then
  mkdir -p ~/Installed_by_FISSURE
  cd ~/Installed_by_FISSURE
  rm -Rf libbtbb
  git clone https://github.com/greatscottgadgets/libbtbb -b master
  cd libbtbb
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-bluetooth/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/bin/btrx
""",True,'Out-of-Tree Modules'))

# gr-clapper_plus
programs_ubuntu18_04_5.append(('gr-clapper_plus (704.5 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-clapper_plus/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-clapper_plus/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/clapper_plus
""",True,'Out-of-Tree Modules'))

# gr-dect2
programs_ubuntu18_04_5.append(('gr-dect2 (4.5 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-dect2/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/dect2
""",True,'Out-of-Tree Modules'))

# gr-foo
programs_ubuntu18_04_5.append(('gr-foo (9.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-foo/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-foo/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/foo
""",True,'Out-of-Tree Modules'))

# gr-fuzzer
programs_ubuntu18_04_5.append(('gr-fuzzer (3.1 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-fuzzer/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/fuzzer
""",True,'Out-of-Tree Modules'))

# gr-garage_door
programs_ubuntu18_04_5.append(('gr-garage_door (733.2 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-garage_door/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-garage_door/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/garage_door
""",True,'Out-of-Tree Modules'))

# gr-gsm-master
programs_ubuntu18_04_5.append(('gr-gsm-master (42.3 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-gsm-master/
sudo rm -Rf build
#sudo apt-get install -y gr-osmosdr  # Installing from source
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# gr-gsm needs to be made twice for "import arfcn" block to work
make 
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/grgsm
""",True,'Out-of-Tree Modules'))

# gr-ieee802-11
programs_ubuntu18_04_5.append(('gr-ieee802-11 (14.4 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/examples/wifi_phy_hier.grc
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/ieee802_11
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4
programs_ubuntu18_04_5.append(('gr-ieee802-15-4 (23.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/examples/ieee802_15_4_CSS_PHY.grc
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/examples/ieee802_15_4_OQPSK_PHY.grc
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/ieee802_15_4
""",True,'Out-of-Tree Modules'))

# gr-iridium-maint-3.7
programs_ubuntu18_04_5.append(('gr-iridium-maint-3.7 (8.5 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-iridium-maint-3.7/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/iridium
""",True,'Out-of-Tree Modules'))

# gr-j2497
programs_ubuntu18_04_5.append(('gr-j2497 (909.3 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-j2497/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-j2497/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/J2497
""",True,'Out-of-Tree Modules'))

# gr-limesdr
programs_ubuntu18_04_5.append(('gr-limesdr (4.3 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-limesdr/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-limesdr/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/limesdr
""",True,'Out-of-Tree Modules'))

# gr-mixalot
programs_ubuntu18_04_5.append(('gr-mixalot (10.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-mixalot/)" ]; 
then
  sudo apt-get install -y libitpp-dev
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-mixalot/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/mixalot
""",True,'Out-of-Tree Modules'))

# gr-nrsc5
programs_ubuntu18_04_5.append(('gr-nrsc5 (39.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-nrsc5/)" ]; 
then
  sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev liborc-0.4-dev
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-nrsc5/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/nrsc5
""",True,'Out-of-Tree Modules'))

# gr-paint
programs_ubuntu18_04_5.append(('gr-paint (3.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/
  gcc tgatoluma.c -o tgatoluma
  chmod +x tgatoluma
  cp tgatoluma ~/.local/bin/
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/paint
""",True,'Out-of-Tree Modules'))

# gr-rds
programs_ubuntu18_04_5.append(('gr-rds (5.9 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-rds/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-rds/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/rds
""",True,'Out-of-Tree Modules'))

# gr-tpms
programs_ubuntu18_04_5.append(('gr-tpms (5.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/tpms
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore
programs_ubuntu18_04_5.append(('gr-tpms_poore (786.4 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms_poore/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms_poore/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/tpms_poore
""",True,'Out-of-Tree Modules'))

# gr-X10
programs_ubuntu18_04_5.append(('gr-X10 (798.7 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-X10/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-X10/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/X10
""",True,'Out-of-Tree Modules'))

# gr-Zwave
programs_ubuntu18_04_5.append(('gr-Zwave (4.4 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-Zwave/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python2 -c "import Zwave"
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore
programs_ubuntu18_04_5.append(('gr-zwave_poore (786.4 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-zwave_poore/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-zwave_poore/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/zwave_poore
""",True,'Out-of-Tree Modules'))

# QSpectrumAnalyzer
programs_ubuntu18_04_5.append(('QSpectrumAnalyzer (181.1 MB)',
"""#sudo add-apt-repository -y ppa:myriadrf/drivers
#sudo apt-get -y update
sudo apt-get install -y python3-pip python3-pyqt5 python3-numpy python3-scipy soapysdr python3-soapysdr
sudo apt-get install -y soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7
python3 -m pip install --user qspectrumanalyzer
PATH=$PATH:~/.local/bin
export PATH
. ~/.bashrc
sudo cp ~/.local/bin/qspectrumanalyzer /usr/local/bin/
########## Verify ##########
ls ~/.local/bin/qspectrumanalyzer
""",True,'SDR'))

# GQRX
programs_ubuntu18_04_5.append(('GQRX (18.7 MB)',
"""sudo apt-get install -y gqrx-sdr
########## Verify ##########
ls /usr/bin/gqrx
""",True,'SDR'))

# Dump1090
programs_ubuntu18_04_5.append(('Dump1090 (3.1 MB)',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,'Aircraft'))

# QtDesigner
programs_ubuntu18_04_5.append(('QtDesigner (2.6 MB)',
"""sudo apt-get install -y python-qt4 qt4-designer
########## Verify ##########
ls /usr/bin/designer
""",True,'Development'))

# Grip
programs_ubuntu18_04_5.append(('Grip (15.2 MB)',
"""python2 -m pip install grip
########## Verify ##########
ls ~/.local/bin/grip
""",True,'Development'))

# Kismet
programs_ubuntu18_04_5.append(('Kismet (6.0 MB)',
"""sudo apt-get install -y kismet
########## Verify ##########
ls /usr/bin/kismet
""",True,'802.11'))

# UDP Replay
programs_ubuntu18_04_5.append(('UDP Replay (725.0 kB)',
"""sudo apt-get install -y libpcap-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/rigtorp/udpreplay.git
cd ~/Installed_by_FISSURE/udpreplay
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls /usr/local/bin/udpreplay
""",True,'802.11'))

# V2Verifier
programs_ubuntu18_04_5.append(('V2Verifier (7.5 MB)',
"""sudo apt-get install -y libgmp3-dev python3-tk python3-pil.imagetk
python3 -m pip install fastecdsa
python3 -m pip install -U pyyaml
#sudo apt install -y git cmake libuhd-dev uhd-host swig libgmp3-dev python3-pip python3-tk python3-pil 
#python3-pil.imagetk gnuradio
#Needs gr-foo and gr-ieee802-11
""",True,'V2V'))

# OpenBTS
programs_ubuntu18_04_5.append(('OpenBTS (1.4 GB)',
"""sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get update
sudo apt-get install -y git
sudo apt-get install -y asterisk
sudo apt-get install -y twinkle
sudo apt-get install -y autoconf libtool libosip2-dev libortp-dev libusb-1.0-0-dev g++ sqlite3 libsqlite3-dev erlang libreadline6-dev libncurses5-dev
mkdir -p ~/Installed_by_FISSURE/OpenBTS
cd ~/Installed_by_FISSURE/OpenBTS
git clone https://github.com/RangeNetworks/dev.git
cd dev
./clone.sh
./switchto.sh master
cd liba53/
sudo make install
cd ..
git clone https://github.com/tom-2015/fakecoredumper.git
cd fakecoredumper
chmod +x install.sh
./install.sh
cd ..
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/build.sh ./build.sh
sudo apt install g++-5 -y
sudo update-alternatives --remove-all gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 
sudo chmod +x build.sh
./build.sh B210
sudo mkdir /etc/OpenBTS
cd openbts
sudo sqlite3 -init ./apps/OpenBTS.example.sql /etc/OpenBTS/OpenBTS.db ".quit"
#sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/usrp_b210_fpga.bin /usr/share/uhd/images/usrp_b210_fpga.bin
cd apps
ln -s ../Transceiver52M/transceiver .
sudo apt-get install -y sqlitebrowser
sudo mkdir -p /var/lib/asterisk/sqlite3dir
cd ../../subscriberRegistry
make
cd apps
cp """ + fissure_directory + """/Tools/openbts_files_18_04/sipauthserve.example.sql sipauthserve.example.sql
sudo sqlite3 -init sipauthserve.example.sql /etc/OpenBTS/sipauthserve.db ".quit"
cd ../../smqueue
autoconf -i
./configure
make
cp """ + fissure_directory + """/Tools/openbts_files_18_04/smqueue.example.sql smqueue/smqueue.example.sql
sudo sqlite3 -init smqueue/smqueue.example.sql /etc/OpenBTS/smqueue.db ".quit"
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/sip.conf /etc/asterisk/sip.conf
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/extensions.conf /etc/asterisk/extensions.conf
sudo apt-get install -y pcscd pcsc-tools libccid libpcsclite-dev
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/pysim
cd pysim
sudo apt-get install -y python3-pip swig
sudo python3 -m pip install -r requirements.txt
sudo update-alternatives --remove-all gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
sudo uhd_images_downloader
""",True,'GSM'))

# srsRAN/srsLTE
programs_ubuntu18_04_5.append(('srsRAN (837.2 MB)',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,'LTE'))

# FALCON
programs_ubuntu18_04_5.append(('FALCON (677.5 MB)',
"""sudo apt-get install -y build-essential git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev  # For srsLTE
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y libglib2.0-dev libudev-dev libcurl4-gnutls-dev libboost-all-dev qtdeclarative5-dev libqt5charts5-dev  # FALCON
git clone https://github.com/falkenber9/falcon.git
cd falcon
mkdir build
cd build
cmake -DFORCE_SUBPROJECT_SRSLTE=ON -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
#sudo xargs rm < install_manifest.txt  # uninstall
#make clean
########## Verify ##########
ls /usr/bin/FalconGUI
""",True,'LTE'))

# LTE-ciphercheck
programs_ubuntu18_04_5.append(('LTE-ciphercheck (151.9 MB)',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp ../srsue/ciphercheck.conf.example ../srsue/ciphercheck.conf
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf
""",True,'LTE'))

# Aircrack-ng
programs_ubuntu18_04_5.append(('Aircrack-ng (19.1 MB)',
"""sudo apt-get install -y aircrack-ng
########## Verify ##########
aircrack-ng --help
""",True,'802.11'))

# Geany
programs_ubuntu18_04_5.append(('Geany (14.2 MB)',
"""sudo apt-get install -y geany
########## Verify ##########
geany --help
""",True,'Development'))

# Arduino IDE
programs_ubuntu18_04_5.append(('Arduino IDE (630.2 MB)',
"""wget -P ~/Installed_by_FISSURE/ https://downloads.arduino.cc/arduino-1.8.15-linux64.tar.xz
cd ~/Installed_by_FISSURE
tar -xf arduino-1.8.15-linux64.tar.xz
rm arduino-1.8.15-linux64.tar.xz
cd arduino-1.8.15/
sudo ./install.sh
cp -R """ + fissure_directory + """/Tools/Esp8266_listen_trigger/ ~/Installed_by_FISSURE/
########## Verify ##########
arduino --version
""",True,'Development'))

# Minicom
programs_ubuntu18_04_5.append(('Minicom (1.6 MB)',
"""sudo apt-get install -y minicom
########## Verify ##########
ls /usr/bin/minicom
""",True,'Hardware'))

# PuTTY
programs_ubuntu18_04_5.append(('PuTTY (4.2 MB)',
"""sudo apt-get install -y putty
########## Verify ##########
putty --help
""",True,'Hardware'))

# openHAB
programs_ubuntu18_04_5.append(('openHAB (223.6 MB)',
"""wget -qO - 'https://openhab.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
sudo apt-get install -y apt-transport-https
echo 'deb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list
sudo apt-get update
sudo apt-get install -y openhab
########## Verify ##########
ls /usr/bin/openhab-cli
""",True,'Z-Wave'))

# rtl-zwave
programs_ubuntu18_04_5.append(('rtl-zwave (102.4 kB)',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y libpcap-dev
cp -R """ + fissure_directory + """/Tools/rtl-zwave-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/rtl-zwave-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/rtl-zwave-master/rtl_zwave
""",True,'Z-Wave'))

# waving-z
programs_ubuntu18_04_5.append(('waving-z (2.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/
git clone https://github.com/baol/waving-z.git
cd ~/Installed_by_FISSURE/waving-z
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build .
########## Verify ##########
ls ~/Installed_by_FISSURE/waving-z/build/wave-in
""",True,'Z-Wave'))

# baudline
programs_ubuntu18_04_5.append(('baudline (4.9 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://www.baudline.com/baudline_1.08_linux_x86_64.tar.gz
tar -xf baudline_1.08_linux_x86_64.tar.gz
rm baudline_1.08_linux_x86_64.tar.gz
########## Verify ##########
~/Installed_by_FISSURE/baudline_1.08_linux_x86_64/baudline --help
""",True,'SDR'))

# Universal Radio Hacker
programs_ubuntu18_04_5.append(('Universal Radio Hacker (35.9 MB)',
"""sudo python3 -m pip install cython
sudo python3 -m pip install urh
########## Verify ##########
urh --version
""",False,'SDR'))

# Inspectrum
programs_ubuntu18_04_5.append(('Inspectrum (1.5 MB)',
"""sudo apt-get install -y inspectrum
########## Verify ##########
inspectrum --help
""",True,'SDR'))

# OpenCPN
programs_ubuntu18_04_5.append(('OpenCPN (121.7 MB)',
"""sudo add-apt-repository -y ppa:opencpn/opencpn
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C865EB40
sudo apt-get update
sudo apt-get install -y opencpn
########## Verify ##########
ls /usr/bin/opencpn
""",False,'AIS'))

# Kalibrate
programs_ubuntu18_04_5.append(('Kalibrate (1.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/steve-m/kalibrate-rtl.git
cd kalibrate-rtl
./bootstrap && CXXFLAGS='-W -Wall -O3' ./configure && make
########## Verify ##########
ls ~/Installed_by_FISSURE/kalibrate-rtl/src/kal
""",True,'GSM'))

# retrogram-rtlsdr
programs_ubuntu18_04_5.append(('retrogram-rtlsdr (1.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y librtlsdr-dev libncurses5-dev libboost-program-options-dev
cp -R """ + fissure_directory + """/Tools/retrogram-rtlsdr-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/retrogram-rtlsdr-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/retrogram-rtlsdr-master/retrogram-rtlsdr
""",True,'SDR'))

# RTLSDR-Airband
programs_ubuntu18_04_5.append(('RTLSDR-Airband (9.7 MB)',
"""sudo apt-get install -y build-essential cmake pkg-config libmp3lame-dev libshout3-dev libconfig++-dev libfftw3-dev libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/szpajder/RTLSDR-Airband.git
cd RTLSDR-Airband
mkdir build
cd build
cmake ../
make
sudo make install
########## Verify ##########
rtl_airband -h
""",True,'SDR'))

# Spektrum
programs_ubuntu18_04_5.append(('Spektrum (241.9 MB)',
"""echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/rtl-sdr.conf  # Restart computer to use RTL device
echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", GROUP="adm", MODE="0666"' | sudo tee /etc/udev/rules.d/20.rtlsdr.rules
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/pavels/spektrum/releases/download/2.1.0/spektrum-linux64.tar.gz
cd ~/Installed_by_FISSURE
tar -xf spektrum-linux64.tar.gz
rm spektrum-linux64.tar.gz
########## Verify ##########
ls ~/Installed_by_FISSURE/spektrum/spektrum
""",True,'SDR'))

# SDRTrunk
programs_ubuntu18_04_5.append(('SDRTrunk (106.9 MB)',
"""#sudo apt-get -yq install gnupg curl  # Java (if needed)
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
#cd ~/Downloads
#curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
#sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
#sudo apt-get update
#sudo apt-get install -y zulu11-jdk
#rm zulu-repo_1.0.0-2_all.deb
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/DSheirer/sdrtrunk/releases/download/v0.5.0-alpha.6/sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
cd ~/Installed_by_FISSURE
unzip -q sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
rm sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
########## Verify ##########
ls ~/Installed_by_FISSURE/sdr-trunk-linux-x86_64-v0.5.0-alpha6/bin/sdr-trunk
""",True,'Trunked Radio'))

# Audacity
programs_ubuntu18_04_5.append(('Audacity (110.1 MB)',
"""sudo apt-get install -y audacity
########## Verify ##########
audacity --version
""",True,'Audio'))

# Sound eXchange
programs_ubuntu18_04_5.append(('Sound eXchange (2.1 MB)',
"""sudo apt-get install -y sox
########## Verify ##########
sox --version
""",True,'Audio'))

# LAME
programs_ubuntu18_04_5.append(('LAME (180.2 kB)',
"""sudo apt-get install -y lame
########## Verify ##########
lame --version
""",True,'Audio'))

# mpv
programs_ubuntu18_04_5.append(('mpv (146.5 MB)',
"""sudo apt-get install -y mpv
########## Verify ##########
mpv --version
""",True,'Audio'))

# FFmpeg
programs_ubuntu18_04_5.append(('FFmpeg',
"""sudo apt-get install -y ffmpeg 
########## Verify ##########
ffmpeg --help
""",True,'Audio'))

# MPlayer
programs_ubuntu18_04_5.append(('MPlayer (14.5 MB)',
"""sudo apt-get install -y mplayer
########## Verify ##########
ls /usr/bin/mplayer
""",True,'Audio'))

# VLC
programs_ubuntu18_04_5.append(('VLC (343.3 MB)',
"""sudo apt-get install -y snapd
sudo snap install vlc
########## Verify ##########
vlc --help
""",True,'Video'))

# Simple Screen Recorder
programs_ubuntu18_04_5.append(('Simple Screen Recorder (4.5 MB)',
"""sudo apt-get install -y simplescreenrecorder
########## Verify ##########
simplescreenrecorder --help
""",True,'Video'))

# radiosonde_auto_rx
programs_ubuntu18_04_5.append(('radiosonde_auto_rx (55.4 MB)',
"""sudo apt-get install -y python3 python3-numpy python3-setuptools python3-crcmod python3-requests python3-dateutil python3-pip python3-flask sox git build-essential libtool cmake usbutils libusb-1.0-0-dev rng-tools libsamplerate-dev libatlas3-base libgfortran5
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/projecthorus/radiosonde_auto_rx.git
cd radiosonde_auto_rx/auto_rx
./build.sh
cp station.cfg.example station.cfg
sudo python3 -m pip install -r requirements.txt
########## Verify ##########
ls ~/Installed_by_FISSURE/radiosonde_auto_rx/auto_rx/auto_rx.py
""",True,'Radiosonde'))

# SdrGlut
programs_ubuntu18_04_5.append(('SdrGlut (305.0 MB)',
"""sudo apt-get install -y librtaudio-dev libsoapysdr0.6 libsoapysdr-dev libopenal-dev libliquid-dev freeglut3 freeglut3-dev libalut0 libalut-dev libsndfile1-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/righthalfplane/SdrGlut.git
cp -f """ + fissure_directory + """/Tools/SdrGlut/firstFile.h ~/Installed_by_FISSURE/SdrGlut/MainSource/
cd SdrGlut
make -f makefileUbunta
########## Verify ##########
ls ~/Installed_by_FISSURE/SdrGlut/sdrglut.x
""",True,'SDR'))

# rehex
programs_ubuntu18_04_5.append(('rehex (550.1 MB)',
"""sudo apt-get install -y build-essential git libwxgtk3.0-dev libjansson-dev libcapstone-dev liblua5.3-dev lua5.3 lua5.2 libunistring-dev gtk2.0 libgtk2.0-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/solemnwarning/rehex.git
cd rehex
sudo cpan Template
sudo make install
########## Verify ##########
ls /usr/local/bin/rehex 
""",True,'Data'))

# ZEPASSD
programs_ubuntu18_04_5.append(('ZEPASSD (9.2 MB)',
"""#sudo apt-get install -y # boost.program-options, boost.crc, boost.circular-buffer, libfftw3, libuhd 3.9.5 or later
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/pvachon/zepassd.git
cd zepassd
make
########## Verify ##########
ls ~/Installed_by_FISSURE/zepassd/zepassd
""",True,'RFID'))

# iridium-toolkit
programs_ubuntu18_04_5.append(('iridium-toolkit (3.1 MB)',
"""#Python (2.7), NumPy (scipy), crcmod
sudo apt-get install -y mplayer
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/muccc/iridium-toolkit.git
git clone git://git.osmocom.org/osmo-ir77
cd osmo-ir77/codec/
sudo make
cp ir77_ambe_decode ~/Installed_by_FISSURE/iridium-toolkit/
########## Verify ##########
ls ~/Installed_by_FISSURE/osmo-ir77/codec/ir77_ambe_decode
""",True,'Satellite'))

# IridiumLive
programs_ubuntu18_04_5.append(('IridiumLive (97.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/microp11/iridiumlive.git
wget -P ~/Installed_by_FISSURE/ https://github.com/microp11/iridiumlive/releases/download/v1.2/linux-x64.zip
unzip -q linux-x64.zip
rm linux-x64.zip
cd linux-x64
sudo chmod +x IridiumLive
########## Verify ##########
ls ~/Installed_by_FISSURE/linux-x64/IridiumLive
""",True,'Satellite'))

# NETATTACK2
programs_ubuntu18_04_5.append(('NETATTACK2 (37.7 MB)',
"""sudo python2 -m pip install netifaces
sudo apt-get install -y python-scapy python-nmap python-nfqueue nmap
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/chrizator/netattack2.git
""",True,'802.11'))

# Wifite
programs_ubuntu18_04_5.append(('Wifite (549.0 MB)',
"""# python, iwconfig, ifconfig, Aircrack-ng, tshark, reaver, bully, coWPAtty, pyrit, hashcat, hcxdumptool, hcxpcaptool
sudo apt-get install -y build-essential libpcap-dev aircrack-ng pixiewps libssl-dev hashcat libcurl4-openssl-dev pkg-config macchanger
sudo python2 -m pip install psycopg2-binary scapy
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/derv82/wifite2.git
git clone https://github.com/t6x/reaver-wps-fork-t6x
cd reaver-wps-fork-t6x/src
./configure
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/aanarchyy/bully
cd bully/src
make
sudo make install
cd ~/Installed_by_FISSURE
wget http://www.willhackforsushi.com/code/cowpatty/4.6/cowpatty-4.6.tgz
tar zxfv cowpatty-4.6.tgz
rm cowpatty-4.6.tgz
cd cowpatty-4.6
make
sudo cp cowpatty /usr/bin
cd ~/Installed_by_FISSURE
mkdir Pyrit-v0.5.0
cd Pyrit-v0.5.0
wget https://github.com/JPaulMora/Pyrit/releases/download/v0.5.0/Pyrit-v0.5.0.zip
unzip -q Pyrit-v0.5.0.zip
rm Pyrit-v0.5.0.zip
python2 setup.py clean
python2 setup.py build
sudo python2 setup.py install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxdumptool.git
cd hcxdumptool
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxtools.git
cd hcxtools
make
sudo make install
sudo ln -s /usr/bin/hcxpcapngtool /usr/bin/hcxpcaptool
########## Verify ##########
~/Installed_by_FISSURE/wifite2/Wifite.py --help
""",True,'802.11'))

# rtl_433
programs_ubuntu18_04_5.append(('rtl_433 (23.0 MB)',
"""sudo apt-get install -y libtool libusb-1.0-0-dev librtlsdr-dev rtl-sdr build-essential cmake pkg-config
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/merbanan/rtl_433/archive/refs/tags/22.11.zip
unzip 22.11.zip
rm 22.11.zip
mv rtl_433-22.11/ rtl_433/
#git clone https://github.com/merbanan/rtl_433.git
cd rtl_433/
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
rtl_433 -help
""",True,'433 MHz'))

# RouterSploit
programs_ubuntu18_04_5.append(('RouterSploit (516.2 MB)',
"""#sudo add-apt-repository universe
sudo apt-get install -y python3-pip libglib2.0-dev rustc
sudo python3 -m pip install setuptools-rust
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/threat9/routersploit
cd routersploit
python3 -m pip install setuptools
sed -i 's/paramiko/#paramiko/g' requirements.txt
python3 -m pip install -r requirements.txt
python3 -m pip install bluepy
########## Verify ##########
~/Installed_by_FISSURE/routersploit/rsf.py --help
""",True,'802.11'))

# Metasploit
programs_ubuntu18_04_5.append(('Metasploit (1.1 GB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
mkdir metasploit
cd metasploit
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
########## Verify ##########
ls /usr/bin/msfconsole
""",True,'802.11'))

# monitor_rtl433
programs_ubuntu18_04_5.append(('monitor_rtl433 (33.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mcbridejc/monitor_rtl433.git
cd monitor_rtl433
sudo python3 setup.py install
########## Verify ##########
ls /usr/local/bin/monitor_rtl433
""",True,'433 MHz'))

# scan-ssid
programs_ubuntu18_04_5.append(('scan-ssid (229.4 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y iw
git clone https://github.com/Resethel/scan-ssid.git
cd scan-ssid
sudo cp scan-ssid /usr/local/bin
sudo chmod 755 /usr/local/bin/scan-ssid
########## Verify ##########
scan-ssid --help
""",True,'802.11'))

# minimodem
programs_ubuntu18_04_5.append(('minimodem (106.5 kB)',
"""sudo apt-get install -y minimodem
########## Verify ##########
minimodem --version
""",True,'Audio'))

# WSJT-X
programs_ubuntu18_04_5.append(('WSJT-X (4.1 MB)',
"""sudo apt-get install -y wsjtx
########## Verify ##########
ls /usr/bin/wsjtx
""",True,'Ham Radio'))

# Google Earth Pro
programs_ubuntu18_04_5.append(('Google Earth Pro (314.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
sudo dpkg -i google-earth-pro-stable_current_amd64.deb
########## Verify ##########
ls /usr/bin/google-earth-pro
""",True,'Mapping'))

# gr-air-modes
programs_ubuntu18_04_5.append(('gr-air-modes (1.4 MB)',
"""sudo apt-get install -y gr-air-modes
########## Verify ##########
modes_rx --help
""",True,'Aircraft'))

# ESP8266 Deauther v2
programs_ubuntu18_04_5.append(('ESP8266 Deauther v2 (6.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/SpacehuhnTech/esp8266_deauther/archive/v2.zip
unzip -q v2.zip
rm v2.zip
""",True,'802.11'))

# Viking
programs_ubuntu18_04_5.append(('Viking (458.1 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.code.sf.net/p/viking/code viking
sudo apt install -y gtk-doc-tools docbook-xsl yelp-tools libpng-dev libgtk-3-dev libicu-dev libjson-glib-dev intltool
sudo apt-get install -y libcurl4-gnutls-dev libglib2.0-dev-bin
sudo apt-get install -y libsqlite3-dev nettle-dev libmapnik-dev libgeoclue-2-dev libgexiv2-dev libgps-dev libmagic-dev libbz2-dev libzip-dev liboauth-dev libnova-dev
cd viking
./autogen.sh
./configure
make
sudo make install
########## Verify ##########
viking --help
""",True,'Mapping'))

# PyGPSClient
programs_ubuntu18_04_5.append(('PyGPSClient (10.7 MB)',
"""sudo apt install -y python3-pip python3-tk python3-pil python3-pil.imagetk libjpeg-dev zlib1g-dev
sudo apt install -y tk-devel
sudo python3 -m pip install --upgrade PyGPSClient
########## Verify ##########
ls /usr/local/bin/pygpsclient
""",True,'GPS'))

# Gpredict
programs_ubuntu18_04_5.append(('Gpredict (12.5 MB)',
"""sudo apt-get install -y gpredict
########## Verify ##########
gpredict --help
""",True,'GPS'))

# FoxtrotGPS
programs_ubuntu18_04_5.append(('FoxtrotGPS (2.3 MB)',
"""sudo apt-get install -y foxtrotgps
########## Verify ##########
foxtrotgps --help
""",True,'GPS'))

# multimon-ng
programs_ubuntu18_04_5.append(('multimon-ng (9.0 MB)',
"""sudo apt-get install -y libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/EliasOenal/multimonNG.git
cd multimonNG
mkdir build
cd build
qmake ../multimon-ng.pro
make
sudo make install
########## Verify ##########
ls /usr/local/bin/multimon-ng
""",True,'POCSAG'))

# Xastir
programs_ubuntu18_04_5.append(('Xastir (120.9 MB)',
"""sudo apt-get install -y xastir
########## Verify ##########
sudo xastir -V
""",True,'Ham Radio'))

# LTE-Cell-Scanner
programs_ubuntu18_04_5.append(('LTE-Cell-Scanner (137.8 MB)',
"""sudo apt-get install -y cmake libncurses5-dev liblapack-dev libblas-dev libboost-thread-dev libboost-system-dev libitpp-dev librtlsdr-dev libfftw3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/JiaoXianjun/LTE-Cell-Scanner.git
cd LTE-Cell-Scanner
mkdir build
cd build
cmake ..
make 
sudo make install
########## Verify ##########
ls /usr/local/bin/CellSearch
""",True,'LTE'))

# btscanner
programs_ubuntu18_04_5.append(('btscanner (921.6 kB)',
"""sudo apt-get install -y btscanner
########## Verify ##########
btscanner --help
""",True,'Bluetooth'))

# hcidump
programs_ubuntu18_04_5.append(('hcidump (602.1 kB)',
"""sudo apt-get install -y bluez-hcidump
########## Verify ##########
hcidump --help
""",True,'Bluetooth'))

# GraphicsMagick
programs_ubuntu18_04_5.append(('GraphicsMagick (4.9 MB)',
"""sudo apt-get install -y graphicsmagick-imagemagick-compat
########## Verify ##########
gm -help
""",True,'SDR'))

# Spectrum Painter
programs_ubuntu18_04_5.append(('Spectrum Painter (10.1 MB)',
"""sudo python3 -m pip install numpy imageio
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/polygon/spectrum_painter.git
#cd spectrum_painter/
#python3 -m pip install --user -e .  # call with "python3 -m spectrum_painter.img2iqstream"
""",True,'SDR'))

# nrsc5 and nrsc5-gui
programs_ubuntu18_04_5.append(('nrsc5 (154.7 MB)',
"""sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev python3-pyaudio
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/theori-io/nrsc5.git
cd nrsc5
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# nrsc5-gui
python3 -m pip install --upgrade Pillow
python3 -m pip install pyaudio
sudo apt-get install -y python-gobject
cd ~/Installed_by_FISSURE
git clone https://github.com/cmnybo/nrsc5-gui.git
########## Verify ##########
nrsc5 -v
""",True,'HD Radio'))

# HAM2MON
programs_ubuntu18_04_5.append(('HAM2MON (1.0 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/madengr/ham2mon.git
########## Verify ##########
~/Installed_by_FISSURE/ham2mon/apps/ham2mon.py --help
""",True,'Ham Radio'))

# Anki
programs_ubuntu18_04_5.append(('Anki (318.2 MB)',
"""sudo apt-get install -y anki
########## Verify ##########
anki -h
""",True,'Ham Radio'))

# Bless
programs_ubuntu18_04_5.append(('Bless (7.7 MB)',
"""sudo apt-get install -y bless
########## Verify ##########
ls /usr/bin/bless
""",True,'Data'))

# trackerjacker
programs_ubuntu18_04_5.append(('trackerjacker (15.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/calebmadrigal/trackerjacker.git
cd trackerjacker
sudo python3 setup.py install
########## Verify ##########
sudo trackerjacker --help
""",False,'802.11'))

# airgeddon
programs_ubuntu18_04_5.append(('airgeddon (212.2 MB)',
"""sudo apt-get install -y crunch mdk3 hostapd lighttpd ruby-dev xterm isc-dhcp-server ettercap-text-only libxcrypt-dev john libnl-3-dev libnl-genl-3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone --depth 1 https://github.com/v1s1t0r1sh3r3/airgeddon.git
#asleap
git clone https://github.com/joswr1ght/asleap
cd asleap
make
sudo cp asleap /usr/bin/
#bettercap
sudo apt-get install -y build-essential libpcap-dev net-tools 
cd ~/Installed_by_FISSURE
mkdir bettercap
cd bettercap
wget https://github.com/bettercap/bettercap/releases/download/v2.31.1/bettercap_linux_amd64_v2.31.1.zip
unzip -q bettercap_linux_amd64_v2.31.1.zip
rm bettercap_linux_amd64_v2.31.1.zip
sudo cp bettercap /usr/bin/
#mdk4
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/mdk4
cd mdk4
make
sudo make install
""",True,'802.11'))

# Hydra
programs_ubuntu18_04_5.append(('Hydra (10.6 MB)',
"""sudo apt-get install -y hydra
########## Verify ##########
ls /usr/bin/hydra
""",True,'SSH'))

# Enscribe
programs_ubuntu18_04_5.append(('Enscribe (98.2 kB)',
"""sudo apt-get install -y enscribe
########## Verify ##########
ls /usr/bin/enscribe
""",True,'Audio'))

# ESP32 Bluetooth Classic Sniffer
programs_ubuntu18_04_5.append(('ESP32 BT Classic Sniffer (400.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE  # Requires Wireshark 3.4 by default, modifying it for 3.6.5
cd ~/Installed_by_FISSURE
git clone https://github.com/Matheus-Garbelini/esp32_bluetooth_classic_sniffer
cd esp32_bluetooth_classic_sniffer
rm ./dissectors/config.h
sed -i 's/Bluetooth Link Manager Protocol/ESP32 Bluetooth Link Manager Protocol/g' ./dissectors/packet-btbrlmp.c
sed -i 's/btlmp/esp32_btlmp/g' ./dissectors/packet-btbrlmp.c
sed -i 's/3.4/3.6/g' ./dissectors/build.sh
sudo ./requirements.sh
./build.sh
sudo cp dissectors/h4bcm.so /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.6/epan/  # Placing it where "sudo Wireshark" dissectors are located
rm ~/.local/lib/wireshark/plugins/3.6/epan/h4bcm.so  # To avoid "plugin 'h4bcm.so' was found in multiple directories" warning
########## Verify ##########
ls /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.6/epan/h4bcm.so
""",True,'Bluetooth'))

# QSSTV
programs_ubuntu18_04_5.append(('QSSTV (3.4 MB)',
"""sudo apt-get install -y qsstv
########## Verify ##########
ls /usr/bin/qsstv
""",True,'Ham Radio'))

# Fldigi
programs_ubuntu18_04_5.append(('Fldigi (11.0 MB)',
"""sudo apt-get install -y fldigi
########## Verify ##########
ls /usr/bin/fldigi
""",True,'Ham Radio'))

# Bootable USB
programs_ubuntu18_04_5.append(('Bootable USB (107.4 MB)',
"""sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 382003C2C8B7B4AB813E915B14E4942973C62A1B
sudo add-apt-repository -y "deb http://ppa.launchpad.net/nemh/systemback/ubuntu xenial main"
sudo apt update
sudo apt install -y systemback
sudo add-apt-repository -y ppa:mkusb/ppa
sudo apt-get update
sudo apt-get install -y mkusb usb-pack-efi mkusb-plug guidus
########## Verify ##########
ls /usr/bin/systemback && ls /usr/bin/guidus
""",True,'Development'))

# Dire Wolf
programs_ubuntu18_04_5.append(('Dire Wolf (204.9 MB)',
"""sudo apt-get -y install git gcc g++ make cmake libasound2-dev libudev-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/wb2osz/direwolf
cd direwolf
git checkout dev
mkdir build
cd build
cmake ..
make -j4
sudo make install
make install-conf
########## Verify ##########
ls /usr/local/bin/direwolf
""",True,'Ham Radio'))

# Meld
programs_ubuntu18_04_5.append(('Meld (4.8 MB)',
"""sudo apt-get -y install meld
########## Verify ##########
ls /usr/bin/meld
""",True,'Data'))

# HamClock
programs_ubuntu18_04_5.append(('HamClock (42.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://www.clearskyinstitute.com/ham/HamClock/ESPHamClock.zip
unzip -q ESPHamClock.zip
rm ESPHamClock.zip
cd ESPHamClock
make install hamclock-1600x960
sudo make install hamclock-1600x960
########## Verify ##########
ls /usr/local/bin/hamclock
""",True,'Ham Radio'))

# ICE9 Bluetooth Sniffer
programs_ubuntu18_04_5.append(('ICE9 Bluetooth Sniffer (4.7 MB)',
"""sudo apt install -y libliquid-dev libbtbb-dev libuhd-dev
sudo apt-get install -y libhackrf-dev libbladerf-dev  # Separating in case there are conflicts with Hardware install
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mikeryan/ice9-bluetooth-sniffer.git
cd ice9-bluetooth-sniffer
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls ~/Installed_by_FISSURE/ice9-bluetooth-sniffer/build/ice9-bluetooth
""",True,'Bluetooth'))

# dump978
programs_ubuntu18_04_5.append(('dump978 (1.6 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mutability/dump978.git
cd dump978
make
########## Verify ##########
ls ~/Installed_by_FISSURE/dump978/dump978
""",True,'Aircraft'))

# htop
programs_ubuntu18_04_5.append(('htop (319.5 kB)',
"""sudo apt-get install -y htop
########## Verify ##########
ls /usr/bin/htop
""",True,'Development'))

# CRC RevEng
programs_ubuntu18_04_5.append(('CRC RevEng (905.2 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -T 20 https://sourceforge.net/projects/reveng/files/3.0.5/reveng-3.0.5.zip/download
unzip download
rm download
cd reveng-3.0.5
make
########## Verify ##########
ls ~/Installed_by_FISSURE/reveng-3.0.5/bin/i386-linux/reveng
""",True,'Data'))

# Gpick
programs_ubuntu18_04_5.append(('Gpick (1.5 MB)',
"""sudo apt-get install -y gpick
########## Verify ##########
ls /usr/bin/gpick
""",True,'Development'))

# GHex
programs_ubuntu18_04_5.append(('GHex',
"""sudo apt-get install -y ghex
########## Verify ##########
ls /usr/bin/ghex
""",True,'Data'))

# Archive Flow Graphs
programs_ubuntu18_04_5.append(('Archive Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Archive\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Fuzzing Flow Graphs
programs_ubuntu18_04_5.append(('Fuzzing Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Fuzzing\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Inspection Flow Graphs
programs_ubuntu18_04_5.append(('Inspection Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Inspection\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# IQ Flow Graphs
programs_ubuntu18_04_5.append(('IQ Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/IQ\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# PD Flow Graphs
programs_ubuntu18_04_5.append(('PD Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/PD\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Single-Stage Flow Graphs
programs_ubuntu18_04_5.append(('Single-Stage Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Single-Stage\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Sniffer Flow Graphs
programs_ubuntu18_04_5.append(('Sniffer Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Sniffer\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Standalone Flow Graphs
programs_ubuntu18_04_5.append(('Standalone Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Standalone\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# TSI Flow Graphs
programs_ubuntu18_04_5.append(('TSI Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/TSI\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# pyais
programs_ubuntu18_04_5.append(('pyais',
"""sudo python3 -m pip install pyais
########## Verify ##########
ls /usr/local/lib/python3*/dist-packages/pyais
""",True,'AIS'))

# HAMRS
programs_ubuntu18_04_5.append(('HAMRS (105.8 MB)',
"""mkdir -p ~/Installed_by_FISSURE/HAMRS
cd ~/Installed_by_FISSURE/HAMRS
wget https://hamrs-releases.s3.us-east-2.amazonaws.com/1.0.6/hamrs-1.0.6-linux-x86_64.AppImage
sudo chmod +x hamrs*
########## Verify ##########
ls ~/Installed_by_FISSURE/HAMRS/hamrs*
""",True,'Ham Radio'))

# Binwalk
programs_ubuntu18_04_5.append(('Binwalk',
"""sudo apt-get install -y python3-binwalk binwalk
########## Verify ##########
ls /usr/bin/binwalk
""",True,'Data'))



########################################################################
############################# Ubuntu 18.04.6 #############################
########################################################################

programs_ubuntu18_04_6 = []

# Misc. Dependencies
programs_ubuntu18_04_6.append(('Misc. Dependencies (676.9 MB)',
"""sudo apt-get -y update
sudo apt-get -y install cmake
sudo apt-get install -y python-setuptools python-dev build-essential
sudo apt install -y python-pip
sudo python2 -m pip install --upgrade setuptools
sudo python2 -m pip install Cheetah
sudo python2 -m pip install --upgrade pip
sudo python2 -m pip install --upgrade virtualenv
# sudo python2 -m pip uninstall matplotlib 
sudo python2 -m pip install matplotlib
sudo python2 -m pip install --upgrade PyYAML --ignore-installed
sudo apt-get install -y python-scipy
sudo apt-get install -y gedit
sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
sudo apt-get install -y git
sudo apt-get install -y libcanberra-gtk-module
sudo apt-get install -y python3-pip
sudo python2 -m pip install bitarray
sudo apt install net-tools
sudo python2 -m pip install crcmod
sudo apt-get install -y python3-pip
sudo python3 -m pip install pyopenssl
sudo python3 -m pip install cryptography
sudo python3 -m pip install pycrypto
sudo apt-get install -y expect
sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python2 -m pip install pypcapfile
sudo python2 -m pip install psutil
sudo python2 -m pip install pyserial
sudo apt-get install -y gpsd-clients python-gi-cairo
sudo python2 -m pip install pandas
sudo apt-get install -y dsniff
sudo python2 -m pip install seaborn 
source ~/.bashrc
""",True,'Minimum Install'))

# fissure Command 
programs_ubuntu18_04_6.append(('fissure Command (20.5 kB)',
"""mkdir -p ~/.local/bin  # Open a new terminal to use fissure command
if grep -Fq "~/.local/bin" ~/.bashrc
then
  echo "~/.local/bin is already in ~/.bashrc"
else
  printf "\\n%s\\n" "export PATH=~/.local/bin:$PATH" >> ~/.bashrc
fi
/bin/echo -e "python2 """ + fissure_directory + """/dashboard.py" > ~/.local/bin/fissure
sudo chmod +x ~/.local/bin/fissure
echo "[Desktop Entry]\\nStartupWMClass=dashboard.py\\nName=FISSURE\\nTerminal=false\\nType=Application\\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=/home/$USER/.local/bin/fissure" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/docs/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
source ~/.bashrc
########## Verify ##########
ls ~/.local/bin/fissure
""",True,'Minimum Install'))

# GNU Radio
programs_ubuntu18_04_6.append(('GNU Radio (858.3 MB)',
"""sudo add-apt-repository -y ppa:gnuradio/gnuradio-releases-3.7
sudo apt-get update
sudo apt-get install -y gnuradio=3.7.13.5~gnuradio~bionic-4
sudo apt-get install -y python-qwt5-qt4  # Needed for Filter Design Tool
sudo rm -f /usr/share/mime/packages/gnuradio.xml
sudo ln -s /usr/share/gnuradio/grc/freedesktop/gnuradio-grc.xml /usr/share/mime/packages/gnuradio.xml
sudo update-mime-database -V /usr/share/mime/

# Configure GNU Radio
(gnuradio-companion &) && sleep 5 && killall gnuradio-companion
/bin/echo -e "[grc]\nlocal_blocks_path=""" + fissure_directory + """/Custom_Blocks\nxterm_executable=/usr/bin/gnome-terminal" > ~/.gnuradio/config.conf
sudo cp /usr/lib/uhd/utils/uhd-usrp.rules /etc/udev/rules.d/  # For B205 mini
sudo udevadm control --reload-rules
sudo udevadm trigger
sudo mkdir /usr/share/uhd
sudo chmod -R 777 /usr/share/uhd
uhd_images_downloader

sudo apt-get install -y libzmq3-dev
sudo apt-get install -y swig
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig
########## Verify ##########
gnuradio-companion --help
""",True,'Minimum Install'))

# Scapy
programs_ubuntu18_04_6.append(('Scapy (38.0 MB)',
"""sudo python2 -m pip install scapy
sudo python3 -m pip install scapy
sudo python2 -m pip install -U cryptography
########## Verify ##########
python2 -c "import scapy" && python3 -c "import scapy"
""",True,'Minimum Install'))

# Wireshark
programs_ubuntu18_04_6.append(('Wireshark (49.3 MB)',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,'Minimum Install'))

# LimeSDR
programs_ubuntu18_04_6.append(('LimeSDR (175.3 MB)',
"""sudo add-apt-repository -y ppa:myriadrf/drivers
sudo apt-get update
sudo apt-get install -y limesuite liblimesuite-dev limesuite-udev limesuite-images
sudo apt-get install -y soapysdr-tools soapysdr-module-lms7
sudo apt-get install -y libboost-all-dev swig
########## Verify ##########
ls /usr/bin/LimeSuiteGUI
""",True,'Hardware'))

# HackRF, RTL-SDR, gr-osmosdr
programs_ubuntu18_04_6.append(('HackRF, RTL-SDR, gr-osmosdr',
"""sudo apt-get install -y libusb-1.0-0-dev git cmake pkg-config

# HackRF
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/greatscottgadgets/hackrf/releases/download/v2022.09.1/hackrf-2022.09.1.zip
unzip hackrf-2022.09.1.zip
rm hackrf-2022.09.1.zip
mkdir ~/Installed_by_FISSURE/hackrf-2022.09.1/host/build
cd ~/Installed_by_FISSURE/hackrf-2022.09.1/host/build
cmake ..
make
sudo make install
sudo ldconfig
sudo cp """ + fissure_directory + """/Tools/53-hackrf.rules /etc/udev/rules.d/53-hackrf.rules
sudo udevadm trigger --action=change

# RTL-SDR
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/rtl-sdr.git
cd rtl-sdr
mkdir build
cd build
cmake ../ -DINSTALL_UDEV_RULES=ON
make
sudo make install
sudo cp ../rtl-sdr.rules /etc/udev/rules.d/
sudo ldconfig
sudo rmmod dvb_usb_rtl28xxu
echo 'blacklist dvb_usb_rtl28xxu' | sudo tee --append /etc/modprobe.d/blacklist-dvb_usb_rtl28xxu.conf

# gr-osmosdr
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/gr-osmosdr.git
cd gr-osmosdr
git checkout gr3.7
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/bin/osmocom_fft
""",True,'Hardware'))

# BladeRF
programs_ubuntu18_04_6.append(('BladeRF (621.1 MB)',
"""sudo apt-get install -y libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 libtecla1-dev pkg-config git wget	# bladeRF 2.0 requires gr-osmosdr from source			
#sudo apt-get install -y bladerf  # 2016 - probe doesn't work for bladeRF 2.0 micro
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Nuand/bladeRF.git
cd bladeRF
cd host
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DINSTALL_UDEV_RULES=ON ../
make
sudo make install
sudo ldconfig
sudo apt-get install -y bladerf-fpga-hostedx115  # A4, A5, A9 does not exist
sudo apt-get install -y bladerf-fpga-hostedx40   # A4, A5, A9 does not exist
sudo mkdir -p /usr/share/Nuand/bladeRF
sudo wget https://www.nuand.com/fpga/hostedxA4-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA4.rbf
sudo wget https://www.nuand.com/fpga/hostedxA5-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA5.rbf
sudo wget https://www.nuand.com/fpga/hostedxA9-latest.rbf -O /usr/share/Nuand/bladeRF/hostedxA9.rbf
#sudo wget https://www.nuand.com/fpga/hostedx40-latest.rbf -O /usr/share/Nuand/bladeRF/hostedx40.rbf  
#sudo wget https://www.nuand.com/fpga/hostedx115-latest.rbf -O /usr/share/Nuand/bladeRF/hostedx115.rbf  # Causes compatibility errors
########## Verify ##########
bladeRF-cli --help
""",True,'Hardware'))

# USRP X300 Series
programs_ubuntu18_04_6.append(('USRP X300 Series (9.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE  # Set MTU to 9000 and run uhd_image_loader command
cd ~/Installed_by_FISSURE
wget https://codeload.github.com/EttusResearch/uhd/zip/release_003_010_003_000 -O uhd.zip
unzip uhd.zip
cd uhd-release_003_010_003_000/host/include
sudo cp -Rv uhd/rfnoc /usr/share/uhd/
rm -Rf ~/Installed_by_FISSURE/uhd-release_003_010_003_000
""",True,'Hardware'))

# 8812au Driver
programs_ubuntu18_04_6.append(('8812au Driver (31.1 MB)',
"""mkdir -p ~/Installed_by_FISSURE
gzip -dc """ + fissure_directory + """/Tools/rtl8812au.tar.gz | tar -zxf - -C ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/rtl8812au
make
sudo make install
sudo modprobe 8812au
# This method below breaks < 20.04 on reboot
#sudo apt-get install -y dkms
#mkdir -p ~/Installed_by_FISSURE
#cd ~/Installed_by_FISSURE
#git clone https://github.com/aircrack-ng/rtl8812au -b v5.3.4
#cd rtl8812au/
#sudo ./dkms-install.sh
""",True,'Hardware'))

# Zigbee Sniffer
programs_ubuntu18_04_6.append(('Zigbee Sniffer (90.1 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/OpenSniffer-0.1/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/OpenSniffer-0.1/
sudo python3 setup.py install
""",True,'Hardware'))

# fl2k
programs_ubuntu18_04_6.append(('fl2k (16.8 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://gitea.osmocom.org/sdr/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_ubuntu18_04_6.append(('Proxmark3 (1.3 GB)',
"""sudo apt-get install -y p7zip git build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev libqt4-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libpcsclite-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# PlutoSDR
programs_ubuntu18_04_6.append(('PlutoSDR (12.2 MB)',
"""sudo apt-get install -y gr-iio
#sudo apt-get install -y libglib2.0-dev libgtk2.0-dev libgtkdatabox-dev libmatio-dev libfftw3-dev libxml2 libxml2-dev bison flex libavahi-common-dev libavahi-client-dev libjansson-dev cmake libaio-dev libserialport-dev libcdk5-dev libusb-1.0-0-dev doxygen graphviz libgmp-dev swig liborc-dev  # libcurl4-openssl-dev, git  (not available)
#cd ~/Installed_by_FISSURE
#git clone https://github.com/pcercuei/libini.git
#cd libini
#mkdir build && cd build && cmake ../ && make && sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/libiio.git
#cd libiio
#mkdir build && cd build && cmake ../ && make && sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/libad9361-iio.git
#cd libad9361-iio
#cmake ./
#make
#sudo make install
#cd ~/Installed_by_FISSURE
#git clone https://github.com/analogdevicesinc/iio-oscilloscope.git  # IIO oscilloscope is optional
#cd iio-oscilloscope
#git checkout origin/master
#mkdir build && cd build
#cmake ../ && make
#sudo make install
#cd ~/Installed_by_FISSURE  # Did not work
#git clone https://github.com/analogdevicesinc/gr-iio.git
#cd gr-iio
#cmake .
#make
#sudo make install
#cd ..
#sudo ldconfig
########## Verify ##########
python2 -c "from gnuradio import iio"
""",True,'Hardware'))

# gr-acars
programs_ubuntu18_04_6.append(('gr-acars (2.9 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-acars/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/acars
""",True,'Out-of-Tree Modules'))

# gr-adsb
programs_ubuntu18_04_6.append(('gr-adsb (528.3 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-adsb/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-adsb/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/adsb
""",True,'Out-of-Tree Modules'))

# gr-ainfosec
programs_ubuntu18_04_6.append(('gr-ainfosec (3.2 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ainfosec/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/ainfosec
""",True,'Minimum Install'))

# gr-ais
programs_ubuntu18_04_6.append(('gr-ais (5.1 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ais/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/ais
""",True,'Out-of-Tree Modules'))

# gr-bluetooth
programs_ubuntu18_04_6.append(('gr-bluetooth (10.6 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-bluetooth/)" ]; 
then
  mkdir -p ~/Installed_by_FISSURE
  cd ~/Installed_by_FISSURE
  rm -Rf libbtbb
  git clone https://github.com/greatscottgadgets/libbtbb -b master
  cd libbtbb
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-bluetooth/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/bin/btrx
""",True,'Out-of-Tree Modules'))

# gr-clapper_plus
programs_ubuntu18_04_6.append(('gr-clapper_plus (704.5 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-clapper_plus/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-clapper_plus/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/clapper_plus
""",True,'Out-of-Tree Modules'))

# gr-dect2
programs_ubuntu18_04_6.append(('gr-dect2 (4.5 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-dect2/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/dect2
""",True,'Out-of-Tree Modules'))

# gr-foo
programs_ubuntu18_04_6.append(('gr-foo (9.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-foo/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-foo/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/foo
""",True,'Out-of-Tree Modules'))

# gr-fuzzer
programs_ubuntu18_04_6.append(('gr-fuzzer (3.1 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-fuzzer/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/fuzzer
""",True,'Out-of-Tree Modules'))

# gr-garage_door
programs_ubuntu18_04_6.append(('gr-garage_door (733.2 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-garage_door/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-garage_door/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/garage_door
""",True,'Out-of-Tree Modules'))

# gr-gsm-master
programs_ubuntu18_04_6.append(('gr-gsm-master (42.3 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-gsm-master/
sudo rm -Rf build
#sudo apt-get install -y gr-osmosdr  # Installing from source
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# gr-gsm needs to be made twice for "import arfcn" block to work
make 
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/grgsm
""",True,'Out-of-Tree Modules'))

# gr-ieee802-11
programs_ubuntu18_04_6.append(('gr-ieee802-11 (14.4 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-11/examples/wifi_phy_hier.grc
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/ieee802_11
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4
programs_ubuntu18_04_6.append(('gr-ieee802-15-4 (23.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/examples/ieee802_15_4_CSS_PHY.grc
  grcc """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-ieee802-15-4/examples/ieee802_15_4_OQPSK_PHY.grc
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/ieee802_15_4
""",True,'Out-of-Tree Modules'))

# gr-iridium-maint-3.7
programs_ubuntu18_04_6.append(('gr-iridium-maint-3.7 (8.5 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-iridium-maint-3.7/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/lib/python*/*/iridium
""",True,'Out-of-Tree Modules'))

# gr-j2497
programs_ubuntu18_04_6.append(('gr-j2497 (909.3 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-j2497/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-j2497/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/J2497
""",True,'Out-of-Tree Modules'))

# gr-limesdr
programs_ubuntu18_04_6.append(('gr-limesdr (4.3 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-limesdr/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-limesdr/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/limesdr
""",True,'Out-of-Tree Modules'))

# gr-mixalot
programs_ubuntu18_04_6.append(('gr-mixalot (10.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-mixalot/)" ]; 
then
  sudo apt-get install -y libitpp-dev
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-mixalot/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/mixalot
""",True,'Out-of-Tree Modules'))

# gr-nrsc5
programs_ubuntu18_04_6.append(('gr-nrsc5 (39.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-nrsc5/)" ]; 
then
  sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev liborc-0.4-dev
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-nrsc5/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/nrsc5
""",True,'Out-of-Tree Modules'))

# gr-paint
programs_ubuntu18_04_6.append(('gr-paint (3.0 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-paint/
  gcc tgatoluma.c -o tgatoluma
  chmod +x tgatoluma
  cp tgatoluma ~/.local/bin/
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/paint
""",True,'Out-of-Tree Modules'))

# gr-rds
programs_ubuntu18_04_6.append(('gr-rds (5.9 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-rds/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-rds/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/rds
""",True,'Out-of-Tree Modules'))

# gr-tpms
programs_ubuntu18_04_6.append(('gr-tpms (5.1 MB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/tpms
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore
programs_ubuntu18_04_6.append(('gr-tpms_poore (786.4 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms_poore/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-tpms_poore/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/tpms_poore
""",True,'Out-of-Tree Modules'))

# gr-X10
programs_ubuntu18_04_6.append(('gr-X10 (798.7 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-X10/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-X10/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/X10
""",True,'Out-of-Tree Modules'))

# gr-Zwave
programs_ubuntu18_04_6.append(('gr-Zwave (4.4 MB)',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-Zwave/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python2 -c "import Zwave"
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore
programs_ubuntu18_04_6.append(('gr-zwave_poore (786.4 kB)',
"""if [ "$(ls -A """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-zwave_poore/)" ]; 
then
  cd """ + fissure_directory + """/Custom_Blocks/maint-3.7/gr-zwave_poore/
  sudo rm -Rf build
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig
else
  echo "Folder is empty. Execute 'git submodule update --init' from FISSURE directory."
fi
########## Verify ##########
ls /usr/local/lib/python*/*/zwave_poore
""",True,'Out-of-Tree Modules'))

# QSpectrumAnalyzer
programs_ubuntu18_04_6.append(('QSpectrumAnalyzer (181.1 MB)',
"""#sudo add-apt-repository -y ppa:myriadrf/drivers
#sudo apt-get -y update
sudo apt-get install -y python3-pip python3-pyqt5 python3-numpy python3-scipy soapysdr python3-soapysdr
sudo apt-get install -y soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7
python3 -m pip install --user qspectrumanalyzer
PATH=$PATH:~/.local/bin
export PATH
. ~/.bashrc
sudo cp ~/.local/bin/qspectrumanalyzer /usr/local/bin/
########## Verify ##########
ls ~/.local/bin/qspectrumanalyzer
""",True,'SDR'))

# GQRX
programs_ubuntu18_04_6.append(('GQRX (18.7 MB)',
"""sudo apt-get install -y gqrx-sdr
########## Verify ##########
ls /usr/bin/gqrx
""",True,'SDR'))

# Dump1090
programs_ubuntu18_04_6.append(('Dump1090 (3.1 MB)',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,'Aircraft'))

# QtDesigner
programs_ubuntu18_04_6.append(('QtDesigner (2.6 MB)',
"""sudo apt-get install -y python-qt4 qt4-designer
########## Verify ##########
ls /usr/bin/designer
""",True,'Development'))

# Grip
programs_ubuntu18_04_6.append(('Grip (15.2 MB)',
"""python2 -m pip install grip
########## Verify ##########
ls ~/.local/bin/grip
""",True,'Development'))

# Kismet
programs_ubuntu18_04_6.append(('Kismet (6.0 MB)',
"""sudo apt-get install -y kismet
########## Verify ##########
ls /usr/bin/kismet
""",True,'802.11'))

# UDP Replay
programs_ubuntu18_04_6.append(('UDP Replay (725.0 kB)',
"""sudo apt-get install -y libpcap-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/rigtorp/udpreplay.git
cd ~/Installed_by_FISSURE/udpreplay
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls /usr/local/bin/udpreplay
""",True,'802.11'))

# V2Verifier
programs_ubuntu18_04_6.append(('V2Verifier (7.5 MB)',
"""sudo apt-get install -y libgmp3-dev python3-tk python3-pil.imagetk
python3 -m pip install fastecdsa
python3 -m pip install -U pyyaml
#sudo apt install -y git cmake libuhd-dev uhd-host swig libgmp3-dev python3-pip python3-tk python3-pil 
#python3-pil.imagetk gnuradio
#Needs gr-foo and gr-ieee802-11
""",True,'V2V'))

# OpenBTS
programs_ubuntu18_04_6.append(('OpenBTS (1.4 GB)',
"""sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get update
sudo apt-get install -y git
sudo apt-get install -y asterisk
sudo apt-get install -y twinkle
sudo apt-get install -y autoconf libtool libosip2-dev libortp-dev libusb-1.0-0-dev g++ sqlite3 libsqlite3-dev erlang libreadline6-dev libncurses5-dev
mkdir -p ~/Installed_by_FISSURE/OpenBTS
cd ~/Installed_by_FISSURE/OpenBTS
git clone https://github.com/RangeNetworks/dev.git
cd dev
./clone.sh
./switchto.sh master
cd liba53/
sudo make install
cd ..
git clone https://github.com/tom-2015/fakecoredumper.git
cd fakecoredumper
chmod +x install.sh
./install.sh
cd ..
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/build.sh ./build.sh
sudo apt install g++-5 -y
sudo update-alternatives --remove-all gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 
sudo chmod +x build.sh
./build.sh B210
sudo mkdir /etc/OpenBTS
cd openbts
sudo sqlite3 -init ./apps/OpenBTS.example.sql /etc/OpenBTS/OpenBTS.db ".quit"
#sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/usrp_b210_fpga.bin /usr/share/uhd/images/usrp_b210_fpga.bin
cd apps
ln -s ../Transceiver52M/transceiver .
sudo apt-get install -y sqlitebrowser
sudo mkdir -p /var/lib/asterisk/sqlite3dir
cd ../../subscriberRegistry
make
cd apps
cp """ + fissure_directory + """/Tools/openbts_files_18_04/sipauthserve.example.sql sipauthserve.example.sql
sudo sqlite3 -init sipauthserve.example.sql /etc/OpenBTS/sipauthserve.db ".quit"
cd ../../smqueue
autoconf -i
./configure
make
cp """ + fissure_directory + """/Tools/openbts_files_18_04/smqueue.example.sql smqueue/smqueue.example.sql
sudo sqlite3 -init smqueue/smqueue.example.sql /etc/OpenBTS/smqueue.db ".quit"
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/sip.conf /etc/asterisk/sip.conf
sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/extensions.conf /etc/asterisk/extensions.conf
sudo apt-get install -y pcscd pcsc-tools libccid libpcsclite-dev
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/pysim
cd pysim
sudo apt-get install -y python3-pip swig
sudo python3 -m pip install -r requirements.txt
sudo update-alternatives --remove-all gcc
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
sudo uhd_images_downloader
""",True,'GSM'))

# srsRAN/srsLTE
programs_ubuntu18_04_6.append(('srsRAN (837.2 MB)',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,'LTE'))

# FALCON
programs_ubuntu18_04_6.append(('FALCON (677.5 MB)',
"""sudo apt-get install -y build-essential git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev  # For srsLTE
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y libglib2.0-dev libudev-dev libcurl4-gnutls-dev libboost-all-dev qtdeclarative5-dev libqt5charts5-dev  # FALCON
git clone https://github.com/falkenber9/falcon.git
cd falcon
mkdir build
cd build
cmake -DFORCE_SUBPROJECT_SRSLTE=ON -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
#sudo xargs rm < install_manifest.txt  # uninstall
#make clean
########## Verify ##########
ls /usr/bin/FalconGUI
""",True,'LTE'))

# LTE-ciphercheck
programs_ubuntu18_04_6.append(('LTE-ciphercheck (151.9 MB)',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp ../srsue/ciphercheck.conf.example ../srsue/ciphercheck.conf
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf
""",True,'LTE'))

# Aircrack-ng
programs_ubuntu18_04_6.append(('Aircrack-ng (19.1 MB)',
"""sudo apt-get install -y aircrack-ng
########## Verify ##########
aircrack-ng --help
""",True,'802.11'))

# Geany
programs_ubuntu18_04_6.append(('Geany (14.2 MB)',
"""sudo apt-get install -y geany
########## Verify ##########
geany --help
""",True,'Development'))

# Arduino IDE
programs_ubuntu18_04_6.append(('Arduino IDE (630.2 MB)',
"""wget -P ~/Installed_by_FISSURE/ https://downloads.arduino.cc/arduino-1.8.15-linux64.tar.xz
cd ~/Installed_by_FISSURE
tar -xf arduino-1.8.15-linux64.tar.xz
rm arduino-1.8.15-linux64.tar.xz
cd arduino-1.8.15/
sudo ./install.sh
cp -R """ + fissure_directory + """/Tools/Esp8266_listen_trigger/ ~/Installed_by_FISSURE/
########## Verify ##########
arduino --version
""",True,'Development'))

# Minicom
programs_ubuntu18_04_6.append(('Minicom (1.6 MB)',
"""sudo apt-get install -y minicom
########## Verify ##########
ls /usr/bin/minicom
""",True,'Hardware'))

# PuTTY
programs_ubuntu18_04_6.append(('PuTTY (4.2 MB)',
"""sudo apt-get install -y putty
########## Verify ##########
putty --help
""",True,'Hardware'))

# openHAB
programs_ubuntu18_04_6.append(('openHAB (223.6 MB)',
"""wget -qO - 'https://openhab.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
sudo apt-get install -y apt-transport-https
echo 'deb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list
sudo apt-get update
sudo apt-get install -y openhab
########## Verify ##########
ls /usr/bin/openhab-cli
""",True,'Z-Wave'))

# rtl-zwave
programs_ubuntu18_04_6.append(('rtl-zwave (102.4 kB)',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y libpcap-dev
cp -R """ + fissure_directory + """/Tools/rtl-zwave-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/rtl-zwave-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/rtl-zwave-master/rtl_zwave
""",True,'Z-Wave'))

# waving-z
programs_ubuntu18_04_6.append(('waving-z (2.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/
git clone https://github.com/baol/waving-z.git
cd ~/Installed_by_FISSURE/waving-z
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build .
########## Verify ##########
ls ~/Installed_by_FISSURE/waving-z/build/wave-in
""",True,'Z-Wave'))

# baudline
programs_ubuntu18_04_6.append(('baudline (4.9 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://www.baudline.com/baudline_1.08_linux_x86_64.tar.gz
tar -xf baudline_1.08_linux_x86_64.tar.gz
rm baudline_1.08_linux_x86_64.tar.gz
########## Verify ##########
~/Installed_by_FISSURE/baudline_1.08_linux_x86_64/baudline --help
""",True,'SDR'))

# Universal Radio Hacker
programs_ubuntu18_04_6.append(('Universal Radio Hacker (35.9 MB)',
"""sudo python3 -m pip install cython
sudo python3 -m pip install urh
########## Verify ##########
urh --version
""",False,'SDR'))

# Inspectrum
programs_ubuntu18_04_6.append(('Inspectrum (1.5 MB)',
"""sudo apt-get install -y inspectrum
########## Verify ##########
inspectrum --help
""",True,'SDR'))

# OpenCPN
programs_ubuntu18_04_6.append(('OpenCPN (121.7 MB)',
"""sudo add-apt-repository -y ppa:opencpn/opencpn
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C865EB40
sudo apt-get update
sudo apt-get install -y opencpn
########## Verify ##########
ls /usr/bin/opencpn
""",False,'AIS'))

# Kalibrate
programs_ubuntu18_04_6.append(('Kalibrate (1.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/steve-m/kalibrate-rtl.git
cd kalibrate-rtl
./bootstrap && CXXFLAGS='-W -Wall -O3' ./configure && make
########## Verify ##########
ls ~/Installed_by_FISSURE/kalibrate-rtl/src/kal
""",True,'GSM'))

# retrogram-rtlsdr
programs_ubuntu18_04_6.append(('retrogram-rtlsdr (1.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y librtlsdr-dev libncurses5-dev libboost-program-options-dev
cp -R """ + fissure_directory + """/Tools/retrogram-rtlsdr-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/retrogram-rtlsdr-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/retrogram-rtlsdr-master/retrogram-rtlsdr
""",True,'SDR'))

# RTLSDR-Airband
programs_ubuntu18_04_6.append(('RTLSDR-Airband (9.7 MB)',
"""sudo apt-get install -y build-essential cmake pkg-config libmp3lame-dev libshout3-dev libconfig++-dev libfftw3-dev libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/szpajder/RTLSDR-Airband.git
cd RTLSDR-Airband
mkdir build
cd build
cmake ../
make
sudo make install
########## Verify ##########
rtl_airband -h
""",True,'SDR'))

# Spektrum
programs_ubuntu18_04_6.append(('Spektrum (241.9 MB)',
"""echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/rtl-sdr.conf  # Restart computer to use RTL device
echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", GROUP="adm", MODE="0666"' | sudo tee /etc/udev/rules.d/20.rtlsdr.rules
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/pavels/spektrum/releases/download/2.1.0/spektrum-linux64.tar.gz
cd ~/Installed_by_FISSURE
tar -xf spektrum-linux64.tar.gz
rm spektrum-linux64.tar.gz
########## Verify ##########
ls ~/Installed_by_FISSURE/spektrum/spektrum
""",True,'SDR'))

# SDRTrunk
programs_ubuntu18_04_6.append(('SDRTrunk (106.9 MB)',
"""#sudo apt-get -yq install gnupg curl  # Java (if needed)
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
#cd ~/Downloads
#curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
#sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
#sudo apt-get update
#sudo apt-get install -y zulu11-jdk
#rm zulu-repo_1.0.0-2_all.deb
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/DSheirer/sdrtrunk/releases/download/v0.5.0-alpha.6/sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
cd ~/Installed_by_FISSURE
unzip -q sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
rm sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
########## Verify ##########
ls ~/Installed_by_FISSURE/sdr-trunk-linux-x86_64-v0.5.0-alpha6/bin/sdr-trunk
""",True,'Trunked Radio'))

# Audacity
programs_ubuntu18_04_6.append(('Audacity (110.1 MB)',
"""sudo apt-get install -y audacity
########## Verify ##########
audacity --version
""",True,'Audio'))

# Sound eXchange
programs_ubuntu18_04_6.append(('Sound eXchange (2.1 MB)',
"""sudo apt-get install -y sox
########## Verify ##########
sox --version
""",True,'Audio'))

# LAME
programs_ubuntu18_04_6.append(('LAME (180.2 kB)',
"""sudo apt-get install -y lame
########## Verify ##########
lame --version
""",True,'Audio'))

# mpv
programs_ubuntu18_04_6.append(('mpv (146.5 MB)',
"""sudo apt-get install -y mpv
########## Verify ##########
mpv --version
""",True,'Audio'))

# FFmpeg
programs_ubuntu18_04_6.append(('FFmpeg',
"""sudo apt-get install -y ffmpeg 
########## Verify ##########
ffmpeg --help
""",True,'Audio'))

# MPlayer
programs_ubuntu18_04_6.append(('MPlayer (14.5 MB)',
"""sudo apt-get install -y mplayer
########## Verify ##########
ls /usr/bin/mplayer
""",True,'Audio'))

# VLC
programs_ubuntu18_04_6.append(('VLC (343.3 MB)',
"""sudo apt-get install -y snapd
sudo snap install vlc
########## Verify ##########
vlc --help
""",True,'Video'))

# Simple Screen Recorder
programs_ubuntu18_04_6.append(('Simple Screen Recorder (4.5 MB)',
"""sudo apt-get install -y simplescreenrecorder
########## Verify ##########
simplescreenrecorder --help
""",True,'Video'))

# radiosonde_auto_rx
programs_ubuntu18_04_6.append(('radiosonde_auto_rx (55.4 MB)',
"""sudo apt-get install -y python3 python3-numpy python3-setuptools python3-crcmod python3-requests python3-dateutil python3-pip python3-flask sox git build-essential libtool cmake usbutils libusb-1.0-0-dev rng-tools libsamplerate-dev libatlas3-base libgfortran5
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/projecthorus/radiosonde_auto_rx.git
cd radiosonde_auto_rx/auto_rx
./build.sh
cp station.cfg.example station.cfg
sudo python3 -m pip install -r requirements.txt
########## Verify ##########
ls ~/Installed_by_FISSURE/radiosonde_auto_rx/auto_rx/auto_rx.py
""",True,'Radiosonde'))

# SdrGlut
programs_ubuntu18_04_6.append(('SdrGlut (305.0 MB)',
"""sudo apt-get install -y librtaudio-dev libsoapysdr0.6 libsoapysdr-dev libopenal-dev libliquid-dev freeglut3 freeglut3-dev libalut0 libalut-dev libsndfile1-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/righthalfplane/SdrGlut.git
cp -f """ + fissure_directory + """/Tools/SdrGlut/firstFile.h ~/Installed_by_FISSURE/SdrGlut/MainSource/
cd SdrGlut
make -f makefileUbunta
########## Verify ##########
ls ~/Installed_by_FISSURE/SdrGlut/sdrglut.x
""",True,'SDR'))

# rehex
programs_ubuntu18_04_6.append(('rehex (550.1 MB)',
"""sudo apt-get install -y build-essential git libwxgtk3.0-dev libjansson-dev libcapstone-dev liblua5.3-dev lua5.3 lua5.2 libunistring-dev gtk2.0 libgtk2.0-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/solemnwarning/rehex.git
cd rehex
sudo cpan Template
sudo make install
########## Verify ##########
ls /usr/local/bin/rehex 
""",True,'Data'))

# ZEPASSD
programs_ubuntu18_04_6.append(('ZEPASSD (9.2 MB)',
"""#sudo apt-get install -y # boost.program-options, boost.crc, boost.circular-buffer, libfftw3, libuhd 3.9.5 or later
sudo apt-get install -y libuhd-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/pvachon/zepassd.git
cd zepassd
make
########## Verify ##########
ls ~/Installed_by_FISSURE/zepassd/zepassd
""",True,'RFID'))

# iridium-toolkit
programs_ubuntu18_04_6.append(('iridium-toolkit (3.1 MB)',
"""#Python (2.7), NumPy (scipy), crcmod
sudo apt-get install -y mplayer
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/muccc/iridium-toolkit.git
git clone git://git.osmocom.org/osmo-ir77
cd osmo-ir77/codec/
sudo make
cp ir77_ambe_decode ~/Installed_by_FISSURE/iridium-toolkit/
########## Verify ##########
ls ~/Installed_by_FISSURE/osmo-ir77/codec/ir77_ambe_decode
""",True,'Satellite'))

# IridiumLive
programs_ubuntu18_04_6.append(('IridiumLive (97.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/microp11/iridiumlive.git
wget -P ~/Installed_by_FISSURE/ https://github.com/microp11/iridiumlive/releases/download/v1.2/linux-x64.zip
unzip -q linux-x64.zip
rm linux-x64.zip
cd linux-x64
sudo chmod +x IridiumLive
########## Verify ##########
ls ~/Installed_by_FISSURE/linux-x64/IridiumLive
""",True,'Satellite'))

# NETATTACK2
programs_ubuntu18_04_6.append(('NETATTACK2 (37.7 MB)',
"""sudo python2 -m pip install netifaces
sudo apt-get install -y python-scapy python-nmap python-nfqueue nmap
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/chrizator/netattack2.git
""",True,'802.11'))

# Wifite
programs_ubuntu18_04_6.append(('Wifite (549.0 MB)',
"""# python, iwconfig, ifconfig, Aircrack-ng, tshark, reaver, bully, coWPAtty, pyrit, hashcat, hcxdumptool, hcxpcaptool
sudo apt-get install -y build-essential libpcap-dev aircrack-ng pixiewps libssl-dev hashcat libcurl4-openssl-dev pkg-config macchanger
sudo python2 -m pip install psycopg2-binary scapy
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/derv82/wifite2.git
git clone https://github.com/t6x/reaver-wps-fork-t6x
cd reaver-wps-fork-t6x/src
./configure
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/aanarchyy/bully
cd bully/src
make
sudo make install
cd ~/Installed_by_FISSURE
wget http://www.willhackforsushi.com/code/cowpatty/4.6/cowpatty-4.6.tgz
tar zxfv cowpatty-4.6.tgz
rm cowpatty-4.6.tgz
cd cowpatty-4.6
make
sudo cp cowpatty /usr/bin
cd ~/Installed_by_FISSURE
mkdir Pyrit-v0.5.0
cd Pyrit-v0.5.0
wget https://github.com/JPaulMora/Pyrit/releases/download/v0.5.0/Pyrit-v0.5.0.zip
unzip -q Pyrit-v0.5.0.zip
rm Pyrit-v0.5.0.zip
python2 setup.py clean
python2 setup.py build
sudo python2 setup.py install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxdumptool.git
cd hcxdumptool
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxtools.git
cd hcxtools
make
sudo make install
sudo ln -s /usr/bin/hcxpcapngtool /usr/bin/hcxpcaptool
########## Verify ##########
~/Installed_by_FISSURE/wifite2/Wifite.py --help
""",True,'802.11'))

# rtl_433
programs_ubuntu18_04_6.append(('rtl_433 (23.0 MB)',
"""sudo apt-get install -y libtool libusb-1.0-0-dev librtlsdr-dev rtl-sdr build-essential cmake pkg-config
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/merbanan/rtl_433/archive/refs/tags/22.11.zip
unzip 22.11.zip
rm 22.11.zip
mv rtl_433-22.11/ rtl_433/
#git clone https://github.com/merbanan/rtl_433.git
cd rtl_433/
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
rtl_433 -help
""",True,'433 MHz'))

# RouterSploit
programs_ubuntu18_04_6.append(('RouterSploit (516.2 MB)',
"""#sudo add-apt-repository universe
sudo apt-get install -y python3-pip libglib2.0-dev rustc
sudo python3 -m pip install setuptools-rust
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/threat9/routersploit
cd routersploit
python3 -m pip install setuptools
sed -i 's/paramiko/#paramiko/g' requirements.txt
python3 -m pip install -r requirements.txt
python3 -m pip install bluepy
########## Verify ##########
~/Installed_by_FISSURE/routersploit/rsf.py --help
""",True,'802.11'))

# Metasploit
programs_ubuntu18_04_6.append(('Metasploit (1.1 GB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
mkdir metasploit
cd metasploit
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
########## Verify ##########
ls /usr/bin/msfconsole
""",True,'802.11'))

# monitor_rtl433
programs_ubuntu18_04_6.append(('monitor_rtl433 (33.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mcbridejc/monitor_rtl433.git
cd monitor_rtl433
sudo python3 setup.py install
########## Verify ##########
ls /usr/local/bin/monitor_rtl433
""",True,'433 MHz'))

# scan-ssid
programs_ubuntu18_04_6.append(('scan-ssid (229.4 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y iw
git clone https://github.com/Resethel/scan-ssid.git
cd scan-ssid
sudo cp scan-ssid /usr/local/bin
sudo chmod 755 /usr/local/bin/scan-ssid
########## Verify ##########
scan-ssid --help
""",True,'802.11'))

# minimodem
programs_ubuntu18_04_6.append(('minimodem (106.5 kB)',
"""sudo apt-get install -y minimodem
########## Verify ##########
minimodem --version
""",True,'Audio'))

# WSJT-X
programs_ubuntu18_04_6.append(('WSJT-X (4.1 MB)',
"""sudo apt-get install -y wsjtx
########## Verify ##########
ls /usr/bin/wsjtx
""",True,'Ham Radio'))

# Google Earth Pro
programs_ubuntu18_04_6.append(('Google Earth Pro (314.7 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
sudo dpkg -i google-earth-pro-stable_current_amd64.deb
########## Verify ##########
ls /usr/bin/google-earth-pro
""",True,'Mapping'))

# gr-air-modes
programs_ubuntu18_04_6.append(('gr-air-modes (1.4 MB)',
"""sudo apt-get install -y gr-air-modes
########## Verify ##########
modes_rx --help
""",True,'Aircraft'))

# ESP8266 Deauther v2
programs_ubuntu18_04_6.append(('ESP8266 Deauther v2 (6.2 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/SpacehuhnTech/esp8266_deauther/archive/v2.zip
unzip -q v2.zip
rm v2.zip
""",True,'802.11'))

# Viking
programs_ubuntu18_04_6.append(('Viking (458.1 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.code.sf.net/p/viking/code viking
sudo apt install -y gtk-doc-tools docbook-xsl yelp-tools libpng-dev libgtk-3-dev libicu-dev libjson-glib-dev intltool
sudo apt-get install -y libcurl4-gnutls-dev libglib2.0-dev-bin
sudo apt-get install -y libsqlite3-dev nettle-dev libmapnik-dev libgeoclue-2-dev libgexiv2-dev libgps-dev libmagic-dev libbz2-dev libzip-dev liboauth-dev libnova-dev
cd viking
./autogen.sh
./configure
make
sudo make install
########## Verify ##########
viking --help
""",True,'Mapping'))

# PyGPSClient
programs_ubuntu18_04_6.append(('PyGPSClient (10.7 MB)',
"""sudo apt install -y python3-pip python3-tk python3-pil python3-pil.imagetk libjpeg-dev zlib1g-dev
sudo apt install -y tk-devel
sudo python3 -m pip install --upgrade PyGPSClient
########## Verify ##########
ls /usr/local/bin/pygpsclient
""",True,'GPS'))

# Gpredict
programs_ubuntu18_04_6.append(('Gpredict (12.5 MB)',
"""sudo apt-get install -y gpredict
########## Verify ##########
gpredict --help
""",True,'GPS'))

# FoxtrotGPS
programs_ubuntu18_04_6.append(('FoxtrotGPS (2.3 MB)',
"""sudo apt-get install -y foxtrotgps
########## Verify ##########
foxtrotgps --help
""",True,'GPS'))

# multimon-ng
programs_ubuntu18_04_6.append(('multimon-ng (9.0 MB)',
"""sudo apt-get install -y libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/EliasOenal/multimonNG.git
cd multimonNG
mkdir build
cd build
qmake ../multimon-ng.pro
make
sudo make install
########## Verify ##########
ls /usr/local/bin/multimon-ng
""",True,'POCSAG'))

# Xastir
programs_ubuntu18_04_6.append(('Xastir (120.9 MB)',
"""sudo apt-get install -y xastir
########## Verify ##########
sudo xastir -V
""",True,'Ham Radio'))

# LTE-Cell-Scanner
programs_ubuntu18_04_6.append(('LTE-Cell-Scanner (137.8 MB)',
"""sudo apt-get install -y cmake libncurses5-dev liblapack-dev libblas-dev libboost-thread-dev libboost-system-dev libitpp-dev librtlsdr-dev libfftw3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/JiaoXianjun/LTE-Cell-Scanner.git
cd LTE-Cell-Scanner
mkdir build
cd build
cmake ..
make 
sudo make install
########## Verify ##########
ls /usr/local/bin/CellSearch
""",True,'LTE'))

# btscanner
programs_ubuntu18_04_6.append(('btscanner (921.6 kB)',
"""sudo apt-get install -y btscanner
########## Verify ##########
btscanner --help
""",True,'Bluetooth'))

# hcidump
programs_ubuntu18_04_6.append(('hcidump (602.1 kB)',
"""sudo apt-get install -y bluez-hcidump
########## Verify ##########
hcidump --help
""",True,'Bluetooth'))

# GraphicsMagick
programs_ubuntu18_04_6.append(('GraphicsMagick (4.9 MB)',
"""sudo apt-get install -y graphicsmagick-imagemagick-compat
########## Verify ##########
gm -help
""",True,'SDR'))

# Spectrum Painter
programs_ubuntu18_04_6.append(('Spectrum Painter (10.1 MB)',
"""sudo python3 -m pip install numpy imageio
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/polygon/spectrum_painter.git
#cd spectrum_painter/
#python3 -m pip install --user -e .  # call with "python3 -m spectrum_painter.img2iqstream"
""",True,'SDR'))

# nrsc5 and nrsc5-gui
programs_ubuntu18_04_6.append(('nrsc5 (154.7 MB)',
"""sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev python3-pyaudio
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/theori-io/nrsc5.git
cd nrsc5
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# nrsc5-gui
python3 -m pip install --upgrade Pillow
python3 -m pip install pyaudio
sudo apt-get install -y python-gobject
cd ~/Installed_by_FISSURE
git clone https://github.com/cmnybo/nrsc5-gui.git
########## Verify ##########
nrsc5 -v
""",True,'HD Radio'))

# HAM2MON
programs_ubuntu18_04_6.append(('HAM2MON (1.0 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/madengr/ham2mon.git
########## Verify ##########
~/Installed_by_FISSURE/ham2mon/apps/ham2mon.py --help
""",True,'Ham Radio'))

# Anki
programs_ubuntu18_04_6.append(('Anki (318.2 MB)',
"""sudo apt-get install -y anki
########## Verify ##########
anki -h
""",True,'Ham Radio'))

# Bless
programs_ubuntu18_04_6.append(('Bless (7.7 MB)',
"""sudo apt-get install -y bless
########## Verify ##########
ls /usr/bin/bless
""",True,'Data'))

# trackerjacker
programs_ubuntu18_04_6.append(('trackerjacker (15.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/calebmadrigal/trackerjacker.git
cd trackerjacker
sudo python3 setup.py install
########## Verify ##########
sudo trackerjacker --help
""",False,'802.11'))

# airgeddon
programs_ubuntu18_04_6.append(('airgeddon (212.2 MB)',
"""sudo apt-get install -y crunch mdk3 hostapd lighttpd ruby-dev xterm isc-dhcp-server ettercap-text-only libxcrypt-dev john libnl-3-dev libnl-genl-3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone --depth 1 https://github.com/v1s1t0r1sh3r3/airgeddon.git
#asleap
git clone https://github.com/joswr1ght/asleap
cd asleap
make
sudo cp asleap /usr/bin/
#bettercap
sudo apt-get install -y build-essential libpcap-dev net-tools 
cd ~/Installed_by_FISSURE
mkdir bettercap
cd bettercap
wget https://github.com/bettercap/bettercap/releases/download/v2.31.1/bettercap_linux_amd64_v2.31.1.zip
unzip -q bettercap_linux_amd64_v2.31.1.zip
rm bettercap_linux_amd64_v2.31.1.zip
sudo cp bettercap /usr/bin/
#mdk4
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/mdk4
cd mdk4
make
sudo make install
""",True,'802.11'))

# Hydra
programs_ubuntu18_04_6.append(('Hydra (10.6 MB)',
"""sudo apt-get install -y hydra
########## Verify ##########
ls /usr/bin/hydra
""",True,'SSH'))

# Enscribe
programs_ubuntu18_04_6.append(('Enscribe (98.2 kB)',
"""sudo apt-get install -y enscribe
########## Verify ##########
ls /usr/bin/enscribe
""",True,'Audio'))

# ESP32 Bluetooth Classic Sniffer
programs_ubuntu18_04_6.append(('ESP32 BT Classic Sniffer (400.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE  # Requires Wireshark 3.4 by default, modifying it for 3.6.5
cd ~/Installed_by_FISSURE
git clone https://github.com/Matheus-Garbelini/esp32_bluetooth_classic_sniffer
cd esp32_bluetooth_classic_sniffer
rm ./dissectors/config.h
sed -i 's/Bluetooth Link Manager Protocol/ESP32 Bluetooth Link Manager Protocol/g' ./dissectors/packet-btbrlmp.c
sed -i 's/btlmp/esp32_btlmp/g' ./dissectors/packet-btbrlmp.c
sed -i 's/3.4/3.6/g' ./dissectors/build.sh
sudo ./requirements.sh
./build.sh
sudo cp dissectors/h4bcm.so /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.6/epan/  # Placing it where "sudo Wireshark" dissectors are located
rm ~/.local/lib/wireshark/plugins/3.6/epan/h4bcm.so  # To avoid "plugin 'h4bcm.so' was found in multiple directories" warning
########## Verify ##########
ls /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.6/epan/h4bcm.so
""",True,'Bluetooth'))

# QSSTV
programs_ubuntu18_04_6.append(('QSSTV (3.4 MB)',
"""sudo apt-get install -y qsstv
########## Verify ##########
ls /usr/bin/qsstv
""",True,'Ham Radio'))

# Fldigi
programs_ubuntu18_04_6.append(('Fldigi (11.0 MB)',
"""sudo apt-get install -y fldigi
########## Verify ##########
ls /usr/bin/fldigi
""",True,'Ham Radio'))

# Bootable USB
programs_ubuntu18_04_6.append(('Bootable USB (107.4 MB)',
"""sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 382003C2C8B7B4AB813E915B14E4942973C62A1B
sudo add-apt-repository -y "deb http://ppa.launchpad.net/nemh/systemback/ubuntu xenial main"
sudo apt update
sudo apt install -y systemback
sudo add-apt-repository -y ppa:mkusb/ppa
sudo apt-get update
sudo apt-get install -y mkusb usb-pack-efi mkusb-plug guidus
########## Verify ##########
ls /usr/bin/systemback && ls /usr/bin/guidus
""",True,'Development'))

# Dire Wolf
programs_ubuntu18_04_6.append(('Dire Wolf (204.9 MB)',
"""sudo apt-get -y install git gcc g++ make cmake libasound2-dev libudev-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/wb2osz/direwolf
cd direwolf
git checkout dev
mkdir build
cd build
cmake ..
make -j4
sudo make install
make install-conf
########## Verify ##########
ls /usr/local/bin/direwolf
""",True,'Ham Radio'))

# Meld
programs_ubuntu18_04_6.append(('Meld (4.8 MB)',
"""sudo apt-get -y install meld
########## Verify ##########
ls /usr/bin/meld
""",True,'Data'))

# HamClock
programs_ubuntu18_04_6.append(('HamClock (42.4 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://www.clearskyinstitute.com/ham/HamClock/ESPHamClock.zip
unzip -q ESPHamClock.zip
rm ESPHamClock.zip
cd ESPHamClock
make install hamclock-1600x960
sudo make install hamclock-1600x960
########## Verify ##########
ls /usr/local/bin/hamclock
""",True,'Ham Radio'))

# ICE9 Bluetooth Sniffer
programs_ubuntu18_04_6.append(('ICE9 Bluetooth Sniffer (4.7 MB)',
"""sudo apt install -y libliquid-dev libbtbb-dev libuhd-dev
sudo apt-get install -y libhackrf-dev libbladerf-dev  # Separating in case there are conflicts with Hardware install
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mikeryan/ice9-bluetooth-sniffer.git
cd ice9-bluetooth-sniffer
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls ~/Installed_by_FISSURE/ice9-bluetooth-sniffer/build/ice9-bluetooth
""",True,'Bluetooth'))

# dump978
programs_ubuntu18_04_6.append(('dump978 (1.6 MB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mutability/dump978.git
cd dump978
make
########## Verify ##########
ls ~/Installed_by_FISSURE/dump978/dump978
""",True,'Aircraft'))

# htop
programs_ubuntu18_04_6.append(('htop (319.5 kB)',
"""sudo apt-get install -y htop
########## Verify ##########
ls /usr/bin/htop
""",True,'Development'))

# CRC RevEng
programs_ubuntu18_04_6.append(('CRC RevEng (905.2 kB)',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -T 20 https://sourceforge.net/projects/reveng/files/3.0.5/reveng-3.0.5.zip/download
unzip download
rm download
cd reveng-3.0.5
make
########## Verify ##########
ls ~/Installed_by_FISSURE/reveng-3.0.5/bin/i386-linux/reveng
""",True,'Data'))

# Gpick
programs_ubuntu18_04_6.append(('Gpick (1.5 MB)',
"""sudo apt-get install -y gpick
########## Verify ##########
ls /usr/bin/gpick
""",True,'Development'))

# GHex
programs_ubuntu18_04_6.append(('GHex',
"""sudo apt-get install -y ghex
########## Verify ##########
ls /usr/bin/ghex
""",True,'Data'))

# Archive Flow Graphs
programs_ubuntu18_04_6.append(('Archive Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Archive\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Fuzzing Flow Graphs
programs_ubuntu18_04_6.append(('Fuzzing Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Fuzzing\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Inspection Flow Graphs
programs_ubuntu18_04_6.append(('Inspection Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Inspection\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# IQ Flow Graphs
programs_ubuntu18_04_6.append(('IQ Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/IQ\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# PD Flow Graphs
programs_ubuntu18_04_6.append(('PD Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/PD\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Single-Stage Flow Graphs
programs_ubuntu18_04_6.append(('Single-Stage Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Single-Stage\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Sniffer Flow Graphs
programs_ubuntu18_04_6.append(('Sniffer Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Sniffer\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# Standalone Flow Graphs
programs_ubuntu18_04_6.append(('Standalone Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/Standalone\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# TSI Flow Graphs
programs_ubuntu18_04_6.append(('TSI Flow Graphs',
"""cd """ + fissure_directory + """/Flow\ Graph\ Library/TSI\ Flow\ Graphs/
find . -name '*.grc' -exec grcc {} \;
""",True,'Compile Flow Graphs'))

# pyais
programs_ubuntu18_04_6.append(('pyais',
"""sudo python3 -m pip install pyais
########## Verify ##########
ls /usr/local/lib/python3*/dist-packages/pyais
""",True,'AIS'))

# HAMRS
programs_ubuntu18_04_6.append(('HAMRS (105.8 MB)',
"""mkdir -p ~/Installed_by_FISSURE/HAMRS
cd ~/Installed_by_FISSURE/HAMRS
wget https://hamrs-releases.s3.us-east-2.amazonaws.com/1.0.6/hamrs-1.0.6-linux-x86_64.AppImage
sudo chmod +x hamrs*
########## Verify ##########
ls ~/Installed_by_FISSURE/HAMRS/hamrs*
""",True,'Ham Radio'))

# Binwalk
programs_ubuntu18_04_6.append(('Binwalk',
"""sudo apt-get install -y python3-binwalk binwalk
########## Verify ##########
ls /usr/bin/binwalk
""",True,'Data'))



########################################################################

class InstallDialog2(QtGui.QDialog, form_class2):
    def __init__(self,programs):
        """ Software Selection Dialog
        """
        QtGui.QDialog.__init__(self)
        self.setupUi(self)
        
        # Prevent Resizing/Maximizing
        self.setFixedSize(920, 630)     

        # Hide Progress Bar
        self.progressBar1.hide()
        self.label2_current_item.hide()
        
        # Set Style Sheet
        color1 = "#F4F4F4"
        color2 = "#FBFBFB"
        color3 = "#17365D"
        color4 = "#000000"
        color5 = "#FFFFFF"
        color6 = "#FEFEFE"
        color7 = "#EFEFEF"
        color8 = "#FEFEFE"
        color9 = "#EFEFEF"
        color10 = "#FEFEFE"
        color11 = "#F8F8F8"
        color12 = "#000000"
        color13 = "#C0C0C0"        
        get_css_text = str(open('/' + os.path.dirname(os.path.realpath(__file__)).strip('/Installer') + "/UI/Style_Sheets/light.css","r").read())
        get_css_text = re.sub(r'@color1\b',color1,get_css_text)
        get_css_text = re.sub(r'@color2\b',color2,get_css_text)
        get_css_text = re.sub(r'@color3\b',color3,get_css_text)
        get_css_text = re.sub(r'@color4\b',color4,get_css_text)
        get_css_text = re.sub(r'@color5\b',color5,get_css_text)
        get_css_text = re.sub(r'@color6\b',color6,get_css_text)
        get_css_text = re.sub(r'@color7\b',color7,get_css_text)
        get_css_text = re.sub(r'@color8\b',color8,get_css_text)
        get_css_text = re.sub(r'@color9\b',color9,get_css_text)
        get_css_text = re.sub(r'@color10\b',color10,get_css_text)
        get_css_text = re.sub(r'@color11\b',color11,get_css_text)
        get_css_text = re.sub(r'@color12\b',color12,get_css_text)
        get_css_text = re.sub(r'@color13\b',color13,get_css_text)
        get_css_text = re.sub(r'@unchecked_enabled\b','light-unchecked.png',get_css_text)
        get_css_text = re.sub(r'@checked_enabled\b','light-checked.png',get_css_text)
        get_css_text = re.sub(r'@checked_disabled\b','light-checked-disabled.png',get_css_text)
        get_css_text = re.sub(r'@unchecked_disabled\b','light-unchecked-disabled.png',get_css_text)
        get_css_text = re.sub(r'@down_arrow_enabled\b','light-down-arrow.png',get_css_text)
        get_css_text = re.sub(r'@down_arrow_disabled\b','light-down-arrow-disabled.png',get_css_text)
        get_css_text = re.sub(r'@radio_unchecked_enabled\b','light-radio.png',get_css_text)
        get_css_text = re.sub(r'@radio_checked_enabled\b','light-radio-checked.png',get_css_text)
        get_css_text = get_css_text.replace("@icon_path",'/' + os.path.dirname(os.path.realpath(__file__)).strip('/Installer') + "/docs/Icons")
        get_css_text = get_css_text.replace('@menu_hover_padding','0px')
        self.setStyleSheet(get_css_text)
        
        # Do SIGNAL/Slots Connections
        self._connectSlots()  
        
        # Create Categories
        for c in larger_categories:
            parent = QtGui.QTreeWidgetItem(self.treeWidget_software)
            parent.setText(0,c)
            parent.setFlags(parent.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
            parent.setCheckState(0, QtCore.Qt.Checked)
        
        # Load Checkboxes in Table
        self.programs = programs
        for row in range(0,len(programs)):
            # Subcategories
            if programs[row][3] != None:
                parent_name = programs[row][3]
                
                # Iterate the Tree
                iterator = QtGui.QTreeWidgetItemIterator(self.treeWidget_software)
                while iterator.value():
                    item = iterator.value()
                    if item.text(0) == parent_name:
                        child = QtGui.QTreeWidgetItem(item)
                        child.setFlags(child.flags() | QtCore.Qt.ItemIsUserCheckable)
                        child.setText(0, programs[row][0])
                        if programs[row][2] == True:
                            child.setCheckState(0, QtCore.Qt.Checked)
                        else:
                            child.setCheckState(0, QtCore.Qt.Unchecked)
                        break
                    iterator+=1      
            
            # No Category
            else:            
                parent = QtGui.QTreeWidgetItem(self.treeWidget_software)
                parent.setText(0,programs[row][0])
                parent.setFlags(parent.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
                if programs[row][2] == True:
                    parent.setCheckState(0, QtCore.Qt.Checked)
                else:
                    parent.setCheckState(0, QtCore.Qt.Unchecked)
            
    def _connectSlots(self):
        """ Contains the connect functions for all the signals and slots
        """   
        # Push Buttons
        self.pushButton_ok.clicked.connect(self._slotOK_Clicked)
        self.pushButton_cancel.clicked.connect(self._slotCancelClicked)
        self.pushButton_deselect.clicked.connect(self._slotDeselectClicked)
        self.pushButton_default.clicked.connect(self._slotDefaultClicked)
        self.pushButton_rankings.clicked.connect(self._slotRankingsClicked)
        self.pushButton_expand_all.clicked.connect(self._slotExpandAllClicked)
        self.pushButton_collapse_all.clicked.connect(self._slotCollapseAllClicked)
        
        # Tables
        self.treeWidget_software.clicked.connect(self._slotTableItemClicked)
        
    def _slotOK_Clicked(self):
        """ Install the software.
        """       
        # Find Number of Checked Items and Store Names (prevents checking after starting the install)
        get_checked_items = 0
        iterator = QtGui.QTreeWidgetItemIterator(self.treeWidget_software)
        self.checked_items = []
        while iterator.value():
            item = iterator.value()
            if item.checkState(0) == 2:
                # Ignore Categories
                if item.text(0) not in larger_categories:
                    get_checked_items = get_checked_items + 1
                    self.checked_items.append(item.text(0))     
            iterator+=1   
            
        # Reset the Colors
        iterator = QtGui.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()
            item.setForeground(0,QtGui.QColor('Black'))
            iterator+=1   
            
        # Show Progress Bar
        self.progressBar1.show()
        self.label2_current_item.show()     
        self.progressBar1.setMaximum(get_checked_items+1)
        QtGui.QApplication.processEvents()
        self.pushButton_ok.setEnabled(False)

        # Iterate the Checked Items
        self.checked_index = 0
        for n in range(0,len(self.checked_items)):            
            # Find the Install Code
            for p in range(0,len(self.programs)):
                if self.checked_items[n] == self.programs[p][0]:
                    self.loop = True
                    
                    # Update the Label
                    self.label2_current_item.setText(str(self.checked_items[n]))
            
                    # Split Install Commands and Verifier Commands
                    install_command = self.programs[p][1].split("########## Verify ##########")
                    
                    # Verify Code Found
                    if len(install_command) == 2:
                        self.verify_code = install_command[1]
                    else:
                        self.verify_code = ""
                        
                    self.loadthread = MyThread(install_command[0], self)                        
                    self.loadthread.finished.connect(self.on_finished)
                    self.loadthread.start()
                                      
                    self.progressBar1.setValue(self.checked_index+1)
                    self.checked_index = self.checked_index + 1
                    
                    while self.loop == True:
                        QtGui.QApplication.processEvents()
                        time.sleep(0.1)

        # Finished
        self.progressBar1.setValue(self.checked_index+1)
        print("\nInstall Complete")
        time.sleep(2)
        self.progressBar1.hide()
        self.label2_current_item.hide()
        self.pushButton_ok.setEnabled(True)
        #self.accept()
        
        
    @QtCore.pyqtSlot()
    def on_finished(self):
        """ Proceed to the next program.
        """
        # Verify
        if len(self.verify_code) > 0:
            iterator = QtGui.QTreeWidgetItemIterator(self.treeWidget_software)
            while iterator.value():
                item = iterator.value()
                if item.text(0) == self.checked_items[self.checked_index-1]:
                    # Verify Success
                    try:
                        p1 = subprocess.check_call(self.verify_code, shell=True)
                        print("VERIFY SUCCESS")
                        item.setForeground(0,QtGui.QColor('Green'))
                        
                    # Verify Failure
                    except:
                        print("VERIFY FAILURE")
                        item.setForeground(0,QtGui.QColor('Red'))
                    break
                iterator+=1  
            
        self.loop = False
        
    def _slotCancelClicked(self):
        """ Close everything.
        """
        self.close()
        
    def _slotTableItemClicked(self, item):
        """ Update text edit box with command text when table row is clicked.
        """
        # Clicked Item
        try:
            current_item = self.treeWidget_software.currentItem().text(0)  # Deselect All and checking a box causes an error
        except:
            return  

        # Search Programs
        for p in range(0,len(self.programs)):
            if current_item == self.programs[p][0]:
                self.plainTextEdit_commands.setPlainText(self.programs[p][1])
                break
        
    def _slotDeselectClicked(self):
        """ Unchecks all the checkboxes.
        """
        # Iterate the Tree
        iterator = QtGui.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()
            item.setCheckState(0, QtCore.Qt.Unchecked)
            iterator+=1  
            
    def _slotDefaultClicked(self):
        """ Checks the default checkboxes.
        """
        # Iterate the Tree
        iterator = QtGui.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()            
            for p in range(0,len(self.programs)):
                if item.text(0) == self.programs[p][0]:
                    if self.programs[p][2] == True:
                        item.setCheckState(0, QtCore.Qt.Checked)
                    else:
                        item.setCheckState(0, QtCore.Qt.Unchecked)
                    break           
            iterator+=1  
            
    def _slotRankingsClicked(self):
        """ Opens a window with the programs sorted by size.
        """
        # Extract the Sizes
        sizes = []        
        for p in range(0,len(self.programs)):
            if '(' in self.programs[p][0] and ')' in self.programs[p][0]:
                get_size = self.programs[p][0].split(' (')[-1].replace(')','')
                if get_size.endswith(" GB"):
                    get_size = int(float(get_size[:-3]) * 1024 * 1024 * 1024)
                elif get_size.endswith(" MB"):
                    get_size = int(float(get_size[:-3]) * 1024 * 1024)
                elif get_size.endswith(" kB") or get_size.endswith(" KB"):
                    get_size = int(float(get_size[:-3]) * 1024)
                else:
                    get_size = 0
                sizes.append(get_size)
            else:
                sizes.append(0)
                
        indices = [i[0] for i in sorted(enumerate(sizes), key=lambda x:x[1], reverse=True)]
            
        msg_text = "Top 30:\n"
        count = 0
        for n in indices:
            msg_text = msg_text + "\t" + self.programs[n][0] + "\n"
            count = count + 1
            if count == 30:
                break
            
        msg_text = msg_text + "\n\nTotal (Estimate):\n\t " + str(round(sum(sizes)/(1024*1024*1024),1)) + " GB"
            
        # Create the Message Box
        msgBox = QtGui.QMessageBox()
        msgBox.setText(msg_text)
        msgBox.setStandardButtons(QtGui.QMessageBox.Ok)
        msgBox.setDefaultButton(QtGui.QMessageBox.Ok)
        ret = msgBox.exec_()
        
    def _slotExpandAllClicked(self):
        """ Expands the tree widget.
        """
        # Expand
        self.treeWidget_software.expandAll()
            
    def _slotCollapseAllClicked(self):
        """ Collapses the tree widget.
        """
        # Collapse
        self.treeWidget_software.collapseAll()
            

class MyThread(QtCore.QThread):
    def __init__(self, n, parent=None):
        QtCore.QThread.__init__(self, parent)
        self.n = n

    def run(self):
        try:
            #print self.n
            p1 = subprocess.Popen(self.n, shell=True)
            p1.wait()
        except:
            print "FAILURE"


class InstallDialog1(QtGui.QDialog, form_class):
    def __init__(self):
        """ Operating System Dialog
        """
        QtGui.QDialog.__init__(self)
        self.setupUi(self)
        
        # Prevent Resizing/Maximizing
        self.setFixedSize(240, 245)
        
        # Set Style Sheet
        color1 = "#F4F4F4"
        color2 = "#FBFBFB"
        color3 = "#17365D"
        color4 = "#000000"
        color5 = "#FFFFFF"
        color6 = "#FEFEFE"
        color7 = "#EFEFEF"
        color8 = "#FEFEFE"
        color9 = "#EFEFEF"
        color10 = "#FEFEFE"
        color11 = "#F8F8F8"
        color12 = "#000000"
        color13 = "#C0C0C0"        
        get_css_text = str(open('/' + os.path.dirname(os.path.realpath(__file__)).strip('/Installer') + "/UI/Style_Sheets/light.css","r").read())
        get_css_text = re.sub(r'@color1\b',color1,get_css_text)
        get_css_text = re.sub(r'@color2\b',color2,get_css_text)
        get_css_text = re.sub(r'@color3\b',color3,get_css_text)
        get_css_text = re.sub(r'@color4\b',color4,get_css_text)
        get_css_text = re.sub(r'@color5\b',color5,get_css_text)
        get_css_text = re.sub(r'@color6\b',color6,get_css_text)
        get_css_text = re.sub(r'@color7\b',color7,get_css_text)
        get_css_text = re.sub(r'@color8\b',color8,get_css_text)
        get_css_text = re.sub(r'@color9\b',color9,get_css_text)
        get_css_text = re.sub(r'@color10\b',color10,get_css_text)
        get_css_text = re.sub(r'@color11\b',color11,get_css_text)
        get_css_text = re.sub(r'@color12\b',color12,get_css_text)
        get_css_text = re.sub(r'@color13\b',color13,get_css_text)
        get_css_text = re.sub(r'@unchecked_enabled\b','light-unchecked.png',get_css_text)
        get_css_text = re.sub(r'@checked_enabled\b','light-checked.png',get_css_text)
        get_css_text = re.sub(r'@checked_disabled\b','light-checked-disabled.png',get_css_text)
        get_css_text = re.sub(r'@unchecked_disabled\b','light-unchecked-disabled.png',get_css_text)
        get_css_text = re.sub(r'@down_arrow_enabled\b','light-down-arrow.png',get_css_text)
        get_css_text = re.sub(r'@down_arrow_disabled\b','light-down-arrow-disabled.png',get_css_text)
        get_css_text = re.sub(r'@radio_unchecked_enabled\b','light-radio.png',get_css_text)
        get_css_text = re.sub(r'@radio_checked_enabled\b','light-radio-checked.png',get_css_text)
        get_css_text = get_css_text.replace("@icon_path",'/' + os.path.dirname(os.path.realpath(__file__)).strip('/Installer') + "/docs/Icons")
        get_css_text = get_css_text.replace('@menu_hover_padding','0px')
        self.setStyleSheet(get_css_text)  
        
        # Do SIGNAL/Slots Connections
        self._connectSlots()  
        
        # Detect Operating System
        process = subprocess.Popen('lsb_release -d', shell=True, stdout=subprocess.PIPE)
        stdout = process.communicate()[0]
        
        # Select Radio Button
        if "Ubuntu 18.04.6" in stdout:
            self.radioButton_ubuntu18_04_6.setChecked(True)
        elif "Ubuntu 18.04.5" in stdout:
            self.radioButton_ubuntu18_04_5.setChecked(True)
        elif "Ubuntu 18.04" in stdout:
            self.radioButton_ubuntu18_04.setChecked(True)
        
        self.get_os = ""
        
    def _connectSlots(self):
        """ Contains the connect functions for all the signals and slots
        """   
        # Push Buttons
        self.pushButton_ok.clicked.connect(self._slotOK_Clicked)
        self.pushButton_cancel.clicked.connect(self._slotCancelClicked)
        
    def _slotOK_Clicked(self):
        """ Return to open the second install dialog.
        """        
        # Select Software for Operating System
        if self.radioButton_ubuntu18_04.isChecked():
            self.get_os = "Ubuntu 18.04"
        elif self.radioButton_ubuntu18_04_5.isChecked():
            self.get_os = "Ubuntu 18.04.5"
        elif self.radioButton_ubuntu18_04_6.isChecked():
            self.get_os = "Ubuntu 18.04.6"
            
        self.accept()
        
    def _slotCancelClicked(self):
        """ Close everything.
        """
        self.close()


def main(argv):
    """ The start of everything.
    """   
    app = QtGui.QApplication(argv,True) 
    
    # Operating System Dialog
    install_dlg1 = InstallDialog1()
    install_dlg1.show()	
    
    # OK Clicked
    if install_dlg1.exec_() == QtGui.QDialog.Accepted:
        if install_dlg1.get_os == "Ubuntu 18.04":
            install_dlg2 = InstallDialog2(programs_ubuntu18_04)
        elif install_dlg1.get_os == "Ubuntu 18.04.5":
            install_dlg2 = InstallDialog2(programs_ubuntu18_04_5)
        elif install_dlg1.get_os == "Ubuntu 18.04.6":
            install_dlg2 = InstallDialog2(programs_ubuntu18_04_6)
        # elif install_dlg1.get_os == "Ubuntu 20.04.1":
            # install_dlg2 = InstallDialog2(programs_ubuntu20_04)
        install_dlg2.show()	
        
        # Install Clicked
        if install_dlg2.exec_() == QtGui.QDialog.Accepted:
            pass
        #    print "Install Complete"
            
    sys.exit()
    
 
if __name__ == "__main__":
    main(sys.argv)
