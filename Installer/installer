#!/usr/bin/env python3
from PyQt5 import QtCore, QtGui, uic, QtWidgets

from PyQt5.QtGui import QPainter, QPen, QBrush

import subprocess
import os
import sys
import time

this_file_directory = os.path.dirname(os.path.realpath(__file__))
fissure_directory = os.path.abspath(os.path.join(this_file_directory, os.pardir))

form_class = uic.loadUiType(fissure_directory + "/UI/install.ui")[0]
form_class2 = uic.loadUiType(fissure_directory + "/UI/install2.ui")[0]

# Program Format: ('name','command',checked/default, parent_category)

larger_categories = ['Minimum Install','Hardware','Out-of-Tree Modules']

########################################################################
############################ Ubuntu 20.04.1 ############################
########################################################################

programs_ubuntu20_04 = []

# Misc. Dependencies
programs_ubuntu20_04.append(('Misc. Dependencies',
"""sudo apt-get -y update
sudo apt-get -y install cmake
sudo apt-get install -y python-setuptools python-dev build-essential
sudo apt-get install -y curl
curl https://bootstrap.pypa.io./pip/2.7/get-pip.py | sudo python2  # Installs pip 20.3.4
sudo apt-get install -y python3-pip
sudo python3 -m pip install cmake --upgrade
sudo apt install -y python3-testresources
sudo python3 -m pip install --upgrade setuptools
sudo python3 -m pip install --upgrade virtualenv
sudo python3 -m pip install matplotlib
sudo python3 -m pip install PyYAML==5.1
sudo python3 -m pip install pyyaml
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-scipy/python-scipy_0.19.1-2ubuntu1_amd64.deb
sudo apt-get install -y ./python-scipy_0.19.1-2ubuntu1_amd64.deb
rm python-scipy_0.19.1-2ubuntu1_amd64.deb
sudo apt-get install -y gedit
sudo apt-get install -y software-properties-common #python-software-properties # does Python3
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
sudo apt-get install -y git 
sudo apt-get install -y libcanberra-gtk-module
sudo python3 -m pip install bitarray
sudo apt install net-tools
sudo python3 -m pip install crcmod
sudo python3 -m pip install pycrypto
sudo apt-get install -y python-tk
sudo python3 -m pip install pyzmq
sudo apt-get install -y libosmocore-dev
sudo apt-get install -y liborc-0.4-dev
sudo apt-get install -y expect
sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python3 -m pip install pypcapfile
sudo python2 -m pip install pypcapfile
sudo python2 -m pip install netaddr
sudo python3 -m pip install psutil
sudo python3 -m pip install pyserial
sudo apt-get install -y gpsd-clients python-gi-cairo
sudo python3 -m pip install pandas
sudo apt-get install -y dsniff
sudo cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d  # removes sudo apt-get update warnings
sudo apt-get -y install ncurses-term
. ~/.bashrc
""",True,'Minimum Install'))

# fissure Command 
programs_ubuntu20_04.append(('fissure Command',
"""mkdir -p ~/.local/bin
if grep -Fq "~/.local/bin" ~/.bashrc
then
  echo "~/.local/bin is already in ~/.bashrc"
else
  printf "\\n%s\\n" "export PATH=~/.local/bin:$PATH" >> ~/.bashrc
fi
/bin/echo -e "python3 """ + fissure_directory + """/dashboard.py" > ~/.local/bin/fissure
sudo chmod +x ~/.local/bin/fissure
echo "[Desktop Entry]\nStartupWMClass=dashboard.py\nName=FISSURE\nTerminal=false\nType=Application\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=/home/$USER/.local/bin/fissure" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
. ~/.bashrc
########## Verify ##########
ls ~/.local/bin/fissure
""",True,'Minimum Install'))

# GNU Radio
programs_ubuntu20_04.append(('GNU Radio',
"""sudo apt-get install -y gnuradio
#sudo rm -f /usr/share/mime/packages/gnuradio.xml  # Is this still needed for 20.04.1?
#sudo ln -s /usr/share/gnuradio/grc/freedesktop/gnuradio-grc.xml /usr/share/mime/packages/gnuradio.xml  # Is this still needed for 20.04.1?
#sudo update-mime-database -V /usr/share/mime/  # Is this still needed for 20.04.1?

# Configure GNU Radio
(gnuradio-companion &) && sleep 5 && killall gnuradio-companion
/bin/echo -e "[grc]\nlocal_blocks_path=""" + fissure_directory + """/Custom_Blocks\nxterm_executable=/usr/bin/gnome-terminal" > ~/.gnuradio/config.conf
sudo cp /usr/lib/uhd/utils/uhd-usrp.rules /etc/udev/rules.d/  # For B205 mini
sudo udevadm control --reload-rules
sudo udevadm trigger
sudo mkdir /usr/share/uhd
sudo chmod -R 777 /usr/share/uhd
uhd_images_downloader

# Find OOT Modules
printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3.8/site-packages:/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.bashrc
printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.profile  # For GRC without terminal
printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.profile  # For GRC without terminal
. ~/.bashrc
sudo apt-get install -y libzmq3-dev swig cmake
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig

sudo apt-get install -y libzmq3-dev
sudo apt-get install -y swig
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig
########## Verify ##########
gnuradio-companion --help
""",True,'Minimum Install'))

# Scapy
programs_ubuntu20_04.append(('Scapy',
"""sudo python3 -m pip install scapy
sudo python2 -m pip install scapy
#sudo apt-get install -y scapy
########## Verify ##########
python2 -c "import scapy" && python3 -c "import scapy"
""",True,'Minimum Install'))

# Wireshark
programs_ubuntu20_04.append(('Wireshark',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,'Minimum Install'))

# LimeSDR
programs_ubuntu20_04.append(('LimeSDR',
"""sudo add-apt-repository -y ppa:myriadrf/drivers
sudo apt-get update
sudo apt-get install -y limesuite liblimesuite-dev limesuite-udev limesuite-images
sudo apt-get install -y soapysdr-tools soapysdr-module-lms7
sudo apt-get install -y libboost-all-dev swig
########## Verify ##########
ls /usr/bin/LimeSuiteGUI
""",True,'Hardware'))

# BladeRF
programs_ubuntu20_04.append(('BladeRF',
"""sudo apt-get install -y libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 pkg-config git wget  # no package: libtecla1-dev       
sudo apt-get install -y bladerf
sudo apt-get install -y bladerf-fpga-hostedx115
########## Verify ##########
bladeRF-cli --help
""",True,'Hardware'))

# USRP X300 Series
programs_ubuntu20_04.append(('USRP X300 Series',
"""mkdir -p ~/Installed_by_FISSURE  # Set MTU to 9000 and run uhd_image_loader command
cd ~/Installed_by_FISSURE
wget https://codeload.github.com/EttusResearch/uhd/zip/release_003_010_003_000 -O uhd.zip
unzip uhd.zip
cd uhd-release_003_010_003_000/host/include
sudo cp -Rv uhd/rfnoc /usr/share/uhd/
rm -Rf ~/Installed_by_FISSURE/uhd-release_003_010_003_000
/usr/lib/uhd/utils/uhd_images_downloader.py
#"/usr/bin/uhd_image_loader" --args="type=x300,addr=192.168.40.2"  # Use your X310 IP
sudo sysctl -w net.core.wmem_max=24862979
""",True,'Hardware'))

# HackRF
programs_ubuntu20_04.append(('HackRF',
"""sudo apt-get install -y libusb-1.0-0-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/hackrf-2018.01.1/ ~/Installed_by_FISSURE/
rm -Rf ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
mkdir ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
cd ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
cmake ..
make
sudo make install
sudo ldconfig
sudo cp """ + fissure_directory + """/Tools/53-hackrf.rules /etc/udev/rules.d/53-hackrf.rules
sudo udevadm trigger --action=change
#sudo apt-get install -y hackrf
#pybombs install gr-osmosdr
#sudo apt-get install gr-osmosdr  # Not always found in the repositories
########## Verify ##########
hackrf_sweep --help
""",True,'Hardware'))

# 8812au Driver
programs_ubuntu20_04.append(('8812au Driver',
"""sudo apt-get -y install dkms
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/rtl8812au/
cd ~/Installed_by_FISSURE/rtl8812au
sudo make dkms_install
""",True,'Hardware'))

# Zigbee Sniffer
programs_ubuntu20_04.append(('Zigbee Sniffer',
"""cp -R """ + fissure_directory + """/Tools/OpenSniffer-0.1/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/OpenSniffer-0.1/
sudo python3 setup.py install
sudo add-apt-repository -y ppa:rock-core/qt4  # PyQt4
sudo apt-get update
wget http://archive.ubuntu.com/ubuntu/pool/universe/q/qt-assistant-compat/libqtassistantclient4_4.6.3-7build1_amd64.deb -O ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb 
sudo apt-get install -y ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-qt4/python-qt4_4.12.1+dfsg-2_amd64.deb -O ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
sudo apt-get install -y ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-pyaudio/python-pyaudio_0.2.11-1build2_amd64.deb -O ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
sudo apt-get install -y ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
rm ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
rm ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
rm ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
sudo apt-get install -y mlocate
""",True,'Hardware'))

# fl2k
programs_ubuntu20_04.append(('fl2k',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_ubuntu20_04.append(('Proxmark3',
"""sudo apt-get install -y p7zip git build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libreadline-dev libpcsclite-dev gcc-arm-none-eabi
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# gr-acars
programs_ubuntu20_04.append(('gr-acars',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-acars/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import acars"
""",True,'Out-of-Tree Modules'))

# gr-adsb-master
programs_ubuntu20_04.append(('gr-adsb-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-adsb-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import adsb"
""",True,'Out-of-Tree Modules'))

# gr-ainfosec
programs_ubuntu20_04.append(('gr-ainfosec',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ainfosec/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ainfosec"
""",True,'Out-of-Tree Modules'))

# gr-ais-master
programs_ubuntu20_04.append(('gr-ais-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ais-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ais"
""",True,'Out-of-Tree Modules'))

# gr-bluetooth-maint-3.8
programs_ubuntu20_04.append(('gr-bluetooth-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/libbtbb-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-bluetooth-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/bin/btrx
""",True,'Out-of-Tree Modules'))

# gr-clapper_plus-maint-3.8
programs_ubuntu20_04.append(('gr-clapper_plus-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-clapper_plus-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import clapper_plus"
""",True,'Out-of-Tree Modules'))

# gr-dect2-master
programs_ubuntu20_04.append(('gr-dect2-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-dect2-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import dect2"
""",True,'Out-of-Tree Modules'))

# gr-foo-maint-3.8
programs_ubuntu20_04.append(('gr-foo-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-foo-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import foo"
""",True,'Out-of-Tree Modules'))

# gr-fuzzer
programs_ubuntu20_04.append(('gr-fuzzer',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-fuzzer/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import fuzzer"
""",True,'Out-of-Tree Modules'))

# gr-garage_door-maint-3.8
programs_ubuntu20_04.append(('gr-garage_door-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-garage_door-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import garage_door"
""",True,'Out-of-Tree Modules'))

# gr-gsm-master
programs_ubuntu20_04.append(('gr-gsm-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-gsm-master/
sudo rm -Rf build
sudo apt-get install -y gr-osmosdr
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# gr-gsm needs to be made twice for "import arfcn" block to work
make 
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import grgsm"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-11-maint-3.8
programs_ubuntu20_04.append(('gr-ieee802-11-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-11-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ieee802_11"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4-maint-3.8
programs_ubuntu20_04.append(('gr-ieee802-15-4-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_CSS_PHY.grc
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_OQPSK_PHY.grc
########## Verify ##########
python3 -c "import ieee802_15_4"
""",True,'Out-of-Tree Modules'))

# gr-iridium-maint-3.8
programs_ubuntu20_04.append(('gr-iridium-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-iridium-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import iridium"
""",True,'Out-of-Tree Modules'))

# gr-j2497-maint-3.8
programs_ubuntu20_04.append(('gr-j2497-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-j2497-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import j2497"
""",True,'Out-of-Tree Modules'))

# gr-limesdr-gr-3.8
programs_ubuntu20_04.append(('gr-limesdr-gr-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-limesdr-gr-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import limesdr"
""",True,'Out-of-Tree Modules'))

# gr-nrsc5-maint-3.8
programs_ubuntu20_04.append(('gr-nrsc5-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-nrsc5-maint-3.8/
sudo rm -Rf build
sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import nrsc5"
""",True,'Out-of-Tree Modules'))

# gr-paint-maint-3.8
programs_ubuntu20_04.append(('gr-paint-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-paint-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-paint-maint-3.8/
gcc tgatoluma.c -o tgatoluma
chmod +x tgatoluma
cp tgatoluma ~/.local/bin/
########## Verify ##########
python3 -c "import paint"
""",True,'Out-of-Tree Modules'))

# gr-rds-maint-3.8
programs_ubuntu20_04.append(('gr-rds-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-rds-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import rds"
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore-maint-3.8
programs_ubuntu20_04.append(('gr-tpms_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-tpms_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import tpms_poore"
""",True,'Out-of-Tree Modules'))

# gr-X10-maint-3.8
programs_ubuntu20_04.append(('gr-X10-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-X10-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import X10"
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore-maint-3.8
programs_ubuntu20_04.append(('gr-zwave_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-zwave_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import zwave_poore"
""",True,'Out-of-Tree Modules'))

# QSpectrumAnalyzer
programs_ubuntu20_04.append(('QSpectrumAnalyzer',
"""#sudo add-apt-repository -y ppa:myriadrf/drivers
#sudo apt-get -y update
sudo apt-get install -y python3-pip python3-pyqt5 python3-numpy python3-scipy python3-soapysdr  # No package: soapysdr
sudo apt-get install -y soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7
python3 -m pip install --user qspectrumanalyzer  # log in again, run without sudo
########## Verify ##########
ls ~/.local/bin/qspectrumanalyzer
""",True,None))

# GQRX
programs_ubuntu20_04.append(('GQRX',
"""sudo apt-get install -y gqrx-sdr
########## Verify ##########
ls /usr/bin/gqrx
""",True,None))

# Dump1090
programs_ubuntu20_04.append(('Dump1090',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,None))

# QtDesigner
programs_ubuntu20_04.append(('QtDesigner',
"""sudo apt-get install -y build-essential qtcreator qt5-default
########## Verify ##########
ls /usr/bin/designer
""",True,None))

# Grip
programs_ubuntu20_04.append(('Grip',
"""sudo python3 -m pip install grip
########## Verify ##########
grip --help
""",True,None))

# Kismet
programs_ubuntu20_04.append(('Kismet',
"""sudo apt-get install -y kismet  # add your computer's username to the group
########## Verify ##########
ls /usr/bin/kismet
""",True,None))

# UDP Replay
programs_ubuntu20_04.append(('UDP Replay',
"""sudo apt-get install -y libpcap-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/rigtorp/udpreplay.git
cd ~/Installed_by_FISSURE/udpreplay
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls /usr/local/bin/udpreplay
""",True,None))

# V2Verifier
programs_ubuntu20_04.append(('V2Verifier',
"""sudo apt-get install -y libgmp3-dev python3-tk python3-pil.imagetk
sudo python3 -m pip install fastecdsa
sudo python3 -m pip install -U pyyaml
#sudo apt install -y git cmake libuhd-dev uhd-host swig libgmp3-dev python3-pip python3-tk python3-pil 
#python3-pil.imagetk gnuradio
#Needs gr-foo and gr-ieee802-11
""",True,None))

# # OpenBTS, requires old packages not meant for 20.04
# programs_ubuntu20_04.append(('OpenBTS',
# """sudo apt-get install -y software-properties-common  
# sudo add-apt-repository -y ppa:git-core/ppa
# sudo apt-get update
# sudo apt-get install -y git
# sudo apt-get install -y asterisk
# sudo apt-get install -y twinkle
# sudo apt-get install -y autoconf libtool libosip2-dev libortp-dev libusb-1.0-0-dev g++ sqlite3 libsqlite3-dev erlang libreadline6-dev libncurses5-dev
# mkdir ~/Installed_by_FISSURE/OpenBTS
# cd ~/Installed_by_FISSURE/OpenBTS
# git clone https://github.com/RangeNetworks/dev.git
# cd dev
# ./clone.sh
# ./switchto.sh master
# cd liba53/
# sudo make install
# cd ..
# git clone https://github.com/tom-2015/fakecoredumper.git
# cd fakecoredumper
# chmod +x install.sh
# ./install.sh
# cd ..
# sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/build.sh ./build.sh
# #sudo apt install g++-5 -y
# #sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 
# wget http://archive.ubuntu.com/ubuntu/pool/universe/l/linphone/libortp9_3.6.1-3build1_amd64.deb
# sudo dpkg -i libortp9_3.6.1-3build1_amd64.deb
# wget http://archive.ubuntu.com/ubuntu/pool/universe/s/srtp/libsrtp0_1.4.5~20130609~dfsg-2ubuntu1_amd64.deb
# sudo dpkg -i libsrtp0_1.4.5~20130609~dfsg-2ubuntu1_amd64.deb
# wget http://archive.ubuntu.com/ubuntu/pool/universe/p/pyzmq/python-zmq_16.0.2-2build2_amd64.deb
# sudo dpkg -i python-zmq_16.0.2-2build2_amd64.deb 
# ./build.sh B210
# sudo mkdir /etc/OpenBTS
# cd openbts
# sudo sqlite3 -init ./apps/OpenBTS.example.sql /etc/OpenBTS/OpenBTS.db ".quit"
# #sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/usrp_b210_fpga.bin /usr/share/uhd/images/usrp_b210_fpga.bin
# cd apps
# ln -s ../Transceiver52M/transceiver .
# sudo apt-get install -y sqlitebrowser
# sudo mkdir -p /var/lib/asterisk/sqlite3dir
# cd ../../subscriberRegistry
# make
# cd apps
# cp """ + fissure_directory + """/Tools/openbts_files_18_04/sipauthserve.example.sql sipauthserve.example.sql
# sudo sqlite3 -init sipauthserve.example.sql /etc/OpenBTS/sipauthserve.db ".quit"
# cd ../../smqueue
# autoconf -i
# ./configure
# make
# cp """ + fissure_directory + """/Tools/openbts_files_18_04/smqueue.example.sql smqueue/smqueue.example.sql
# sudo sqlite3 -init smqueue/smqueue.example.sql /etc/OpenBTS/smqueue.db ".quit"
# sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/sip.conf /etc/asterisk/sip.conf
# sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/extensions.conf /etc/asterisk/extensions.conf
# sudo apt-get install -y pcscd pcsc-tools libccid libpcsclite-dev
# cd ~/Installed_by_FISSURE
# git clone git://git.osmocom.org/pysim
# cd pysim
# sudo pip3 install -r requirements.txt
# sudo update-alternatives --remove-all gcc
# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
# """,True))

# srsRAN/srsLTE
programs_ubuntu20_04.append(('srsRAN',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,None))

# FALCON
programs_ubuntu20_04.append(('FALCON',
"""sudo apt-get install -y build-essential git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev  # For srsLTE
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y libglib2.0-dev libudev-dev libcurl4-gnutls-dev libboost-all-dev qtdeclarative5-dev libqt5charts5-dev  # FALCON
git clone https://github.com/falkenber9/falcon.git
cd falcon
mkdir build
cd build
cmake -DFORCE_SUBPROJECT_SRSLTE=ON -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
#sudo xargs rm < install_manifest.txt  # uninstall
#make clean
########## Verify ##########
ls /usr/bin/FalconGUI
""",True,None))

# LTE-ciphercheck
programs_ubuntu20_04.append(('LTE-ciphercheck',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf 
""",True,None))

# Aircrack-ng
programs_ubuntu20_04.append(('Aircrack-ng',
"""sudo apt-get install -y aircrack-ng
########## Verify ##########
aircrack-ng --help
""",True,None))

# Geany
programs_ubuntu20_04.append(('Geany',
"""sudo apt-get install -y geany  # needs [styling] line_height=0;2; added to Tools>Configuration Files>filetypes.common to see underscores
########## Verify ##########
geany --help
""",True,None))

# Arduino IDE
programs_ubuntu20_04.append(('Arduino IDE',
"""wget -P ~/Installed_by_FISSURE/ https://downloads.arduino.cc/arduino-1.8.15-linux64.tar.xz
cd ~/Installed_by_FISSURE
tar -xf arduino-1.8.15-linux64.tar.xz
rm arduino-1.8.15-linux64.tar.xz
cd arduino-1.8.15/
sudo ./install.sh
cp -R """ + fissure_directory + """/Tools/Esp8266_listen_trigger/ ~/Installed_by_FISSURE/
########## Verify ##########
arduino --version
""",True,None))

# Minicom
programs_ubuntu20_04.append(('Minicom',
"""sudo apt-get install -y minicom
########## Verify ##########
ls /usr/bin/minicom
""",True,None))

# PuTTY
programs_ubuntu20_04.append(('PuTTY',
"""sudo apt-get install -y putty
########## Verify ##########
putty --help
""",True,None))

# openHAB
programs_ubuntu20_04.append(('openHAB',
"""sudo apt-get -yq install gnupg curl
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
cd ~/Downloads
curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
sudo apt-get update
sudo apt-get install -y zulu11-jdk
rm zulu-repo_1.0.0-2_all.deb
wget -qO - 'https://openhab.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
sudo apt-get install -y apt-transport-https
echo 'deb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list
sudo apt-get update && sudo apt-get install -y openhab
########## Verify ##########
ls /usr/bin/openhab-cli
""",True,None))

# rtl-zwave
programs_ubuntu20_04.append(('rtl-zwave',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y libpcap-dev
cp -R """ + fissure_directory + """/Tools/rtl-zwave-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/rtl-zwave-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/rtl-zwave-master/rtl_zwave
""",True,None))

# waving-z
programs_ubuntu20_04.append(('waving-z',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/
git clone https://github.com/baol/waving-z.git
cd ~/Installed_by_FISSURE/waving-z
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build .
########## Verify ##########
ls ~/Installed_by_FISSURE/waving-z/build/wave-in
""",True,None))

# baudline
programs_ubuntu20_04.append(('baudline',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://www.baudline.com/baudline_1.08_linux_x86_64.tar.gz
tar -xf baudline_1.08_linux_x86_64.tar.gz
rm baudline_1.08_linux_x86_64.tar.gz
########## Verify ##########
~/Installed_by_FISSURE/baudline_1.08_linux_x86_64/baudline --help
""",True,None))

# Universal Radio Hacker
programs_ubuntu20_04.append(('Universal Radio Hacker',
"""sudo python3 -m pip install cython
sudo python3 -m pip install urh
########## Verify ##########
urh --version
""",True,None))

# Inspectrum
programs_ubuntu20_04.append(('Inspectrum',
"""sudo apt-get install -y inspectrum
########## Verify ##########
inspectrum --help
""",True,None))

# OpenCPN
programs_ubuntu20_04.append(('OpenCPN',
"""sudo add-apt-repository -y ppa:opencpn/opencpn
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C865EB40
sudo apt-get update
sudo apt-get install -y opencpn
########## Verify ##########
ls /usr/bin/opencpn
""",True,None))

# Kalibrate
programs_ubuntu20_04.append(('Kalibrate',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/steve-m/kalibrate-rtl.git
cd kalibrate-rtl
./bootstrap && CXXFLAGS='-W -Wall -O3' ./configure && make
########## Verify ##########
ls ~/Installed_by_FISSURE/kalibrate-rtl/src/kal
""",True,None))

# retrogram-rtlsdr
programs_ubuntu20_04.append(('retrogram-rtlsdr',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y librtlsdr-dev libncurses5-dev libboost-program-options-dev
cp -R """ + fissure_directory + """/Tools/retrogram-rtlsdr-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/retrogram-rtlsdr-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/retrogram-rtlsdr-master/retrogram-rtlsdr
""",True,None))

# RTLSDR-Airband
programs_ubuntu20_04.append(('RTLSDR-Airband',
"""sudo apt-get install -y build-essential cmake pkg-config libmp3lame-dev libshout3-dev libconfig++-dev libfftw3-dev libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/szpajder/RTLSDR-Airband.git
cd RTLSDR-Airband
mkdir build
cd build
cmake ../
make
sudo make install
########## Verify ##########
rtl_airband -h
""",True,None))

# Spektrum
programs_ubuntu20_04.append(('Spektrum',
"""echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/rtl-sdr.conf  # Restart computer to use RTL device
echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", GROUP="adm", MODE="0666"' | sudo tee /etc/udev/rules.d/20.rtlsdr.rules
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/pavels/spektrum/releases/download/2.1.0/spektrum-linux64.tar.gz
tar -xf spektrum-linux64.tar.gz
rm spektrum-linux64.tar.gz
########## Verify ##########
ls ~/Installed_by_FISSURE/spektrum/spektrum
""",True,None))

# SDRTrunk
programs_ubuntu20_04.append(('SDRTrunk',
"""#sudo apt-get -yq install gnupg curl  # Java (if needed)
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
#cd ~/Downloads
#curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
#sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
#sudo apt-get update
#sudo apt-get install -y zulu11-jdk
#rm zulu-repo_1.0.0-2_all.deb
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/DSheirer/sdrtrunk/releases/download/v0.5.0-alpha.6/sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
unzip -q sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
rm sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
########## Verify ##########
ls ~/Installed_by_FISSURE/sdr-trunk-linux-x86_64-v0.5.0-alpha6/bin/sdr-trunk
""",True,None))

# Audio Tools
programs_ubuntu20_04.append(('Audio Tools',
"""sudo apt-get install -y audacity sox lame mpv ffmpeg mplayer
########## Verify ##########
audacity --version && sox --version
""",True,None))

# Video Tools
programs_ubuntu20_04.append(('Video Tools',
"""sudo apt-get install -y snapd
sudo snap install vlc
sudo apt-add-repository -y ppa:maarten-baert/simplescreenrecorder
sudo apt-get update
sudo apt-get install -y simplescreenrecorder
########## Verify ##########
simplescreenrecorder --help
""",True,None))

# radiosonde_auto_rx
programs_ubuntu20_04.append(('radiosonde_auto_rx',
"""sudo apt-get install -y python3 python3-numpy python3-setuptools python3-crcmod python3-requests python3-dateutil python3-pip python3-flask sox git build-essential libtool cmake usbutils libusb-1.0-0-dev rng-tools libsamplerate-dev libatlas3-base libgfortran5
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/projecthorus/radiosonde_auto_rx.git
cd radiosonde_auto_rx/auto_rx
./build.sh
cp station.cfg.example station.cfg
sudo python3 -m pip install -r requirements.txt
########## Verify ##########
ls ~/Installed_by_FISSURE/radiosonde_auto_rx/auto_rx/auto_rx.py
""",True,None))

# SdrGlut
programs_ubuntu20_04.append(('SdrGlut',
"""sudo apt-get install -y librtaudio-dev libsoapysdr-dev libopenal-dev libliquid-dev freeglut3 freeglut3-dev libalut0 libalut-dev libsndfile1-dev 
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/jgaeddert/liquid-dsp.git
cd liquid-dsp/
./bootstrap.sh
./configure
make
sudo make install
sudo ldconfig
cd ~/Installed_by_FISSURE
git clone https://github.com/righthalfplane/SdrGlut.git
cp -f """ + fissure_directory + """/Tools/SdrGlut/firstFile.h ~/Installed_by_FISSURE/SdrGlut/MainSource/
cp -f """ + fissure_directory + """/Tools/SdrGlut/makefileUbunta ~/Installed_by_FISSURE/SdrGlut/makefileUbunta
cd SdrGlut
make -f makefileUbunta
########## Verify ##########
ls ~/Installed_by_FISSURE/SdrGlut/sdrglut.x
""",True,None))

# rehex
programs_ubuntu20_04.append(('rehex',
"""sudo apt-get install -y build-essential git libwxgtk3.0-gtk3-dev libjansson-dev libcapstone-dev liblua5.3-dev lua5.3 lua5.2 libunistring-dev libgtk-3-dev lua-busted
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/solemnwarning/rehex.git
cd rehex
sudo git config --global --add safe.directory """ + os.path.expanduser('~') + """/Installed_by_FISSURE/rehex
sudo cpan Template
sudo make install
########## Verify ##########
ls /usr/local/bin/rehex 
""",True,None))

# ZEPASSD
programs_ubuntu20_04.append(('ZEPASSD',
"""#sudo apt-get install -y # boost.program-options, boost.crc, boost.circular-buffer, libfftw3, libuhd 3.9.5 or later
sudo apt-get install -y libuhd-dev  # Might need to be installed a second time?
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/pvachon/zepassd.git
cd zepassd
make
########## Verify ##########
ls ~/Installed_by_FISSURE/zepassd/zepassd
""",True,None))

# iridium-toolkit
programs_ubuntu20_04.append(('iridium-toolkit',
"""#Python (2.7), NumPy (scipy), crcmod
sudo apt-get install -y mplayer
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/muccc/iridium-toolkit.git
git clone git://git.osmocom.org/osmo-ir77
cd osmo-ir77/codec/
sudo make
cp ir77_ambe_decode ~/Installed_by_FISSURE/iridium-toolkit/
########## Verify ##########
ls ~/Installed_by_FISSURE/osmo-ir77/codec/ir77_ambe_decode
""",True,None))

# IridiumLive
programs_ubuntu20_04.append(('IridiumLive',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/microp11/iridiumlive.git
wget -P ~/Installed_by_FISSURE/ https://github.com/microp11/iridiumlive/releases/download/v1.2/linux-x64.zip
unzip -q linux-x64.zip
rm linux-x64.zip
cd linux-x64
sudo chmod +x IridiumLive
########## Verify ##########
ls ~/Installed_by_FISSURE/linux-x64/IridiumLive
""",True,None))

# NETATTACK2
programs_ubuntu20_04.append(('NETATTACK2',
"""#sudo pip install netifaces  # fix for python2
#sudo apt-get install -y python-scapy python-nmap python-nfqueue nmap  # this needs to be fixed, can it still run with python2?
sudo python2 -m pip install netifaces
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/chrizator/netattack2.git
sudo python2 -m pip install nmap
cd netattack2
wget http://archive.ubuntu.com/ubuntu/pool/universe/libn/libnetfilter-queue/libnetfilter-queue1_1.0.2-2_amd64.deb
sudo dpkg -i libnetfilter-queue1_1.0.2-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/n/nfqueue-bindings/python-nfqueue_0.6-1build2_amd64.deb
sudo dpkg -i python-nfqueue_0.6-1build2_amd64.deb 
""",True,None))

# Wifite
programs_ubuntu20_04.append(('Wifite',
"""# python, iwconfig, ifconfig, Aircrack-ng, tshark, reaver, bully, coWPAtty, pyrit, hashcat, hcxdumptool, hcxpcaptool
sudo apt-get install -y build-essential libpcap-dev aircrack-ng pixiewps libssl-dev hashcat libcurl4-openssl-dev pkg-config macchanger
sudo python3 -m pip install psycopg2-binary scapy
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/derv82/wifite2.git
git clone https://github.com/t6x/reaver-wps-fork-t6x
cd reaver-wps-fork-t6x/src
./configure
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/aanarchyy/bully
cd bully/src
make
sudo make install
cd ~/Installed_by_FISSURE
wget http://www.willhackforsushi.com/code/cowpatty/4.6/cowpatty-4.6.tgz
tar zxfv cowpatty-4.6.tgz
rm cowpatty-4.6.tgz
cd cowpatty-4.6
make
sudo cp cowpatty /usr/bin
cd ~/Installed_by_FISSURE
mkdir Pyrit-v0.5.0
cd Pyrit-v0.5.0
wget https://github.com/JPaulMora/Pyrit/releases/download/v0.5.0/Pyrit-v0.5.0.zip
unzip -q Pyrit-v0.5.0.zip
rm Pyrit-v0.5.0.zip
sudo apt-get install -y python2-dev
python2 setup.py clean
python2 setup.py build
sudo python2 setup.py install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxdumptool.git
cd hcxdumptool
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxtools.git
cd hcxtools
make
sudo make install
sudo ln -s /usr/bin/hcxpcapngtool /usr/bin/hcxpcaptool
#sudo apt-get install -y tshark
########## Verify ##########
~/Installed_by_FISSURE/wifite2/Wifite.py --help
""",True,None))

# rtl_433
programs_ubuntu20_04.append(('rtl_433',
"""#sudo apt-get install -y rtl-433
sudo apt-get install -y libtool libusb-1.0-0-dev librtlsdr-dev rtl-sdr build-essential cmake pkg-config
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/merbanan/rtl_433.git
cd rtl_433/
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
rtl_433 -help
""",True,None))

# RouterSploit
programs_ubuntu20_04.append(('RouterSploit',
"""sudo apt-get install -y python3-pip libglib2.0-dev rustc
sudo python3 -m pip install setuptools-rust
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/threat9/routersploit
cd routersploit
python3 -m pip install setuptools
python3 -m pip install -r requirements.txt
python3 -m pip install bluepy
########## Verify ##########
~/Installed_by_FISSURE/routersploit/rsf.py --help
""",True,None))

# Metasploit
programs_ubuntu20_04.append(('Metasploit',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
mkdir metasploit
cd metasploit
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
########## Verify ##########
ls /usr/bin/msfconsole
""",True,None))

# monitor_rtl433
programs_ubuntu20_04.append(('monitor_rtl433',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mcbridejc/monitor_rtl433.git
cd monitor_rtl433
sudo python3 setup.py install
sudo python3 -m pip install python-dateutil
sudo python3 -m pip install flask_table
########## Verify ##########
ls /usr/bin/monitor_rtl433
""",True,None))

# scan-ssid
programs_ubuntu20_04.append(('scan-ssid',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y iw
git clone https://github.com/Resethel/scan-ssid.git
cd scan-ssid
sudo cp scan-ssid /usr/local/bin
sudo chmod 755 /usr/local/bin/scan-ssid  # can't be in monitor mode, managed only
########## Verify ##########
scan-ssid --help
""",True,None))

# minimodem
programs_ubuntu20_04.append(('minimodem',
"""sudo apt-get install -y minimodem
########## Verify ##########
minimodem --version
""",True,None))

# WSJT-X
programs_ubuntu20_04.append(('WSJT-X',
"""sudo apt-get install -y wsjtx
########## Verify ##########
ls /usr/bin/wsjtx
""",True,None))

# Google Earth Pro
programs_ubuntu20_04.append(('Google Earth Pro',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
sudo dpkg -i google-earth-pro-stable_current_amd64.deb
########## Verify ##########
ls /usr/bin/google-earth-pro
""",True,None))

# gr-air-modes
programs_ubuntu20_04.append(('gr-air-modes',
"""sudo apt-get install -y gr-air-modes
########## Verify ##########
modes_rx --help
""",True,None))

# ESP8266 Deauther v2
programs_ubuntu20_04.append(('ESP8266 Deauther v2',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/SpacehuhnTech/esp8266_deauther/archive/v2.zip
unzip -q v2.zip
rm v2.zip
""",True,None))

# Viking
programs_ubuntu20_04.append(('Viking',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.code.sf.net/p/viking/code viking
sudo apt install -y gtk-doc-tools docbook-xsl yelp-tools libpng-dev libgtk-3-dev libicu-dev libjson-glib-dev intltool
sudo apt-get install -y libcurl4-gnutls-dev libglib2.0-dev-bin
sudo apt-get install -y libsqlite3-dev nettle-dev libmapnik-dev libgeoclue-2-dev libgexiv2-dev libgps-dev libmagic-dev libbz2-dev libzip-dev liboauth-dev
sudo apt-get install -y autopoint libnova-dev
cd viking
./autogen.sh
./configure
make
sudo make install
########## Verify ##########
viking --help
""",True,None))

# PyGPSClient
programs_ubuntu20_04.append(('PyGPSClient',
"""sudo apt install -y python3-pip python3-tk python3-pil python3-pil.imagetk
sudo python3 -m pip install --upgrade PyGPSClient
########## Verify ##########
ls /usr/local/bin/pygpsclient
""",True,None))

# Gpredict
programs_ubuntu20_04.append(('Gpredict',
"""sudo apt-get install -y gpredict
########## Verify ##########
gpredict --help
""",True,None))

# FoxtrotGPS
programs_ubuntu20_04.append(('FoxtrotGPS',
"""sudo apt-get install -y foxtrotgps
########## Verify ##########
foxtrotgps --help
""",True,None))

# multimon-ng
programs_ubuntu20_04.append(('multimon-ng',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/EliasOenal/multimonNG.git
cd multimonNG
mkdir build
cd build
qmake ../multimon-ng.pro
make
sudo make install
########## Verify ##########
ls /usr/local/bin/multimon-ng
""",True,None))

# Xastir
programs_ubuntu20_04.append(('Xastir',
"""sudo apt-get install -y xastir  # should non-superusers be allowed? sure, why not.
########## Verify ##########
sudo xastir -V
""",True,None))

# LTE-Cell-Scanner
programs_ubuntu20_04.append(('LTE-Cell-Scanner',
"""sudo apt-get install -y cmake libncurses5-dev liblapack-dev libblas-dev libboost-thread-dev libboost-system-dev libitpp-dev librtlsdr-dev libfftw3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/JiaoXianjun/LTE-Cell-Scanner.git
cd LTE-Cell-Scanner
mkdir build
cd build
cmake ..
make 
sudo make install
########## Verify ##########
ls /usr/local/bin/CellSearch
""",True,None))

# btscanner
programs_ubuntu20_04.append(('btscanner',
"""sudo apt-get install -y btscanner
########## Verify ##########
btscanner --help
""",True,None))

# hcidump
programs_ubuntu20_04.append(('hcidump',
"""sudo apt-get install -y bluez-hcidump
########## Verify ##########
hcidump --help
""",True,None))

# GraphicsMagick
programs_ubuntu20_04.append(('GraphicsMagick',
"""sudo apt-get install -y graphicsmagick-imagemagick-compat
########## Verify ##########
gm -help
""",True,None))

# Spectrum Painter
programs_ubuntu20_04.append(('Spectrum Painter',
"""sudo python3 -m pip install numpy imageio 
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/polygon/spectrum_painter.git
#cd spectrum_painter/
#pip3 install --user -e .  # call with "python3 -m spectrum_painter.img2iqstream"
""",True,None))

# nrsc5 and nrsc5-gui
programs_ubuntu20_04.append(('nrsc5',
"""sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/theori-io/nrsc5.git
cd nrsc5
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# nrsc5-gui
python3 -m pip install --upgrade Pillow
python3 -m pip install pyaudio
sudo apt-get install -y python-gobject
cd ~/Installed_by_FISSURE
git clone https://github.com/cmnybo/nrsc5-gui.git
########## Verify ##########
nrsc5 -v
""",True,None))

# # HAM2MON  # Doesn't work for 20.04
# programs_ubuntu20_04.append(('HAM2MON',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/madengr/ham2mon.git
# """,True,None))

# Anki
programs_ubuntu20_04.append(('Anki',
"""sudo apt-get install -y anki
########## Verify ##########
anki -h
""",True,None))

# Bless
programs_ubuntu20_04.append(('Bless',
"""sudo apt-get install -y bless
########## Verify ##########
ls /usr/bin/bless
""",True,None))

# trackerjacker
programs_ubuntu20_04.append(('trackerjacker',
"""sudo python3 -m pip install trackerjacker  # Downgrades Python3 Scapy from 2.4.5 to 2.4.0
########## Verify ##########
sudo trackerjacker --help
""",True,None))

# airgeddon
programs_ubuntu20_04.append(('airgeddon',
"""sudo apt-get install -y crunch mdk3 hostapd lighttpd ruby-dev xterm isc-dhcp-server ettercap-text-only john
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone --depth 1 https://github.com/v1s1t0r1sh3r3/airgeddon.git
#asleap
mkdir asleap
cd asleap
wget http://http.kali.org/pool/main/a/asleap/asleap_2.3~git20201128.254acab-0kali1_amd64.deb
sudo dpkg -i asleap_2.3~git20201128.254acab-0kali1_amd64.deb
#bettercap
sudo apt-get install -y build-essential libpcap-dev net-tools 
cd ~/Installed_by_FISSURE
mkdir bettercap
cd bettercap
wget https://github.com/bettercap/bettercap/releases/download/v2.31.1/bettercap_linux_amd64_v2.31.1.zip
unzip -q bettercap_linux_amd64_v2.31.1.zip
rm bettercap_linux_amd64_v2.31.1.zip
sudo cp bettercap /usr/bin/
#mdk4
sudo apt-get install -y libnl-genl-3-dev
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/mdk4
cd mdk4
make
sudo make install
""",True,None))

# Hydra
programs_ubuntu20_04.append(('Hydra',
"""sudo apt-get install -y hydra
########## Verify ##########
ls /usr/bin/hydra
""",True,None))

# Enscribe
programs_ubuntu20_04.append(('Enscribe',
"""sudo apt-get install -y enscribe
########## Verify ##########
ls /usr/bin/enscribe
""",True,None))

# ESP32 Bluetooth Classic Sniffer - FIX
programs_ubuntu20_04.append(('ESP32 BT Classic Sniffer',
"""mkdir -p ~/Installed_by_FISSURE  # Requires Wireshark 3.4, cannot get it to work with other versions
cd ~/Installed_by_FISSURE
#git clone https://github.com/Matheus-Garbelini/esp32_bluetooth_classic_sniffer
#cd esp32_bluetooth_classic_sniffer
#sudo ./requirements.sh
#./build.sh
##sudo cp dissectors/h4bcm.so /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.4/epan/  # Needs to go where "sudo Wireshark" dissectors are located, check Wireshark version for 3.4
#rm ~/.local/lib/wireshark/plugins/3.4/epan/h4bcm.so  # To avoid "plugin 'h4bcm.so' was found in multiple directories" warning
""",False,None))



########################################################################
############################ Ubuntu 20.04.4 ############################
########################################################################

programs_ubuntu20_04_4 = []

# Misc. Dependencies
programs_ubuntu20_04_4.append(('Misc. Dependencies',
"""sudo apt-get -y update
sudo apt-get -y install cmake
sudo apt-get install -y python-setuptools python-dev build-essential
sudo apt-get install -y curl
curl https://bootstrap.pypa.io./pip/2.7/get-pip.py | sudo python2  # Installs pip 20.3.4
sudo apt-get install -y python3-pip
sudo python3 -m pip install cmake --upgrade
sudo apt install -y python3-testresources
sudo python3 -m pip install --upgrade setuptools
sudo python3 -m pip install --upgrade virtualenv
sudo python3 -m pip install matplotlib
sudo python3 -m pip install PyYAML==5.1
sudo python3 -m pip install pyyaml
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-scipy/python-scipy_0.19.1-2ubuntu1_amd64.deb
sudo apt-get install -y ./python-scipy_0.19.1-2ubuntu1_amd64.deb
rm python-scipy_0.19.1-2ubuntu1_amd64.deb
sudo apt-get install -y gedit
sudo apt-get install -y software-properties-common #python-software-properties # does Python3
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
sudo apt-get install -y git 
sudo apt-get install -y libcanberra-gtk-module
sudo python3 -m pip install bitarray
sudo apt install net-tools
sudo python3 -m pip install crcmod
sudo python3 -m pip install pycrypto
sudo apt-get install -y python-tk
sudo python3 -m pip install pyzmq
sudo apt-get install -y libosmocore-dev
sudo apt-get install -y liborc-0.4-dev
sudo apt-get install -y expect
sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python3 -m pip install pypcapfile
sudo python2 -m pip install pypcapfile
sudo python2 -m pip install netaddr
sudo python3 -m pip install psutil
sudo python3 -m pip install pyserial
sudo apt-get install -y gpsd-clients python-gi-cairo
sudo python3 -m pip install pandas
sudo apt-get install -y dsniff
sudo cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d  # removes sudo apt-get update warnings
sudo apt-get -y install ncurses-term
. ~/.bashrc
""",True,'Minimum Install'))

# fissure Command 
programs_ubuntu20_04_4.append(('fissure Command',
"""mkdir -p ~/.local/bin
if grep -Fq "~/.local/bin" ~/.bashrc
then
  echo "~/.local/bin is already in ~/.bashrc"
else
  printf "\\n%s\\n" "export PATH=~/.local/bin:$PATH" >> ~/.bashrc
fi
/bin/echo -e "python3 """ + fissure_directory + """/dashboard.py" > ~/.local/bin/fissure
sudo chmod +x ~/.local/bin/fissure
echo "[Desktop Entry]\nStartupWMClass=dashboard.py\nName=FISSURE\nTerminal=false\nType=Application\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=/home/$USER/.local/bin/fissure" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
. ~/.bashrc
########## Verify ##########
ls ~/.local/bin/fissure
""",True,'Minimum Install'))

# GNU Radio
programs_ubuntu20_04_4.append(('GNU Radio',
"""sudo apt-get install -y gnuradio
#sudo rm -f /usr/share/mime/packages/gnuradio.xml  # Is this still needed for 20.04.1?
#sudo ln -s /usr/share/gnuradio/grc/freedesktop/gnuradio-grc.xml /usr/share/mime/packages/gnuradio.xml  # Is this still needed for 20.04.1?
#sudo update-mime-database -V /usr/share/mime/  # Is this still needed for 20.04.1?

# Configure GNU Radio
(gnuradio-companion &) && sleep 5 && killall gnuradio-companion
/bin/echo -e "[grc]\nlocal_blocks_path=""" + fissure_directory + """/Custom_Blocks\nxterm_executable=/usr/bin/gnome-terminal" > ~/.gnuradio/config.conf
sudo cp /usr/lib/uhd/utils/uhd-usrp.rules /etc/udev/rules.d/  # For B205 mini
sudo udevadm control --reload-rules
sudo udevadm trigger
sudo mkdir /usr/share/uhd
sudo chmod -R 777 /usr/share/uhd
uhd_images_downloader

# Find OOT Modules
printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3.8/site-packages:/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.bashrc
printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.profile  # For GRC without terminal
printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.profile  # For GRC without terminal
. ~/.bashrc
sudo apt-get install -y libzmq3-dev swig cmake
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig

sudo apt-get install -y libzmq3-dev
sudo apt-get install -y swig
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig
########## Verify ##########
gnuradio-companion --help
""",True,'Minimum Install'))

# Scapy
programs_ubuntu20_04_4.append(('Scapy',
"""sudo python3 -m pip install scapy
sudo python2 -m pip install scapy
#sudo apt-get install -y scapy
########## Verify ##########
python2 -c "import scapy" && python3 -c "import scapy"
""",True,'Minimum Install'))

# Wireshark
programs_ubuntu20_04_4.append(('Wireshark',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,'Minimum Install'))

# LimeSDR
programs_ubuntu20_04_4.append(('LimeSDR',
"""sudo add-apt-repository -y ppa:myriadrf/drivers
sudo apt-get update
sudo apt-get install -y limesuite liblimesuite-dev limesuite-udev limesuite-images
sudo apt-get install -y soapysdr-tools soapysdr-module-lms7
sudo apt-get install -y libboost-all-dev swig
########## Verify ##########
ls /usr/bin/LimeSuiteGUI
""",True,'Hardware'))

# BladeRF
programs_ubuntu20_04_4.append(('BladeRF',
"""sudo apt-get install -y libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 pkg-config git wget  # no package: libtecla1-dev       
sudo apt-get install -y bladerf
sudo apt-get install -y bladerf-fpga-hostedx115
########## Verify ##########
bladeRF-cli --help
""",True,'Hardware'))

# USRP X300 Series
programs_ubuntu20_04_4.append(('USRP X300 Series',
"""mkdir -p ~/Installed_by_FISSURE  # Set MTU to 9000 and run uhd_image_loader command
cd ~/Installed_by_FISSURE
wget https://codeload.github.com/EttusResearch/uhd/zip/release_003_010_003_000 -O uhd.zip
unzip uhd.zip
cd uhd-release_003_010_003_000/host/include
sudo cp -Rv uhd/rfnoc /usr/share/uhd/
rm -Rf ~/Installed_by_FISSURE/uhd-release_003_010_003_000
/usr/lib/uhd/utils/uhd_images_downloader.py
#"/usr/bin/uhd_image_loader" --args="type=x300,addr=192.168.40.2"  # Use your X310 IP
sudo sysctl -w net.core.wmem_max=24862979
""",True,'Hardware'))

# HackRF
programs_ubuntu20_04_4.append(('HackRF',
"""sudo apt-get install -y libusb-1.0-0-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/hackrf-2018.01.1/ ~/Installed_by_FISSURE/
rm -Rf ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
mkdir ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
cd ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
cmake ..
make
sudo make install
sudo ldconfig
sudo cp """ + fissure_directory + """/Tools/53-hackrf.rules /etc/udev/rules.d/53-hackrf.rules
sudo udevadm trigger --action=change
#sudo apt-get install -y hackrf
#pybombs install gr-osmosdr
#sudo apt-get install gr-osmosdr  # Not always found in the repositories
########## Verify ##########
hackrf_sweep --help
""",True,'Hardware'))

# 8812au Driver
programs_ubuntu20_04_4.append(('8812au Driver',
"""sudo apt-get -y install dkms
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/rtl8812au/
cd ~/Installed_by_FISSURE/rtl8812au
sudo make dkms_install
""",True,'Hardware'))

# Zigbee Sniffer
programs_ubuntu20_04_4.append(('Zigbee Sniffer',
"""cp -R """ + fissure_directory + """/Tools/OpenSniffer-0.1/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/OpenSniffer-0.1/
sudo python3 setup.py install
sudo add-apt-repository -y ppa:rock-core/qt4  # PyQt4
sudo apt-get update
wget http://archive.ubuntu.com/ubuntu/pool/universe/q/qt-assistant-compat/libqtassistantclient4_4.6.3-7build1_amd64.deb -O ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb 
sudo apt-get install -y ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-qt4/python-qt4_4.12.1+dfsg-2_amd64.deb -O ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
sudo apt-get install -y ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-pyaudio/python-pyaudio_0.2.11-1build2_amd64.deb -O ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
sudo apt-get install -y ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
rm ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
rm ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
rm ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
sudo apt-get install -y mlocate
""",True,'Hardware'))

# fl2k
programs_ubuntu20_04_4.append(('fl2k',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_ubuntu20_04_4.append(('Proxmark3',
"""sudo apt-get install -y p7zip git build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libreadline-dev libpcsclite-dev gcc-arm-none-eabi
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# gr-acars
programs_ubuntu20_04_4.append(('gr-acars',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-acars/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import acars"
""",True,'Out-of-Tree Modules'))

# gr-adsb-master
programs_ubuntu20_04_4.append(('gr-adsb-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-adsb-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import adsb"
""",True,'Out-of-Tree Modules'))

# gr-ainfosec
programs_ubuntu20_04_4.append(('gr-ainfosec',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ainfosec/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ainfosec"
""",True,'Out-of-Tree Modules'))

# gr-ais-master
programs_ubuntu20_04_4.append(('gr-ais-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ais-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ais"
""",True,'Out-of-Tree Modules'))

# gr-bluetooth-maint-3.8
programs_ubuntu20_04_4.append(('gr-bluetooth-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/libbtbb-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-bluetooth-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
ls /usr/local/bin/btrx
""",True,'Out-of-Tree Modules'))

# gr-clapper_plus-maint-3.8
programs_ubuntu20_04_4.append(('gr-clapper_plus-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-clapper_plus-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import clapper_plus"
""",True,'Out-of-Tree Modules'))

# gr-dect2-master
programs_ubuntu20_04_4.append(('gr-dect2-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-dect2-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import dect2"
""",True,'Out-of-Tree Modules'))

# gr-foo-maint-3.8
programs_ubuntu20_04_4.append(('gr-foo-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-foo-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import foo"
""",True,'Out-of-Tree Modules'))

# gr-fuzzer
programs_ubuntu20_04_4.append(('gr-fuzzer',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-fuzzer/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import fuzzer"
""",True,'Out-of-Tree Modules'))

# gr-garage_door-maint-3.8
programs_ubuntu20_04_4.append(('gr-garage_door-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-garage_door-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import garage_door"
""",True,'Out-of-Tree Modules'))

# gr-gsm-master
programs_ubuntu20_04_4.append(('gr-gsm-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-gsm-master/
sudo rm -Rf build
sudo apt-get install -y gr-osmosdr
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# gr-gsm needs to be made twice for "import arfcn" block to work
make 
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import grgsm"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-11-maint-3.8
programs_ubuntu20_04_4.append(('gr-ieee802-11-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-11-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ieee802_11"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4-maint-3.8
programs_ubuntu20_04_4.append(('gr-ieee802-15-4-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_CSS_PHY.grc
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_OQPSK_PHY.grc
########## Verify ##########
python3 -c "import ieee802_15_4"
""",True,'Out-of-Tree Modules'))

# gr-iridium-maint-3.8
programs_ubuntu20_04_4.append(('gr-iridium-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-iridium-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import iridium"
""",True,'Out-of-Tree Modules'))

# gr-j2497-maint-3.8
programs_ubuntu20_04_4.append(('gr-j2497-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-j2497-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import j2497"
""",True,'Out-of-Tree Modules'))

# gr-limesdr-gr-3.8
programs_ubuntu20_04_4.append(('gr-limesdr-gr-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-limesdr-gr-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import limesdr"
""",True,'Out-of-Tree Modules'))

# gr-nrsc5-maint-3.8
programs_ubuntu20_04_4.append(('gr-nrsc5-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-nrsc5-maint-3.8/
sudo rm -Rf build
sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import nrsc5"
""",True,'Out-of-Tree Modules'))

# gr-paint-maint-3.8
programs_ubuntu20_04_4.append(('gr-paint-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-paint-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-paint-maint-3.8/
gcc tgatoluma.c -o tgatoluma
chmod +x tgatoluma
cp tgatoluma ~/.local/bin/
########## Verify ##########
python3 -c "import paint"
""",True,'Out-of-Tree Modules'))

# gr-rds-maint-3.8
programs_ubuntu20_04_4.append(('gr-rds-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-rds-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import rds"
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore-maint-3.8
programs_ubuntu20_04_4.append(('gr-tpms_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-tpms_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import tpms_poore"
""",True,'Out-of-Tree Modules'))

# gr-X10-maint-3.8
programs_ubuntu20_04_4.append(('gr-X10-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-X10-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import X10"
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore-maint-3.8
programs_ubuntu20_04_4.append(('gr-zwave_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-zwave_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import zwave_poore"
""",True,'Out-of-Tree Modules'))

# QSpectrumAnalyzer
programs_ubuntu20_04_4.append(('QSpectrumAnalyzer',
"""#sudo add-apt-repository -y ppa:myriadrf/drivers
#sudo apt-get -y update
sudo apt-get install -y python3-pip python3-pyqt5 python3-numpy python3-scipy python3-soapysdr  # No package: soapysdr
sudo apt-get install -y soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7
python3 -m pip install --user qspectrumanalyzer  # log in again, run without sudo
########## Verify ##########
ls ~/.local/bin/qspectrumanalyzer
""",True,None))

# GQRX
programs_ubuntu20_04_4.append(('GQRX',
"""sudo apt-get install -y gqrx-sdr
########## Verify ##########
ls /usr/bin/gqrx
""",True,None))

# Dump1090
programs_ubuntu20_04_4.append(('Dump1090',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,None))

# QtDesigner
programs_ubuntu20_04_4.append(('QtDesigner',
"""sudo apt-get install -y build-essential qtcreator qt5-default
########## Verify ##########
ls /usr/bin/designer
""",True,None))

# Grip
programs_ubuntu20_04_4.append(('Grip',
"""sudo python3 -m pip install grip
########## Verify ##########
grip --help
""",True,None))

# Kismet
programs_ubuntu20_04_4.append(('Kismet',
"""sudo apt-get install -y kismet  # add your computer's username to the group
########## Verify ##########
ls /usr/bin/kismet
""",True,None))

# UDP Replay
programs_ubuntu20_04_4.append(('UDP Replay',
"""sudo apt-get install -y libpcap-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/rigtorp/udpreplay.git
cd ~/Installed_by_FISSURE/udpreplay
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls /usr/local/bin/udpreplay
""",True,None))

# V2Verifier
programs_ubuntu20_04_4.append(('V2Verifier',
"""sudo apt-get install -y libgmp3-dev python3-tk python3-pil.imagetk
sudo python3 -m pip install fastecdsa
sudo python3 -m pip install -U pyyaml
#sudo apt install -y git cmake libuhd-dev uhd-host swig libgmp3-dev python3-pip python3-tk python3-pil 
#python3-pil.imagetk gnuradio
#Needs gr-foo and gr-ieee802-11
""",True,None))

# # OpenBTS, requires old packages not meant for 20.04
# programs_ubuntu20_04_4.append(('OpenBTS',
# """sudo apt-get install -y software-properties-common  
# sudo add-apt-repository -y ppa:git-core/ppa
# sudo apt-get update
# sudo apt-get install -y git
# sudo apt-get install -y asterisk
# sudo apt-get install -y twinkle
# sudo apt-get install -y autoconf libtool libosip2-dev libortp-dev libusb-1.0-0-dev g++ sqlite3 libsqlite3-dev erlang libreadline6-dev libncurses5-dev
# mkdir ~/Installed_by_FISSURE/OpenBTS
# cd ~/Installed_by_FISSURE/OpenBTS
# git clone https://github.com/RangeNetworks/dev.git
# cd dev
# ./clone.sh
# ./switchto.sh master
# cd liba53/
# sudo make install
# cd ..
# git clone https://github.com/tom-2015/fakecoredumper.git
# cd fakecoredumper
# chmod +x install.sh
# ./install.sh
# cd ..
# sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/build.sh ./build.sh
# #sudo apt install g++-5 -y
# #sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 
# wget http://archive.ubuntu.com/ubuntu/pool/universe/l/linphone/libortp9_3.6.1-3build1_amd64.deb
# sudo dpkg -i libortp9_3.6.1-3build1_amd64.deb
# wget http://archive.ubuntu.com/ubuntu/pool/universe/s/srtp/libsrtp0_1.4.5~20130609~dfsg-2ubuntu1_amd64.deb
# sudo dpkg -i libsrtp0_1.4.5~20130609~dfsg-2ubuntu1_amd64.deb
# wget http://archive.ubuntu.com/ubuntu/pool/universe/p/pyzmq/python-zmq_16.0.2-2build2_amd64.deb
# sudo dpkg -i python-zmq_16.0.2-2build2_amd64.deb 
# ./build.sh B210
# sudo mkdir /etc/OpenBTS
# cd openbts
# sudo sqlite3 -init ./apps/OpenBTS.example.sql /etc/OpenBTS/OpenBTS.db ".quit"
# #sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/usrp_b210_fpga.bin /usr/share/uhd/images/usrp_b210_fpga.bin
# cd apps
# ln -s ../Transceiver52M/transceiver .
# sudo apt-get install -y sqlitebrowser
# sudo mkdir -p /var/lib/asterisk/sqlite3dir
# cd ../../subscriberRegistry
# make
# cd apps
# cp """ + fissure_directory + """/Tools/openbts_files_18_04/sipauthserve.example.sql sipauthserve.example.sql
# sudo sqlite3 -init sipauthserve.example.sql /etc/OpenBTS/sipauthserve.db ".quit"
# cd ../../smqueue
# autoconf -i
# ./configure
# make
# cp """ + fissure_directory + """/Tools/openbts_files_18_04/smqueue.example.sql smqueue/smqueue.example.sql
# sudo sqlite3 -init smqueue/smqueue.example.sql /etc/OpenBTS/smqueue.db ".quit"
# sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/sip.conf /etc/asterisk/sip.conf
# sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/extensions.conf /etc/asterisk/extensions.conf
# sudo apt-get install -y pcscd pcsc-tools libccid libpcsclite-dev
# cd ~/Installed_by_FISSURE
# git clone git://git.osmocom.org/pysim
# cd pysim
# sudo pip3 install -r requirements.txt
# sudo update-alternatives --remove-all gcc
# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
# """,True))

# srsRAN/srsLTE
programs_ubuntu20_04_4.append(('srsRAN',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,None))

# FALCON
programs_ubuntu20_04_4.append(('FALCON',
"""sudo apt-get install -y build-essential git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev  # For srsLTE
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y libglib2.0-dev libudev-dev libcurl4-gnutls-dev libboost-all-dev qtdeclarative5-dev libqt5charts5-dev  # FALCON
git clone https://github.com/falkenber9/falcon.git
cd falcon
mkdir build
cd build
cmake -DFORCE_SUBPROJECT_SRSLTE=ON -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
#sudo xargs rm < install_manifest.txt  # uninstall
#make clean
########## Verify ##########
ls /usr/bin/FalconGUI
""",True,None))

# LTE-ciphercheck
programs_ubuntu20_04_4.append(('LTE-ciphercheck',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf 
""",True,None))

# Aircrack-ng
programs_ubuntu20_04_4.append(('Aircrack-ng',
"""sudo apt-get install -y aircrack-ng
########## Verify ##########
aircrack-ng --help
""",True,None))

# Geany
programs_ubuntu20_04_4.append(('Geany',
"""sudo apt-get install -y geany  # needs [styling] line_height=0;2; added to Tools>Configuration Files>filetypes.common to see underscores
########## Verify ##########
geany --help
""",True,None))

# Arduino IDE
programs_ubuntu20_04_4.append(('Arduino IDE',
"""wget -P ~/Installed_by_FISSURE/ https://downloads.arduino.cc/arduino-1.8.15-linux64.tar.xz
cd ~/Installed_by_FISSURE
tar -xf arduino-1.8.15-linux64.tar.xz
rm arduino-1.8.15-linux64.tar.xz
cd arduino-1.8.15/
sudo ./install.sh
cp -R """ + fissure_directory + """/Tools/Esp8266_listen_trigger/ ~/Installed_by_FISSURE/
########## Verify ##########
arduino --version
""",True,None))

# Minicom
programs_ubuntu20_04_4.append(('Minicom',
"""sudo apt-get install -y minicom
########## Verify ##########
ls /usr/bin/minicom
""",True,None))

# PuTTY
programs_ubuntu20_04_4.append(('PuTTY',
"""sudo apt-get install -y putty
########## Verify ##########
putty --help
""",True,None))

# openHAB
programs_ubuntu20_04_4.append(('openHAB',
"""sudo apt-get -yq install gnupg curl
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
cd ~/Downloads
curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
sudo apt-get update
sudo apt-get install -y zulu11-jdk
rm zulu-repo_1.0.0-2_all.deb
wget -qO - 'https://openhab.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
sudo apt-get install -y apt-transport-https
echo 'deb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list
sudo apt-get update && sudo apt-get install -y openhab
########## Verify ##########
ls /usr/bin/openhab-cli
""",True,None))

# rtl-zwave
programs_ubuntu20_04_4.append(('rtl-zwave',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y libpcap-dev
cp -R """ + fissure_directory + """/Tools/rtl-zwave-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/rtl-zwave-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/rtl-zwave-master/rtl_zwave
""",True,None))

# waving-z
programs_ubuntu20_04_4.append(('waving-z',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/
git clone https://github.com/baol/waving-z.git
cd ~/Installed_by_FISSURE/waving-z
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build .
########## Verify ##########
ls ~/Installed_by_FISSURE/waving-z/build/wave-in
""",True,None))

# baudline
programs_ubuntu20_04_4.append(('baudline',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://www.baudline.com/baudline_1.08_linux_x86_64.tar.gz
tar -xf baudline_1.08_linux_x86_64.tar.gz
rm baudline_1.08_linux_x86_64.tar.gz
########## Verify ##########
~/Installed_by_FISSURE/baudline_1.08_linux_x86_64/baudline --help
""",True,None))

# Universal Radio Hacker
programs_ubuntu20_04_4.append(('Universal Radio Hacker',
"""sudo python3 -m pip install cython
sudo python3 -m pip install urh
########## Verify ##########
urh --version
""",True,None))

# Inspectrum
programs_ubuntu20_04_4.append(('Inspectrum',
"""sudo apt-get install -y inspectrum
########## Verify ##########
inspectrum --help
""",True,None))

# OpenCPN
programs_ubuntu20_04_4.append(('OpenCPN',
"""sudo add-apt-repository -y ppa:opencpn/opencpn
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C865EB40
sudo apt-get update
sudo apt-get install -y opencpn
########## Verify ##########
ls /usr/bin/opencpn
""",True,None))

# Kalibrate
programs_ubuntu20_04_4.append(('Kalibrate',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/steve-m/kalibrate-rtl.git
cd kalibrate-rtl
./bootstrap && CXXFLAGS='-W -Wall -O3' ./configure && make
########## Verify ##########
ls ~/Installed_by_FISSURE/kalibrate-rtl/src/kal
""",True,None))

# retrogram-rtlsdr
programs_ubuntu20_04_4.append(('retrogram-rtlsdr',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y librtlsdr-dev libncurses5-dev libboost-program-options-dev
cp -R """ + fissure_directory + """/Tools/retrogram-rtlsdr-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/retrogram-rtlsdr-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/retrogram-rtlsdr-master/retrogram-rtlsdr
""",True,None))

# RTLSDR-Airband
programs_ubuntu20_04_4.append(('RTLSDR-Airband',
"""sudo apt-get install -y build-essential cmake pkg-config libmp3lame-dev libshout3-dev libconfig++-dev libfftw3-dev libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/szpajder/RTLSDR-Airband.git
cd RTLSDR-Airband
mkdir build
cd build
cmake ../
make
sudo make install
########## Verify ##########
rtl_airband -h
""",True,None))

# Spektrum
programs_ubuntu20_04_4.append(('Spektrum',
"""echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/rtl-sdr.conf  # Restart computer to use RTL device
echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", GROUP="adm", MODE="0666"' | sudo tee /etc/udev/rules.d/20.rtlsdr.rules
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/pavels/spektrum/releases/download/2.1.0/spektrum-linux64.tar.gz
tar -xf spektrum-linux64.tar.gz
rm spektrum-linux64.tar.gz
########## Verify ##########
ls ~/Installed_by_FISSURE/spektrum/spektrum
""",True,None))

# SDRTrunk
programs_ubuntu20_04_4.append(('SDRTrunk',
"""#sudo apt-get -yq install gnupg curl  # Java (if needed)
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
#cd ~/Downloads
#curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
#sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
#sudo apt-get update
#sudo apt-get install -y zulu11-jdk
#rm zulu-repo_1.0.0-2_all.deb
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/DSheirer/sdrtrunk/releases/download/v0.5.0-alpha.6/sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
unzip -q sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
rm sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
########## Verify ##########
ls ~/Installed_by_FISSURE/sdr-trunk-linux-x86_64-v0.5.0-alpha6/bin/sdr-trunk
""",True,None))

# Audio Tools
programs_ubuntu20_04_4.append(('Audio Tools',
"""sudo apt-get install -y audacity sox lame mpv ffmpeg mplayer
########## Verify ##########
audacity --version && sox --version
""",True,None))

# Video Tools
programs_ubuntu20_04_4.append(('Video Tools',
"""sudo apt-get install -y snapd
sudo snap install vlc
sudo apt-add-repository -y ppa:maarten-baert/simplescreenrecorder
sudo apt-get update
sudo apt-get install -y simplescreenrecorder
########## Verify ##########
simplescreenrecorder --help
""",True,None))

# radiosonde_auto_rx
programs_ubuntu20_04_4.append(('radiosonde_auto_rx',
"""sudo apt-get install -y python3 python3-numpy python3-setuptools python3-crcmod python3-requests python3-dateutil python3-pip python3-flask sox git build-essential libtool cmake usbutils libusb-1.0-0-dev rng-tools libsamplerate-dev libatlas3-base libgfortran5
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/projecthorus/radiosonde_auto_rx.git
cd radiosonde_auto_rx/auto_rx
./build.sh
cp station.cfg.example station.cfg
sudo python3 -m pip install -r requirements.txt
########## Verify ##########
ls ~/Installed_by_FISSURE/radiosonde_auto_rx/auto_rx/auto_rx.py
""",True,None))

# SdrGlut
programs_ubuntu20_04_4.append(('SdrGlut',
"""sudo apt-get install -y librtaudio-dev libsoapysdr-dev libopenal-dev libliquid-dev freeglut3 freeglut3-dev libalut0 libalut-dev libsndfile1-dev 
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/jgaeddert/liquid-dsp.git
cd liquid-dsp/
./bootstrap.sh
./configure
make
sudo make install
sudo ldconfig
cd ~/Installed_by_FISSURE
git clone https://github.com/righthalfplane/SdrGlut.git
cp -f """ + fissure_directory + """/Tools/SdrGlut/firstFile.h ~/Installed_by_FISSURE/SdrGlut/MainSource/
cp -f """ + fissure_directory + """/Tools/SdrGlut/makefileUbunta ~/Installed_by_FISSURE/SdrGlut/makefileUbunta
cd SdrGlut
make -f makefileUbunta
########## Verify ##########
ls ~/Installed_by_FISSURE/SdrGlut/sdrglut.x
""",True,None))

# rehex
programs_ubuntu20_04_4.append(('rehex',
"""sudo apt-get install -y build-essential git libwxgtk3.0-gtk3-dev libjansson-dev libcapstone-dev liblua5.3-dev lua5.3 lua5.2 libunistring-dev libgtk-3-dev lua-busted
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/solemnwarning/rehex.git
cd rehex
sudo git config --global --add safe.directory """ + os.path.expanduser('~') + """/Installed_by_FISSURE/rehex
sudo cpan Template
sudo make install
########## Verify ##########
ls /usr/local/bin/rehex 
""",True,None))

# ZEPASSD
programs_ubuntu20_04_4.append(('ZEPASSD',
"""#sudo apt-get install -y # boost.program-options, boost.crc, boost.circular-buffer, libfftw3, libuhd 3.9.5 or later
sudo apt-get install -y libuhd-dev  # Might need to be installed a second time?
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/pvachon/zepassd.git
cd zepassd
make
########## Verify ##########
ls ~/Installed_by_FISSURE/zepassd/zepassd
""",True,None))

# iridium-toolkit
programs_ubuntu20_04_4.append(('iridium-toolkit',
"""#Python (2.7), NumPy (scipy), crcmod
sudo apt-get install -y mplayer
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/muccc/iridium-toolkit.git
git clone git://git.osmocom.org/osmo-ir77
cd osmo-ir77/codec/
sudo make
cp ir77_ambe_decode ~/Installed_by_FISSURE/iridium-toolkit/
########## Verify ##########
ls ~/Installed_by_FISSURE/osmo-ir77/codec/ir77_ambe_decode
""",True,None))

# IridiumLive
programs_ubuntu20_04_4.append(('IridiumLive',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/microp11/iridiumlive.git
wget -P ~/Installed_by_FISSURE/ https://github.com/microp11/iridiumlive/releases/download/v1.2/linux-x64.zip
unzip -q linux-x64.zip
rm linux-x64.zip
cd linux-x64
sudo chmod +x IridiumLive
########## Verify ##########
ls ~/Installed_by_FISSURE/linux-x64/IridiumLive
""",True,None))

# NETATTACK2
programs_ubuntu20_04_4.append(('NETATTACK2',
"""#sudo pip install netifaces  # fix for python2
#sudo apt-get install -y python-scapy python-nmap python-nfqueue nmap  # this needs to be fixed, can it still run with python2?
sudo python2 -m pip install netifaces
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/chrizator/netattack2.git
sudo python2 -m pip install nmap
cd netattack2
wget http://archive.ubuntu.com/ubuntu/pool/universe/libn/libnetfilter-queue/libnetfilter-queue1_1.0.2-2_amd64.deb
sudo dpkg -i libnetfilter-queue1_1.0.2-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/n/nfqueue-bindings/python-nfqueue_0.6-1build2_amd64.deb
sudo dpkg -i python-nfqueue_0.6-1build2_amd64.deb 
""",True,None))

# Wifite
programs_ubuntu20_04_4.append(('Wifite',
"""# python, iwconfig, ifconfig, Aircrack-ng, tshark, reaver, bully, coWPAtty, pyrit, hashcat, hcxdumptool, hcxpcaptool
sudo apt-get install -y build-essential libpcap-dev aircrack-ng pixiewps libssl-dev hashcat libcurl4-openssl-dev pkg-config macchanger
sudo python3 -m pip install psycopg2-binary scapy
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/derv82/wifite2.git
git clone https://github.com/t6x/reaver-wps-fork-t6x
cd reaver-wps-fork-t6x/src
./configure
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/aanarchyy/bully
cd bully/src
make
sudo make install
cd ~/Installed_by_FISSURE
wget http://www.willhackforsushi.com/code/cowpatty/4.6/cowpatty-4.6.tgz
tar zxfv cowpatty-4.6.tgz
rm cowpatty-4.6.tgz
cd cowpatty-4.6
make
sudo cp cowpatty /usr/bin
cd ~/Installed_by_FISSURE
mkdir Pyrit-v0.5.0
cd Pyrit-v0.5.0
wget https://github.com/JPaulMora/Pyrit/releases/download/v0.5.0/Pyrit-v0.5.0.zip
unzip -q Pyrit-v0.5.0.zip
rm Pyrit-v0.5.0.zip
sudo apt-get install -y python2-dev
python2 setup.py clean
python2 setup.py build
sudo python2 setup.py install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxdumptool.git
cd hcxdumptool
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxtools.git
cd hcxtools
make
sudo make install
sudo ln -s /usr/bin/hcxpcapngtool /usr/bin/hcxpcaptool
#sudo apt-get install -y tshark
########## Verify ##########
~/Installed_by_FISSURE/wifite2/Wifite.py --help
""",True,None))

# rtl_433
programs_ubuntu20_04_4.append(('rtl_433',
"""#sudo apt-get install -y rtl-433
sudo apt-get install -y libtool libusb-1.0-0-dev librtlsdr-dev rtl-sdr build-essential cmake pkg-config
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/merbanan/rtl_433.git
cd rtl_433/
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
rtl_433 -help
""",True,None))

# RouterSploit
programs_ubuntu20_04_4.append(('RouterSploit',
"""sudo apt-get install -y python3-pip libglib2.0-dev rustc
sudo python3 -m pip install setuptools-rust
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/threat9/routersploit
cd routersploit
python3 -m pip install setuptools
python3 -m pip install -r requirements.txt
python3 -m pip install bluepy
########## Verify ##########
~/Installed_by_FISSURE/routersploit/rsf.py --help
""",True,None))

# Metasploit
programs_ubuntu20_04_4.append(('Metasploit',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
mkdir metasploit
cd metasploit
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
########## Verify ##########
ls /usr/bin/msfconsole
""",True,None))

# monitor_rtl433
programs_ubuntu20_04_4.append(('monitor_rtl433',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mcbridejc/monitor_rtl433.git
cd monitor_rtl433
sudo python3 setup.py install
sudo python3 -m pip install python-dateutil
sudo python3 -m pip install flask_table
########## Verify ##########
ls /usr/bin/monitor_rtl433
""",True,None))

# scan-ssid
programs_ubuntu20_04_4.append(('scan-ssid',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y iw
git clone https://github.com/Resethel/scan-ssid.git
cd scan-ssid
sudo cp scan-ssid /usr/local/bin
sudo chmod 755 /usr/local/bin/scan-ssid  # can't be in monitor mode, managed only
########## Verify ##########
scan-ssid --help
""",True,None))

# minimodem
programs_ubuntu20_04_4.append(('minimodem',
"""sudo apt-get install -y minimodem
########## Verify ##########
minimodem --version
""",True,None))

# WSJT-X
programs_ubuntu20_04_4.append(('WSJT-X',
"""sudo apt-get install -y wsjtx
########## Verify ##########
ls /usr/bin/wsjtx
""",True,None))

# Google Earth Pro
programs_ubuntu20_04_4.append(('Google Earth Pro',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
sudo dpkg -i google-earth-pro-stable_current_amd64.deb
########## Verify ##########
ls /usr/bin/google-earth-pro
""",True,None))

# gr-air-modes
programs_ubuntu20_04_4.append(('gr-air-modes',
"""sudo apt-get install -y gr-air-modes
########## Verify ##########
modes_rx --help
""",True,None))

# ESP8266 Deauther v2
programs_ubuntu20_04_4.append(('ESP8266 Deauther v2',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/SpacehuhnTech/esp8266_deauther/archive/v2.zip
unzip -q v2.zip
rm v2.zip
""",True,None))

# Viking
programs_ubuntu20_04_4.append(('Viking',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.code.sf.net/p/viking/code viking
sudo apt install -y gtk-doc-tools docbook-xsl yelp-tools libpng-dev libgtk-3-dev libicu-dev libjson-glib-dev intltool
sudo apt-get install -y libcurl4-gnutls-dev libglib2.0-dev-bin
sudo apt-get install -y libsqlite3-dev nettle-dev libmapnik-dev libgeoclue-2-dev libgexiv2-dev libgps-dev libmagic-dev libbz2-dev libzip-dev liboauth-dev
sudo apt-get install -y autopoint libnova-dev
cd viking
./autogen.sh
./configure
make
sudo make install
########## Verify ##########
viking --help
""",True,None))

# PyGPSClient
programs_ubuntu20_04_4.append(('PyGPSClient',
"""sudo apt install -y python3-pip python3-tk python3-pil python3-pil.imagetk
sudo python3 -m pip install --upgrade PyGPSClient
########## Verify ##########
ls /usr/local/bin/pygpsclient
""",True,None))

# Gpredict
programs_ubuntu20_04_4.append(('Gpredict',
"""sudo apt-get install -y gpredict
########## Verify ##########
gpredict --help
""",True,None))

# FoxtrotGPS
programs_ubuntu20_04_4.append(('FoxtrotGPS',
"""sudo apt-get install -y foxtrotgps
########## Verify ##########
foxtrotgps --help
""",True,None))

# multimon-ng
programs_ubuntu20_04_4.append(('multimon-ng',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/EliasOenal/multimonNG.git
cd multimonNG
mkdir build
cd build
qmake ../multimon-ng.pro
make
sudo make install
########## Verify ##########
ls /usr/local/bin/multimon-ng
""",True,None))

# Xastir
programs_ubuntu20_04_4.append(('Xastir',
"""sudo apt-get install -y xastir  # should non-superusers be allowed? sure, why not.
########## Verify ##########
sudo xastir -V
""",True,None))

# LTE-Cell-Scanner
programs_ubuntu20_04_4.append(('LTE-Cell-Scanner',
"""sudo apt-get install -y cmake libncurses5-dev liblapack-dev libblas-dev libboost-thread-dev libboost-system-dev libitpp-dev librtlsdr-dev libfftw3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/JiaoXianjun/LTE-Cell-Scanner.git
cd LTE-Cell-Scanner
mkdir build
cd build
cmake ..
make 
sudo make install
########## Verify ##########
ls /usr/local/bin/CellSearch
""",True,None))

# btscanner
programs_ubuntu20_04_4.append(('btscanner',
"""sudo apt-get install -y btscanner
########## Verify ##########
btscanner --help
""",True,None))

# hcidump
programs_ubuntu20_04_4.append(('hcidump',
"""sudo apt-get install -y bluez-hcidump
########## Verify ##########
hcidump --help
""",True,None))

# GraphicsMagick
programs_ubuntu20_04_4.append(('GraphicsMagick',
"""sudo apt-get install -y graphicsmagick-imagemagick-compat
########## Verify ##########
gm -help
""",True,None))

# Spectrum Painter
programs_ubuntu20_04_4.append(('Spectrum Painter',
"""sudo python3 -m pip install numpy imageio 
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/polygon/spectrum_painter.git
#cd spectrum_painter/
#pip3 install --user -e .  # call with "python3 -m spectrum_painter.img2iqstream"
""",True,None))

# nrsc5 and nrsc5-gui
programs_ubuntu20_04_4.append(('nrsc5',
"""sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/theori-io/nrsc5.git
cd nrsc5
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# nrsc5-gui
python3 -m pip install --upgrade Pillow
python3 -m pip install pyaudio
sudo apt-get install -y python-gobject
cd ~/Installed_by_FISSURE
git clone https://github.com/cmnybo/nrsc5-gui.git
########## Verify ##########
nrsc5 -v
""",True,None))

# # HAM2MON  # Doesn't work for 20.04
# programs_ubuntu20_04_4.append(('HAM2MON',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/madengr/ham2mon.git
# """,True,None))

# Anki
programs_ubuntu20_04_4.append(('Anki',
"""sudo apt-get install -y anki
########## Verify ##########
anki -h
""",True,None))

# Bless
programs_ubuntu20_04_4.append(('Bless',
"""sudo apt-get install -y bless
########## Verify ##########
ls /usr/bin/bless
""",True,None))

# trackerjacker
programs_ubuntu20_04_4.append(('trackerjacker',
"""sudo python3 -m pip install trackerjacker  # Downgrades Python3 Scapy from 2.4.5 to 2.4.0
########## Verify ##########
sudo trackerjacker --help
""",True,None))

# airgeddon
programs_ubuntu20_04_4.append(('airgeddon',
"""sudo apt-get install -y crunch mdk3 hostapd lighttpd ruby-dev xterm isc-dhcp-server ettercap-text-only john
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone --depth 1 https://github.com/v1s1t0r1sh3r3/airgeddon.git
#asleap
mkdir asleap
cd asleap
wget http://http.kali.org/pool/main/a/asleap/asleap_2.3~git20201128.254acab-0kali1_amd64.deb
sudo dpkg -i asleap_2.3~git20201128.254acab-0kali1_amd64.deb
#bettercap
sudo apt-get install -y build-essential libpcap-dev net-tools 
cd ~/Installed_by_FISSURE
mkdir bettercap
cd bettercap
wget https://github.com/bettercap/bettercap/releases/download/v2.31.1/bettercap_linux_amd64_v2.31.1.zip
unzip -q bettercap_linux_amd64_v2.31.1.zip
rm bettercap_linux_amd64_v2.31.1.zip
sudo cp bettercap /usr/bin/
#mdk4
sudo apt-get install -y libnl-genl-3-dev
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/mdk4
cd mdk4
make
sudo make install
""",True,None))

# Hydra
programs_ubuntu20_04_4.append(('Hydra',
"""sudo apt-get install -y hydra
########## Verify ##########
ls /usr/bin/hydra
""",True,None))

# Enscribe
programs_ubuntu20_04_4.append(('Enscribe',
"""sudo apt-get install -y enscribe
########## Verify ##########
ls /usr/bin/enscribe
""",True,None))

# ESP32 Bluetooth Classic Sniffer - FIX
programs_ubuntu20_04_4.append(('ESP32 BT Classic Sniffer',
"""mkdir -p ~/Installed_by_FISSURE  # Requires Wireshark 3.4, cannot get it to work with other versions
cd ~/Installed_by_FISSURE
#git clone https://github.com/Matheus-Garbelini/esp32_bluetooth_classic_sniffer
#cd esp32_bluetooth_classic_sniffer
#sudo ./requirements.sh
#./build.sh
##sudo cp dissectors/h4bcm.so /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.4/epan/  # Needs to go where "sudo Wireshark" dissectors are located, check Wireshark version for 3.4
#rm ~/.local/lib/wireshark/plugins/3.4/epan/h4bcm.so  # To avoid "plugin 'h4bcm.so' was found in multiple directories" warning
""",False,None))


########################################################################
############################ Ubuntu 22.04 ##############################
########################################################################

programs_ubuntu22_04 = []

# Misc. Dependencies
programs_ubuntu22_04.append(('Misc. Dependencies',
"""sudo apt-get -y update
sudo apt-get -y install cmake
sudo apt-get install -y python-setuptools python-dev-is-python3 build-essential
sudo apt-get install -y curl
curl https://bootstrap.pypa.io./pip/2.7/get-pip.py | sudo python2  # Installs pip 20.3.4
sudo apt-get install -y python3-pip
sudo python3 -m pip install cmake --upgrade
sudo apt install -y python3-testresources
sudo python3 -m pip install --upgrade setuptools
sudo python3 -m pip install --upgrade virtualenv
sudo python3 -m pip install matplotlib
sudo python3 -m pip install PyYAML==5.1
sudo python3 -m pip install pyyaml
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-scipy/python-scipy_0.19.1-2ubuntu1_amd64.deb
sudo apt-get install -y ./python-scipy_0.19.1-2ubuntu1_amd64.deb  # FIX?
rm python-scipy_0.19.1-2ubuntu1_amd64.deb
sudo apt-get install -y gedit
sudo apt-get install -y software-properties-common #python-software-properties # does Python3
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
sudo apt-get install -y git 
sudo apt-get install -y libcanberra-gtk-module
sudo python3 -m pip install bitarray
sudo apt install net-tools
sudo python3 -m pip install crcmod
sudo python3 -m pip install pycrypto
sudo apt-get install -y python-tk
sudo python3 -m pip install pyzmq
sudo apt-get install -y libosmocore-dev
sudo apt-get install -y liborc-0.4-dev
sudo apt-get install -y expect
sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python3 -m pip install pypcapfile
sudo python2 -m pip install pypcapfile
sudo python2 -m pip install netaddr
sudo python3 -m pip install psutil
sudo python3 -m pip install pyserial
sudo apt-get install -y gpsd-clients python3-gi-cairo
sudo python3 -m pip install pandas
sudo apt-get install -y dsniff
sudo apt-get install -y ncurses-term
. ~/.bashrc
""",True,"Minimum Install"))

# fissure Command 
programs_ubuntu22_04.append(('fissure Command',
"""mkdir -p ~/.local/bin
if grep -Fq "~/.local/bin" ~/.bashrc
then
  echo "~/.local/bin is already in ~/.bashrc"
else
  printf "\\n%s\\n" "export PATH=~/.local/bin:$PATH" >> ~/.bashrc
fi
/bin/echo -e "python3 """ + fissure_directory + """/dashboard.py" > ~/.local/bin/fissure
sudo chmod +x ~/.local/bin/fissure
echo "[Desktop Entry]\nStartupWMClass=dashboard.py\nName=FISSURE\nTerminal=false\nType=Application\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=/home/$USER/.local/bin/fissure" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
. ~/.bashrc
########## Verify ##########
ls ~/.local/bin/fissure
""",True,"Minimum Install"))

# GNU Radio
programs_ubuntu22_04.append(('GNU Radio',
"""sudo apt-get install -y gnuradio
sudo apt-get install -y uhd-host

# Configure GNU Radio
(gnuradio-companion &) && sleep 5 && killall gnuradio-companion
/bin/echo -e "[grc]\nlocal_blocks_path=""" + fissure_directory + """/Custom_Blocks\nxterm_executable=/usr/bin/gnome-terminal" > ~/.gnuradio/config.conf
sudo cp /usr/lib/uhd/utils/uhd-usrp.rules /etc/udev/rules.d/  # For B205 mini
sudo udevadm control --reload-rules
sudo udevadm trigger
sudo mkdir /usr/share/uhd
sudo chmod -R 777 /usr/share/uhd
uhd_images_downloader

# Find OOT Modules
printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3.8/site-packages:/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.bashrc
printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.profile  # For GRC without terminal
printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.profile  # For GRC without terminal
. ~/.bashrc
sudo apt-get install -y libzmq3-dev swig cmake
sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
sudo ldconfig
########## Verify ##########
gnuradio-companion --help
""",True,"Minimum Install"))

# Scapy
programs_ubuntu22_04.append(('Scapy',
"""sudo apt-get install -y python3-scapy
#sudo python3 -m pip install scapy  # Causes errors
sudo python2 -m pip install scapy
########## Verify ##########
python2 -c "import scapy" && python3 -c "import scapy"
""",True,"Minimum Install"))

# Wireshark
programs_ubuntu22_04.append(('Wireshark',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev  # Yes
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,"Minimum Install"))

# LimeSDR
programs_ubuntu22_04.append(('LimeSDR',
"""#sudo add-apt-repository -y ppa:myriadrf/drivers  # doesn't work
#sudo apt-get update
sudo apt-get install -y limesuite liblimesuite-dev limesuite-udev  # No limesuite-images on 22.04
sudo apt-get install -y soapysdr-tools soapysdr-module-lms7
sudo apt-get install -y libboost-all-dev swig
########## Verify ##########
ls /usr/bin/LimeSuiteGUI
""",True,'Hardware'))

# BladeRF
programs_ubuntu22_04.append(('BladeRF',
"""sudo apt-get install -y libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 pkg-config git wget  # no package: libtecla1-dev       
sudo apt-get install -y bladerf
sudo apt-get install -y bladerf-fpga-hostedx115
########## Verify ##########
bladeRF-cli --help
""",True,'Hardware'))

# USRP X300 Series - FIX
programs_ubuntu22_04.append(('USRP X300 Series',
"""mkdir -p ~/Installed_by_FISSURE  # Set MTU to 9000 and run uhd_image_loader command
cd ~/Installed_by_FISSURE
#wget https://codeload.github.com/EttusResearch/uhd/zip/release_003_010_003_000 -O uhd.zip
#unzip uhd.zip
#cd uhd-release_003_010_003_000/host/include
#sudo cp -Rv uhd/rfnoc /usr/share/uhd/
#rm -Rf ~/Installed_by_FISSURE/uhd-release_003_010_003_000
/usr/lib/uhd/utils/uhd_images_downloader.py
#"/usr/bin/uhd_image_loader" --args="type=x300,addr=192.168.40.2"  # Use your X310 IP
sudo sysctl -w net.core.wmem_max=24862979
""",True,'Hardware'))

# HackRF
programs_ubuntu22_04.append(('HackRF',
"""sudo apt-get install -y libusb-1.0-0-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/hackrf-2018.01.1/ ~/Installed_by_FISSURE/
rm -Rf ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
mkdir ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
cd ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
cmake ..
make
sudo make install
sudo ldconfig
sudo cp """ + fissure_directory + """/Tools/53-hackrf.rules /etc/udev/rules.d/53-hackrf.rules
sudo udevadm trigger --action=change
#sudo apt-get install -y hackrf
#pybombs install gr-osmosdr
#sudo apt-get install gr-osmosdr  # Not always found in the repositories
########## Verify ##########
hackrf_sweep --help
""",True,'Hardware'))

# 8812au Driver
programs_ubuntu22_04.append(('8812au Driver',
"""# Still Broken, Needs Replacement Driver
sudo apt-get -y install dkms
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/rtl8812au/
cd ~/Installed_by_FISSURE/rtl8812au
sudo make dkms_install
""",True,'Hardware'))

# Zigbee Sniffer
programs_ubuntu22_04.append(('Zigbee Sniffer',
"""cp -R """ + fissure_directory + """/Tools/OpenSniffer-0.1/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/OpenSniffer-0.1/
sudo python3 setup.py install
#sudo add-apt-repository -y ppa:rock-core/qt4  # PyQt4, doesn't work
#sudo apt-get update
wget http://archive.ubuntu.com/ubuntu/pool/universe/q/qt-assistant-compat/libqtassistantclient4_4.6.3-7build1_amd64.deb -O ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb 
sudo apt-get install -y ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-qt4/python-qt4_4.12.1+dfsg-2_amd64.deb -O ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
sudo apt-get install -y ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-pyaudio/python-pyaudio_0.2.11-1build2_amd64.deb -O ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
sudo apt-get install -y ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
rm ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
rm ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
rm ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
sudo apt-get install -y mlocate
""",True,'Hardware'))

# fl2k
programs_ubuntu22_04.append(('fl2k',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_ubuntu22_04.append(('Proxmark3',
"""sudo apt-get install -y p7zip git build-essential libreadline8 libreadline-dev libusb-0.1-4 libusb-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libreadline-dev libpcsclite-dev gcc-arm-none-eabi
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# gr-acars-3.10ng
programs_ubuntu22_04.append(('gr-acars-3.10ng',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-acars-3.10ng/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import acars"
""",True,'Out-of-Tree Modules'))

# gr-adsb-maint-3.10
programs_ubuntu22_04.append(('gr-adsb-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-adsb-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import adsb"
""",True,'Out-of-Tree Modules'))

# # gr-ainfosec
# programs_ubuntu22_04.append(('gr-ainfosec',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-ainfosec/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import ainfosec"
# """,True,'Out-of-Tree Modules'))

# gr-ais-maint-3.10
programs_ubuntu22_04.append(('gr-ais-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-ais-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ais"
""",True,'Out-of-Tree Modules'))

# # gr-bluetooth-maint-3.10
# programs_ubuntu22_04.append(('gr-bluetooth-maint-3.10',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/libbtbb-master/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-bluetooth-maint-3.10/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# ls /usr/local/bin/btrx
# """,True,'Out-of-Tree Modules'))

# gr-clapper_plus-maint-3.10
programs_ubuntu22_04.append(('gr-clapper_plus-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-clapper_plus-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import clapper_plus"
""",True,'Out-of-Tree Modules'))

# gr-dect2-maint-3.10
programs_ubuntu22_04.append(('gr-dect2-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-dect2-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import dect2"
""",True,'Out-of-Tree Modules'))

# gr-foo-maint-3.10
programs_ubuntu22_04.append(('gr-foo-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-foo-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import foo"
""",True,'Out-of-Tree Modules'))

# # gr-fuzzer
# programs_ubuntu22_04.append(('gr-fuzzer',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-fuzzer/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import fuzzer"
# """,True,'Out-of-Tree Modules'))

# gr-garage_door-maint-3.10
programs_ubuntu22_04.append(('gr-garage_door-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-garage_door-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import garage_door"
""",True,'Out-of-Tree Modules'))

# gr-gsm-maint-3.10
programs_ubuntu22_04.append(('gr-gsm-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-gsm-maint-3.10/
sudo rm -Rf build
sudo apt-get install -y gr-osmosdr
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# gr-gsm needs to be made twice for "import arfcn" block to work
make 
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import grgsm"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-11-maint-3.10
programs_ubuntu22_04.append(('gr-ieee802-11-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-ieee802-11-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ieee802_11"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4-maint-3.10
programs_ubuntu22_04.append(('gr-ieee802-15-4-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-ieee802-15-4-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-ieee802-15-4-maint-3.10/examples/ieee802_15_4_CSS_PHY.grc
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-ieee802-15-4-maint-3.10/examples/ieee802_15_4_OQPSK_PHY.grc
########## Verify ##########
python3 -c "import ieee802_15_4"
""",True,'Out-of-Tree Modules'))

# gr-iridium-master
programs_ubuntu22_04.append(('gr-iridium-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-iridium-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import iridium"
""",True,'Out-of-Tree Modules'))

# gr-j2497-maint-3.10
programs_ubuntu22_04.append(('gr-j2497-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-j2497-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import j2497"
""",True,'Out-of-Tree Modules'))

# # gr-limesdr-gr-3.10
# programs_ubuntu22_04.append(('gr-limesdr-gr-3.10',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-limesdr-gr-3.10/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import limesdr"
# """,True,'Out-of-Tree Modules'))

# gr-nrsc5-master
programs_ubuntu22_04.append(('gr-nrsc5-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-nrsc5-master/
sudo rm -Rf build
sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import nrsc5"
""",True,'Out-of-Tree Modules'))

# gr-paint-master
programs_ubuntu22_04.append(('gr-paint-master',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-paint-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-paint-master/
gcc tgatoluma.c -o tgatoluma
chmod +x tgatoluma
cp tgatoluma ~/.local/bin/
########## Verify ##########
python3 -c "import paint"
""",True,'Out-of-Tree Modules'))

# gr-rds-maint-3.10
programs_ubuntu22_04.append(('gr-rds-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-rds-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import rds"
""",True,'Out-of-Tree Modules'))

# gr-tpms-maint-3.10
programs_ubuntu22_04.append(('gr-tpms-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-tpms-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import tpms"
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore-maint-3.10
programs_ubuntu22_04.append(('gr-tpms_poore-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-tpms_poore-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import tpms_poore"
""",True,'Out-of-Tree Modules'))

# gr-X10-maint-3.10
programs_ubuntu22_04.append(('gr-X10-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-X10-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import X10"
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore-maint-3.10
programs_ubuntu22_04.append(('gr-zwave_poore-maint-3.10',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.10/gr-zwave_poore-maint-3.10/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import zwave_poore"
""",True,'Out-of-Tree Modules'))

# QSpectrumAnalyzer
programs_ubuntu22_04.append(('QSpectrumAnalyzer',
"""#sudo add-apt-repository -y ppa:myriadrf/drivers
#sudo apt-get -y update
sudo apt-get install -y python3-pip python3-pyqt5 python3-numpy python3-scipy python3-soapysdr  # No package: soapysdr
sudo apt-get install -y soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7
python3 -m pip install --user qspectrumanalyzer  # log in again, run without sudo
########## Verify ##########
ls ~/.local/bin/qspectrumanalyzer
""",True,None))

# GQRX
programs_ubuntu22_04.append(('GQRX',
"""sudo apt-get install -y gqrx-sdr
########## Verify ##########
ls /usr/bin/gqrx
""",True,None))

# Dump1090
programs_ubuntu22_04.append(('Dump1090',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,None))

# QtDesigner
programs_ubuntu22_04.append(('QtDesigner',
"""sudo apt-get install -y build-essential qtcreator qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
########## Verify ##########
ls /usr/bin/designer
""",True,None))

# Grip
programs_ubuntu22_04.append(('Grip',
"""sudo python3 -m pip install grip
########## Verify ##########
grip --help
""",True,None))

# Kismet - FIX
programs_ubuntu22_04.append(('Kismet',
"""#sudo apt-get install -y kismet  # add your computer's username to the group
""",True,None))

# UDP Replay
programs_ubuntu22_04.append(('UDP Replay',
"""sudo apt-get install -y libpcap-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/rigtorp/udpreplay.git
cd ~/Installed_by_FISSURE/udpreplay
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
ls /usr/local/bin/udpreplay
""",True,None))

# V2Verifier
programs_ubuntu22_04.append(('V2Verifier',
"""sudo apt-get install -y libgmp3-dev python3-tk python3-pil.imagetk
sudo python3 -m pip install fastecdsa
sudo python3 -m pip install -U pyyaml
#sudo apt install -y git cmake libuhd-dev uhd-host swig libgmp3-dev python3-pip python3-tk python3-pil 
#python3-pil.imagetk gnuradio
#Needs gr-foo and gr-ieee802-11
""",True,None))

# srsRAN/srsLTE
programs_ubuntu22_04.append(('srsRAN',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,None))

# FALCON - FIX (needs older soapysdr version?)
programs_ubuntu22_04.append(('FALCON',
"""sudo apt-get install -y build-essential git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev  # For srsLTE
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y libglib2.0-dev libudev-dev libcurl4-gnutls-dev libboost-all-dev qtdeclarative5-dev libqt5charts5-dev  # FALCON
git clone https://github.com/falkenber9/falcon.git
cd falcon
mkdir build
cd build
cmake -DFORCE_SUBPROJECT_SRSLTE=ON -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
#sudo xargs rm < install_manifest.txt  # uninstall
#make clean
########## Verify ##########
ls /usr/bin/FalconGUI
""",True,None))

# LTE-ciphercheck
programs_ubuntu22_04.append(('LTE-ciphercheck',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf 
""",True,None))

# Aircrack-ng
programs_ubuntu22_04.append(('Aircrack-ng',
"""sudo apt-get install -y aircrack-ng
########## Verify ##########
aircrack-ng --help
""",True,None))

# Geany
programs_ubuntu22_04.append(('Geany',
"""sudo apt-get install -y geany
########## Verify ##########
geany --help
""",True,None))

# Arduino IDE
programs_ubuntu22_04.append(('Arduino IDE',
"""wget -P ~/Installed_by_FISSURE/ https://downloads.arduino.cc/arduino-1.8.15-linux64.tar.xz
cd ~/Installed_by_FISSURE
tar -xf arduino-1.8.15-linux64.tar.xz
rm arduino-1.8.15-linux64.tar.xz
cd arduino-1.8.15/
sudo ./install.sh
cp -R """ + fissure_directory + """/Tools/Esp8266_listen_trigger/ ~/Installed_by_FISSURE/
########## Verify ##########
arduino --version
""",True,None))

# Minicom
programs_ubuntu22_04.append(('Minicom',
"""sudo apt-get install -y minicom
########## Verify ##########
ls /usr/bin/minicom
""",True,None))

# PuTTY
programs_ubuntu22_04.append(('PuTTY',
"""sudo apt-get install -y putty
########## Verify ##########
putty --help
""",True,None))

# openHAB - FIX
programs_ubuntu22_04.append(('openHAB',
"""sudo apt-get -yq install gnupg curl
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
cd ~/Downloads
curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
sudo apt-get update
sudo apt-get install -y zulu11-jdk
rm zulu-repo_1.0.0-2_all.deb
wget -qO - 'https://openhab.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
sudo apt-get install -y apt-transport-https
echo 'deb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list
sudo apt-get update && sudo apt-get install -y openhab
########## Verify ##########
ls /usr/bin/openhab-cli
""",True,None))

# rtl-zwave
programs_ubuntu22_04.append(('rtl-zwave',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y libpcap-dev
cp -R """ + fissure_directory + """/Tools/rtl-zwave-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/rtl-zwave-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/rtl-zwave-master/rtl_zwave
""",True,None))

# waving-z
programs_ubuntu22_04.append(('waving-z',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE/
git clone https://github.com/baol/waving-z.git
cd ~/Installed_by_FISSURE/waving-z
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build .
########## Verify ##########
ls ~/Installed_by_FISSURE/waving-z/build/wave-in
""",True,None))

# baudline
programs_ubuntu22_04.append(('baudline',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://www.baudline.com/baudline_1.08_linux_x86_64.tar.gz
tar -xf baudline_1.08_linux_x86_64.tar.gz
rm baudline_1.08_linux_x86_64.tar.gz
########## Verify ##########
~/Installed_by_FISSURE/baudline_1.08_linux_x86_64/baudline --help
""",True,None))

# Universal Radio Hacker - FIX
programs_ubuntu22_04.append(('Universal Radio Hacker',
"""sudo python3 -m pip install cython
sudo python3 -m pip install urh
########## Verify ##########
urh --version
""",True,None))

# Inspectrum
programs_ubuntu22_04.append(('Inspectrum',
"""sudo apt-get install -y inspectrum
########## Verify ##########
inspectrum --help
""",True,None))

# OpenCPN
programs_ubuntu22_04.append(('OpenCPN',
"""sudo add-apt-repository -y ppa:opencpn/opencpn
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C865EB40  # FIX
sudo apt-get update
sudo apt-get install -y opencpn
########## Verify ##########
ls /usr/bin/opencpn
""",True,None))

# Kalibrate
programs_ubuntu22_04.append(('Kalibrate',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/steve-m/kalibrate-rtl.git
cd kalibrate-rtl
./bootstrap && CXXFLAGS='-W -Wall -O3' ./configure && make
########## Verify ##########
ls ~/Installed_by_FISSURE/kalibrate-rtl/src/kal
""",True,None))

# retrogram-rtlsdr
programs_ubuntu22_04.append(('retrogram-rtlsdr',
"""mkdir -p ~/Installed_by_FISSURE
sudo apt-get install -y librtlsdr-dev libncurses5-dev libboost-program-options-dev
cp -R """ + fissure_directory + """/Tools/retrogram-rtlsdr-master ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/retrogram-rtlsdr-master
make
########## Verify ##########
ls ~/Installed_by_FISSURE/retrogram-rtlsdr-master/retrogram-rtlsdr
""",True,None))

# RTLSDR-Airband
programs_ubuntu22_04.append(('RTLSDR-Airband',
"""sudo apt-get install -y build-essential cmake pkg-config libmp3lame-dev libshout3-dev libconfig++-dev libfftw3-dev libpulse-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/szpajder/RTLSDR-Airband.git
cd RTLSDR-Airband
mkdir build
cd build
cmake ../
make
sudo make install
########## Verify ##########
rtl_airband -h
""",True,None))

# Spektrum
programs_ubuntu22_04.append(('Spektrum',
"""echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/rtl-sdr.conf  # Restart computer to use RTL device
echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", GROUP="adm", MODE="0666"' | sudo tee /etc/udev/rules.d/20.rtlsdr.rules
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/pavels/spektrum/releases/download/2.1.0/spektrum-linux64.tar.gz
tar -xf spektrum-linux64.tar.gz
rm spektrum-linux64.tar.gz
########## Verify ##########
ls ~/Installed_by_FISSURE/spektrum/spektrum
""",True,None))

# SDRTrunk
programs_ubuntu22_04.append(('SDRTrunk',
"""#sudo apt-get -yq install gnupg curl  # Java (if needed)
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
#cd ~/Downloads
#curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
#sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
#sudo apt-get update
#sudo apt-get install -y zulu11-jdk
#rm zulu-repo_1.0.0-2_all.deb
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget -P ~/Installed_by_FISSURE/ https://github.com/DSheirer/sdrtrunk/releases/download/v0.5.0-alpha.6/sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
unzip -q sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
rm sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
########## Verify ##########
ls ~/Installed_by_FISSURE/sdr-trunk-linux-x86_64-v0.5.0-alpha6/bin/sdr-trunk
""",True,None))

# Audio Tools
programs_ubuntu22_04.append(('Audio Tools',
"""sudo apt-get install -y audacity sox lame mpv ffmpeg mplayer
########## Verify ##########
audacity --version && sox --version
""",True,None))

# Video Tools
programs_ubuntu22_04.append(('Video Tools',
"""sudo apt-get install -y snapd
sudo snap install vlc
sudo apt-get install -y simplescreenrecorder
########## Verify ##########
simplescreenrecorder --help
""",True,None))

# radiosonde_auto_rx
programs_ubuntu22_04.append(('radiosonde_auto_rx',
"""sudo apt-get install -y python3 python3-numpy python3-setuptools python3-crcmod python3-requests python3-dateutil python3-pip python3-flask sox git build-essential libtool cmake usbutils libusb-1.0-0-dev rng-tools libsamplerate-dev libatlas3-base libgfortran5
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/projecthorus/radiosonde_auto_rx.git
cd radiosonde_auto_rx/auto_rx
./build.sh
cp station.cfg.example station.cfg
sudo python3 -m pip install -r requirements.txt
########## Verify ##########
ls ~/Installed_by_FISSURE/radiosonde_auto_rx/auto_rx/auto_rx.py
""",True,None))

# SdrGlut - FIX
programs_ubuntu22_04.append(('SdrGlut',
"""sudo apt-get install -y librtaudio-dev libsoapysdr-dev libopenal-dev libliquid-dev freeglut3 freeglut3-dev libalut0 libalut-dev libsndfile1-dev 
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/jgaeddert/liquid-dsp.git
cd liquid-dsp/
./bootstrap.sh
./configure
make
sudo make install
sudo ldconfig
cd ~/Installed_by_FISSURE
git clone https://github.com/righthalfplane/SdrGlut.git
cp -f """ + fissure_directory + """/Tools/SdrGlut/firstFile.h ~/Installed_by_FISSURE/SdrGlut/MainSource/
cp -f """ + fissure_directory + """/Tools/SdrGlut/makefileUbunta ~/Installed_by_FISSURE/SdrGlut/makefileUbunta
cd SdrGlut
make -f makefileUbunta
########## Verify ##########
ls ~/Installed_by_FISSURE/SdrGlut/sdrglut.x
""",True,None))

# rehex
programs_ubuntu22_04.append(('rehex',
"""sudo apt-get install -y build-essential git libwxgtk3.0-gtk3-dev libjansson-dev libcapstone-dev liblua5.3-dev lua5.3 lua5.2 libunistring-dev libgtk-3-dev lua-busted
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/solemnwarning/rehex.git
cd rehex
sudo git config --global --add safe.directory """ + os.path.expanduser('~') + """/Installed_by_FISSURE/rehex
sudo cpan Template
sudo make install
########## Verify ##########
ls /usr/local/bin/rehex 
""",True,None))

# ZEPASSD
programs_ubuntu22_04.append(('ZEPASSD',
"""#sudo apt-get install -y # boost.program-options, boost.crc, boost.circular-buffer, libfftw3, libuhd 3.9.5 or later
sudo apt-get install -y libuhd-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/pvachon/zepassd.git
cd zepassd
make
########## Verify ##########
ls ~/Installed_by_FISSURE/zepassd/zepassd
""",True,None))

# iridium-toolkit
programs_ubuntu22_04.append(('iridium-toolkit',
"""#Python (2.7), NumPy (scipy), crcmod
sudo apt-get install -y mplayer
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/muccc/iridium-toolkit.git
git clone git://git.osmocom.org/osmo-ir77
cd osmo-ir77/codec/
sudo make
cp ir77_ambe_decode ~/Installed_by_FISSURE/iridium-toolkit/
########## Verify ##########
ls ~/Installed_by_FISSURE/osmo-ir77/codec/ir77_ambe_decode
""",True,None))

# IridiumLive
programs_ubuntu22_04.append(('IridiumLive',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/microp11/iridiumlive.git
wget -P ~/Installed_by_FISSURE/ https://github.com/microp11/iridiumlive/releases/download/v1.2/linux-x64.zip
unzip -q linux-x64.zip
rm linux-x64.zip
cd linux-x64
sudo chmod +x IridiumLive
########## Verify ##########
ls ~/Installed_by_FISSURE/linux-x64/IridiumLive
""",True,None))

# NETATTACK2 - Fix
programs_ubuntu22_04.append(('NETATTACK2',
"""#sudo pip install netifaces  # fix for python2
#sudo apt-get install -y python-scapy python-nmap python-nfqueue nmap  # this needs to be fixed, can it still run with python2?
sudo python2 -m pip install netifaces
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/chrizator/netattack2.git
sudo python2 -m pip install nmap
cd netattack2
wget http://archive.ubuntu.com/ubuntu/pool/universe/libn/libnetfilter-queue/libnetfilter-queue1_1.0.2-2_amd64.deb
sudo dpkg -i libnetfilter-queue1_1.0.2-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/n/nfqueue-bindings/python-nfqueue_0.6-1build2_amd64.deb
sudo dpkg -i python-nfqueue_0.6-1build2_amd64.deb 
""",True,None))

# Wifite
programs_ubuntu22_04.append(('Wifite',
"""# python, iwconfig, ifconfig, Aircrack-ng, tshark, reaver, bully, coWPAtty, pyrit, hashcat, hcxdumptool, hcxpcaptool
sudo apt-get install -y build-essential libpcap-dev aircrack-ng pixiewps libssl-dev hashcat libcurl4-openssl-dev pkg-config macchanger python-is-python3
sudo python3 -m pip install psycopg2-binary #scapy (python3 scapy with pip causes errors)
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/derv82/wifite2.git
git clone https://github.com/t6x/reaver-wps-fork-t6x
cd reaver-wps-fork-t6x/src
./configure
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/aanarchyy/bully
cd bully/src
make
sudo make install
cd ~/Installed_by_FISSURE
wget http://www.willhackforsushi.com/code/cowpatty/4.6/cowpatty-4.6.tgz
tar zxfv cowpatty-4.6.tgz
rm cowpatty-4.6.tgz
cd cowpatty-4.6
make
sudo cp cowpatty /usr/bin
cd ~/Installed_by_FISSURE
mkdir Pyrit-v0.5.0
cd Pyrit-v0.5.0
wget https://github.com/JPaulMora/Pyrit/releases/download/v0.5.0/Pyrit-v0.5.0.zip
unzip -q Pyrit-v0.5.0.zip
rm Pyrit-v0.5.0.zip
sudo apt-get install -y python2-dev
python2 setup.py clean
python2 setup.py build
sudo python2 setup.py install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxdumptool.git
cd hcxdumptool
make
sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/ZerBea/hcxtools.git
cd hcxtools
make
sudo make install
sudo ln -s /usr/bin/hcxpcapngtool /usr/bin/hcxpcaptool
#sudo apt-get install -y tshark
""",True,None))

# rtl_433
programs_ubuntu22_04.append(('rtl_433',
"""#sudo apt-get install -y rtl-433
sudo apt-get install -y libtool libusb-1.0-0-dev librtlsdr-dev rtl-sdr build-essential cmake pkg-config
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/merbanan/rtl_433.git
cd rtl_433/
mkdir build
cd build
cmake ..
make
sudo make install
########## Verify ##########
rtl_433 -help
""",True,None))

# RouterSploit
programs_ubuntu22_04.append(('RouterSploit',
"""sudo apt-get install -y python3-pip libglib2.0-dev rustc
sudo python3 -m pip install setuptools-rust
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://www.github.com/threat9/routersploit
cd routersploit
python3 -m pip install setuptools
python3 -m pip install -r requirements.txt
python3 -m pip install bluepy
########## Verify ##########
~/Installed_by_FISSURE/routersploit/rsf.py --help
""",True,None))

# Metasploit - FIX
programs_ubuntu22_04.append(('Metasploit',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
mkdir metasploit
cd metasploit
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
########## Verify ##########
ls /usr/bin/msfconsole
""",True,None))

# monitor_rtl433
programs_ubuntu22_04.append(('monitor_rtl433',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mcbridejc/monitor_rtl433.git
cd monitor_rtl433
sudo python3 setup.py install
sudo python3 -m pip install python-dateutil
sudo python3 -m pip install flask_table
########## Verify ##########
ls /usr/bin/monitor_rtl433
""",True,None))

# scan-ssid
programs_ubuntu22_04.append(('scan-ssid',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
sudo apt-get install -y iw
git clone https://github.com/Resethel/scan-ssid.git
cd scan-ssid
sudo cp scan-ssid /usr/local/bin
sudo chmod 755 /usr/local/bin/scan-ssid  # can't be in monitor mode, managed only
########## Verify ##########
scan-ssid --help
""",True,None))

# minimodem
programs_ubuntu22_04.append(('minimodem',
"""sudo apt-get install -y minimodem
########## Verify ##########
minimodem --version
""",True,None))

# WSJT-X
programs_ubuntu22_04.append(('WSJT-X',
"""sudo apt-get install -y wsjtx
########## Verify ##########
ls /usr/bin/wsjtx
""",True,None))

# Google Earth Pro
programs_ubuntu22_04.append(('Google Earth Pro',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
sudo dpkg -i google-earth-pro-stable_current_amd64.deb
########## Verify ##########
ls /usr/bin/google-earth-pro
""",True,None))

# gr-air-modes
programs_ubuntu22_04.append(('gr-air-modes',
"""sudo apt-get install -y gr-air-modes
########## Verify ##########
modes_rx --help
""",True,None))

# ESP8266 Deauther v2
programs_ubuntu22_04.append(('ESP8266 Deauther v2',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
wget https://github.com/SpacehuhnTech/esp8266_deauther/archive/v2.zip
unzip -q v2.zip
rm v2.zip
""",True,None))

# Viking
programs_ubuntu22_04.append(('Viking',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.code.sf.net/p/viking/code viking
sudo apt install -y gtk-doc-tools docbook-xsl yelp-tools libpng-dev libgtk-3-dev libicu-dev libjson-glib-dev intltool
sudo apt-get install -y libcurl4-gnutls-dev libglib2.0-dev-bin
sudo apt-get install -y libsqlite3-dev nettle-dev libmapnik-dev libgeoclue-2-dev libgexiv2-dev libgps-dev libmagic-dev libbz2-dev libzip-dev liboauth-dev
sudo apt-get install -y autopoint libnova-dev
cd viking
./autogen.sh
./configure
make
sudo make install
########## Verify ##########
viking --help
""",True,None))

# PyGPSClient
programs_ubuntu22_04.append(('PyGPSClient',
"""sudo apt install -y python3-pip python3-tk python3-pil python3-pil.imagetk
sudo python3 -m pip install --upgrade PyGPSClient
########## Verify ##########
ls /usr/local/bin/pygpsclient
""",True,None))

# Gpredict
programs_ubuntu22_04.append(('Gpredict',
"""sudo apt-get install -y gpredict
########## Verify ##########
gpredict --help
""",True,None))

# FoxtrotGPS
programs_ubuntu22_04.append(('FoxtrotGPS',
"""sudo apt-get install -y foxtrotgps
########## Verify ##########
foxtrotgps --help
""",True,None))

# multimon-ng
programs_ubuntu22_04.append(('multimon-ng',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/EliasOenal/multimonNG.git
cd multimonNG
mkdir build
cd build
qmake ../multimon-ng.pro
make
sudo make install
########## Verify ##########
ls /usr/local/bin/multimon-ng
""",True,None))

# Xastir
programs_ubuntu22_04.append(('Xastir',
"""sudo apt-get install -y xastir  # should non-superusers be allowed? sure, why not.
########## Verify ##########
sudo xastir -V
""",True,None))

# LTE-Cell-Scanner
programs_ubuntu22_04.append(('LTE-Cell-Scanner',
"""sudo apt-get install -y cmake libncurses5-dev liblapack-dev libblas-dev libboost-thread-dev libboost-system-dev libitpp-dev librtlsdr-dev libfftw3-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/JiaoXianjun/LTE-Cell-Scanner.git
cd LTE-Cell-Scanner
mkdir build
cd build
cmake ..
make 
sudo make install
########## Verify ##########
ls /usr/local/bin/CellSearch
""",True,None))

# btscanner
programs_ubuntu22_04.append(('btscanner',
"""sudo apt-get install -y btscanner
########## Verify ##########
btscanner --help
""",True,None))

# hcidump
programs_ubuntu22_04.append(('hcidump',
"""sudo apt-get install -y bluez-hcidump
########## Verify ##########
hcidump --help
""",True,None))

# GraphicsMagick
programs_ubuntu22_04.append(('GraphicsMagick',
"""sudo apt-get install -y graphicsmagick-imagemagick-compat
########## Verify ##########
gm -help
""",True,None))

# Spectrum Painter
programs_ubuntu22_04.append(('Spectrum Painter',
"""sudo python3 -m pip install numpy imageio 
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/polygon/spectrum_painter.git
#cd spectrum_painter/
#pip3 install --user -e .  # call with "python3 -m spectrum_painter.img2iqstream"
""",True,None))

# nrsc5 and nrsc5-gui
programs_ubuntu22_04.append(('nrsc5',
"""sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/theori-io/nrsc5.git
cd nrsc5
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
# nrsc5-gui
python3 -m pip install --upgrade Pillow
python3 -m pip install pyaudio
sudo apt-get install -y python-gobject
cd ~/Installed_by_FISSURE
git clone https://github.com/cmnybo/nrsc5-gui.git
########## Verify ##########
nrsc5 -v
""",True,None))

# # HAM2MON  # Doesn't work for 22.04
# programs_ubuntu22_04.append(('HAM2MON',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/madengr/ham2mon.git
# """,True,None))

# Anki
programs_ubuntu22_04.append(('Anki',
"""sudo apt-get install -y anki
########## Verify ##########
anki -h
""",True,None))

# Bless
programs_ubuntu22_04.append(('Bless',
"""sudo apt-get install -y bless
########## Verify ##########
ls /usr/bin/bless
""",True,None))

# trackerjacker
programs_ubuntu22_04.append(('trackerjacker',
"""sudo ln -s -f /usr/lib/x86_64-linux-gnu/libc.a /usr/lib/x86_64-linux-gnu/liblibc.a  # Python3.9 missing file
sudo python3 -m pip install trackerjacker
########## Verify ##########
sudo trackerjacker --help
""",True,None))

# airgeddon
programs_ubuntu22_04.append(('airgeddon',
"""sudo apt-get install -y crunch mdk3 hostapd lighttpd ruby-dev xterm isc-dhcp-server ettercap-text-only john
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone --depth 1 https://github.com/v1s1t0r1sh3r3/airgeddon.git
#asleap
mkdir asleap
cd asleap
wget http://http.kali.org/pool/main/a/asleap/asleap_2.3~git20201128.254acab-0kali1_amd64.deb
sudo dpkg -i asleap_2.3~git20201128.254acab-0kali1_amd64.deb
#bettercap
sudo apt-get install -y build-essential libpcap-dev net-tools 
cd ~/Installed_by_FISSURE
mkdir bettercap
cd bettercap
wget https://github.com/bettercap/bettercap/releases/download/v2.31.1/bettercap_linux_amd64_v2.31.1.zip
unzip -q bettercap_linux_amd64_v2.31.1.zip
rm bettercap_linux_amd64_v2.31.1.zip
sudo cp bettercap /usr/bin/
#mdk4
sudo apt-get install -y libnl-genl-3-dev
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/mdk4
cd mdk4
make
sudo make install
""",True,None))

# Hydra
programs_ubuntu22_04.append(('Hydra',
"""sudo apt-get install -y hydra
########## Verify ##########
ls /usr/bin/hydra
""",True,None))

# Enscribe
programs_ubuntu22_04.append(('Enscribe',
"""sudo apt-get install -y enscribe
########## Verify ##########
ls /usr/bin/enscribe
""",True,None))

# ESP32 Bluetooth Classic Sniffer - FIX
programs_ubuntu22_04.append(('ESP32 BT Classic Sniffer',
"""mkdir -p ~/Installed_by_FISSURE  # Requires Wireshark 3.4, cannot get it to work with other versions
cd ~/Installed_by_FISSURE
#git clone https://github.com/Matheus-Garbelini/esp32_bluetooth_classic_sniffer
#cd esp32_bluetooth_classic_sniffer
#sudo ./requirements.sh
#./build.sh
##sudo cp dissectors/h4bcm.so /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.4/epan/  # Needs to go where "sudo Wireshark" dissectors are located, check Wireshark version for 3.4
#rm ~/.local/lib/wireshark/plugins/3.4/epan/h4bcm.so  # To avoid "plugin 'h4bcm.so' was found in multiple directories" warning
""",False,None))



########################################################################
############################ DragonOS Focal ############################
########################################################################

programs_dragonOS_focal = []

# Misc. Dependencies
programs_dragonOS_focal.append(('Misc. Dependencies',
"""sudo apt-get -y update
#sudo apt-get -y install cmake
#sudo apt-get install -y python-setuptools python-dev build-essential
#sudo apt-get install -y curl
#curl https://bootstrap.pypa.io./pip/2.7/get-pip.py | sudo python2  # Installs pip 20.3.4
#sudo apt-get install -y python3-pip
#sudo python3 -m pip install cmake --upgrade
#sudo apt install -y python3-testresources
#sudo python3 -m pip install --upgrade setuptools
#sudo python3 -m pip install --upgrade virtualenv
#sudo python3 -m pip install matplotlib
#sudo python3 -m pip install PyYAML==5.1
#sudo python3 -m pip install pyyaml
#wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-scipy/python-scipy_0.19.1-2ubuntu1_amd64.deb
#sudo apt-get install -y ./python-scipy_0.19.1-2ubuntu1_amd64.deb
#rm python-scipy_0.19.1-2ubuntu1_amd64.deb
#sudo apt-get install -y gedit
#sudo apt-get install -y software-properties-common #python-software-properties # does Python3
#sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
#sudo apt-get install -y git 
sudo apt-get install -y libcanberra-gtk-module
sudo python3 -m pip install bitarray
sudo apt install net-tools
#sudo python3 -m pip install crcmod
sudo python3 -m pip install pycrypto
sudo apt-get install -y python-tk
#sudo python3 -m pip install pyzmq
#sudo apt-get install -y libosmocore-dev
#sudo apt-get install -y liborc-0.4-dev
sudo apt-get install -y expect
#sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
#sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python3 -m pip install pypcapfile
sudo python2 -m pip install pypcapfile
#sudo python2 -m pip install netaddr
#sudo python3 -m pip install psutil
#sudo python3 -m pip install pyserial
sudo apt-get install -y gpsd-clients python-gi-cairo
#sudo python3 -m pip install pandas
sudo apt-get install -y dsniff
sudo cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d  # removes sudo apt-get update warnings
sudo apt-get -y install ncurses-term
sudo ln -s /usr/src/falcon/build/src/gui/gui /usr/bin/FalconGUI

# . ~/.bashrc
# """,True,'Minimum Install'))

# fissure Command 
programs_dragonOS_focal.append(('fissure Command',
"""echo "[Desktop Entry]\nStartupWMClass=dashboard\nName=FISSURE\nTerminal=false\nType=Application\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=""" + fissure_directory + """/dashboard" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
########## Verify ##########
ls /usr/share/applications/fissure.desktop
""",True,'Minimum Install'))

# Wireshark
programs_dragonOS_focal.append(('Wireshark',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,'Minimum Install'))

# 8812au Driver
programs_dragonOS_focal.append(('8812au Driver',
"""sudo apt-get -y install dkms
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/rtl8812au/
cd ~/Installed_by_FISSURE/rtl8812au
sudo make dkms_install
""",True,'Hardware'))

# fl2k
programs_dragonOS_focal.append(('fl2k',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_dragonOS_focal.append(('Proxmark3',
"""sudo apt-get install -y p7zip git build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libreadline-dev libpcsclite-dev gcc-arm-none-eabi
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# gr-acars
programs_dragonOS_focal.append(('gr-acars',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-acars/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import acars"
""",True,'Out-of-Tree Modules'))

# gr-ainfosec
programs_dragonOS_focal.append(('gr-ainfosec',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ainfosec/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ainfosec"
""",True,'Out-of-Tree Modules'))

# gr-bluetooth-maint-3.8
programs_dragonOS_focal.append(('gr-bluetooth-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/libbtbb-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-bluetooth-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo ln -s /usr/local/lib/python3.8/site-packages/gr_bluetooth/ /usr/local/lib/python3.8/dist-packages/
sudo ln -s /usr/local/lib/python3.8/site-packages/pcapdump/ /usr/local/lib/python3.8/dist-packages/
########## Verify ##########
ls /usr/local/bin/btrx
""",True,'Out-of-Tree Modules'))

# gr-clapper_plus-maint-3.8
programs_dragonOS_focal.append(('gr-clapper_plus-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-clapper_plus-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import clapper_plus"
""",True,'Out-of-Tree Modules'))

# gr-fuzzer
programs_dragonOS_focal.append(('gr-fuzzer',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-fuzzer/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import fuzzer"
""",True,'Out-of-Tree Modules'))

# gr-garage_door-maint-3.8
programs_dragonOS_focal.append(('gr-garage_door-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-garage_door-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import garage_door"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4-maint-3.8
programs_dragonOS_focal.append(('gr-ieee802-15-4-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
#sudo make install
#sudo ldconfig
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_CSS_PHY.grc
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_OQPSK_PHY.grc
########## Verify ##########
python3 -c "import ieee802_15_4"
""",True,'Out-of-Tree Modules'))

# gr-j2497-maint-3.8
programs_dragonOS_focal.append(('gr-j2497-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-j2497-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import j2497"
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore-maint-3.8
programs_dragonOS_focal.append(('gr-tpms_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-tpms_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import tpms_poore"
""",True,'Out-of-Tree Modules'))

# gr-X10-maint-3.8
programs_dragonOS_focal.append(('gr-X10-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-X10-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import X10"
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore-maint-3.8
programs_dragonOS_focal.append(('gr-zwave_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-zwave_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import zwave_poore"
""",True,'Out-of-Tree Modules'))

# Dump1090
programs_dragonOS_focal.append(('Dump1090',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,None))

# srsRAN/srsLTE
programs_dragonOS_focal.append(('srsRAN',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
#sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
#sudo make install
#sudo ldconfig
#sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,None))

# LTE-ciphercheck
programs_dragonOS_focal.append(('LTE-ciphercheck',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf 
""",True,None))

# # GNU Radio
# programs_dragonOS_focal.append(('GNU Radio',
# """sudo apt-get install -y gnuradio
# #sudo rm -f /usr/share/mime/packages/gnuradio.xml  # Is this still needed for 20.04.1?
# #sudo ln -s /usr/share/gnuradio/grc/freedesktop/gnuradio-grc.xml /usr/share/mime/packages/gnuradio.xml  # Is this still needed for 20.04.1?
# #sudo update-mime-database -V /usr/share/mime/  # Is this still needed for 20.04.1?

# # Configure GNU Radio
# (gnuradio-companion &) && sleep 5 && killall gnuradio-companion
# /bin/echo -e "[grc]\nlocal_blocks_path=""" + fissure_directory + """/Custom_Blocks\nxterm_executable=/usr/bin/gnome-terminal" > ~/.gnuradio/config.conf
# sudo cp /usr/lib/uhd/utils/uhd-usrp.rules /etc/udev/rules.d/  # For B205 mini
# sudo udevadm control --reload-rules
# sudo udevadm trigger
# sudo mkdir /usr/share/uhd
# sudo chmod -R 777 /usr/share/uhd
# uhd_images_downloader

# # Find OOT Modules
# printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3.8/site-packages:/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.bashrc
# printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
# printf "\\n%s\\n" "export PYTHONPATH=/usr/local/lib/python3/dist-packages:/usr/lib/python3/site-packages:$PYTHONPATH" >> ~/.profile  # For GRC without terminal
# printf "\\n%s\\n" "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> ~/.profile  # For GRC without terminal
# . ~/.bashrc
# sudo apt-get install -y libzmq3-dev swig cmake
# sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
# sudo ldconfig

# sudo apt-get install -y libzmq3-dev
# sudo apt-get install -y swig
# sudo sh -c "/bin/echo -e '/usr/local/lib' >> /etc/ld.so.conf"
# sudo ldconfig
# ########## Verify ##########
# gnuradio-companion --help
# """,True,'Minimum Install'))

# # Scapy
# programs_dragonOS_focal.append(('Scapy',
# """sudo python3 -m pip install scapy
# sudo python2 -m pip install scapy
# #sudo apt-get install -y scapy
# ########## Verify ##########
# python2 -c "import scapy" && python3 -c "import scapy"
# """,True,'Minimum Install'))

# # LimeSDR
# programs_dragonOS_focal.append(('LimeSDR',
# """sudo add-apt-repository -y ppa:myriadrf/drivers
# sudo apt-get update
# sudo apt-get install -y limesuite liblimesuite-dev limesuite-udev limesuite-images
# sudo apt-get install -y soapysdr-tools soapysdr-module-lms7
# sudo apt-get install -y libboost-all-dev swig
# ########## Verify ##########
# ls /usr/bin/LimeSuiteGUI
# """,True,'Hardware'))

# # BladeRF
# programs_dragonOS_focal.append(('BladeRF',
# """sudo apt-get install -y libusb-1.0-0-dev libusb-1.0-0 build-essential cmake libncurses5-dev libtecla1 pkg-config git wget  # no package: libtecla1-dev       
# sudo apt-get install -y bladerf
# sudo apt-get install -y bladerf-fpga-hostedx115
# ########## Verify ##########
# bladeRF-cli --help
# """,True,'Hardware'))

# # USRP X300 Series
# programs_dragonOS_focal.append(('USRP X300 Series',
# """mkdir -p ~/Installed_by_FISSURE  # Set MTU to 9000 and run uhd_image_loader command
# cd ~/Installed_by_FISSURE
# wget https://codeload.github.com/EttusResearch/uhd/zip/release_003_010_003_000 -O uhd.zip
# unzip uhd.zip
# cd uhd-release_003_010_003_000/host/include
# sudo cp -Rv uhd/rfnoc /usr/share/uhd/
# rm -Rf ~/Installed_by_FISSURE/uhd-release_003_010_003_000
# /usr/lib/uhd/utils/uhd_images_downloader.py
# #"/usr/bin/uhd_image_loader" --args="type=x300,addr=192.168.40.2"  # Use your X310 IP
# sudo sysctl -w net.core.wmem_max=24862979
# """,True,'Hardware'))

# # HackRF
# programs_dragonOS_focal.append(('HackRF',
# """sudo apt-get install -y libusb-1.0-0-dev
# mkdir -p ~/Installed_by_FISSURE
# cp -R """ + fissure_directory + """/Tools/hackrf-2018.01.1/ ~/Installed_by_FISSURE/
# rm -Rf ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
# mkdir ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
# cd ~/Installed_by_FISSURE/hackrf-2018.01.1/host/build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# sudo cp """ + fissure_directory + """/Tools/53-hackrf.rules /etc/udev/rules.d/53-hackrf.rules
# sudo udevadm trigger --action=change
# #sudo apt-get install -y hackrf
# #pybombs install gr-osmosdr
# #sudo apt-get install gr-osmosdr  # Not always found in the repositories
# ########## Verify ##########
# hackrf_sweep --help
# """,True,'Hardware'))

# # Zigbee Sniffer
# programs_dragonOS_focal.append(('Zigbee Sniffer',
# """cp -R """ + fissure_directory + """/Tools/OpenSniffer-0.1/ ~/Installed_by_FISSURE/
# cd ~/Installed_by_FISSURE/OpenSniffer-0.1/
# sudo python3 setup.py install
# sudo add-apt-repository -y ppa:rock-core/qt4  # PyQt4
# sudo apt-get update
# wget http://archive.ubuntu.com/ubuntu/pool/universe/q/qt-assistant-compat/libqtassistantclient4_4.6.3-7build1_amd64.deb -O ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb 
# sudo apt-get install -y ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
# wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-qt4/python-qt4_4.12.1+dfsg-2_amd64.deb -O ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
# sudo apt-get install -y ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
# wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-pyaudio/python-pyaudio_0.2.11-1build2_amd64.deb -O ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
# sudo apt-get install -y ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
# rm ~/Downloads/libqtassistantclient4_4.6.3-7build1_amd64.deb
# rm ~/Downloads/python-qt4_4.12.1+dfsg-2_amd64.deb
# rm ~/Downloads/python-pyaudio_0.2.11-1build2_amd64.deb
# sudo apt-get install -y mlocate
# """,True,'Hardware'))

# # gr-adsb-master
# programs_dragonOS_focal.append(('gr-adsb-master',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-adsb-master/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import adsb"
# """,True,'Out-of-Tree Modules'))

# # gr-ais-master
# programs_dragonOS_focal.append(('gr-ais-master',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ais-master/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import ais"
# """,True,'Out-of-Tree Modules'))

# # gr-dect2-master
# programs_dragonOS_focal.append(('gr-dect2-master',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-dect2-master/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import dect2"
# """,True,'Out-of-Tree Modules'))

# # gr-foo-maint-3.8
# programs_dragonOS_focal.append(('gr-foo-maint-3.8',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-foo-maint-3.8/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import foo"
# """,True,'Out-of-Tree Modules'))

# # gr-gsm-master
# programs_dragonOS_focal.append(('gr-gsm-master',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-gsm-master/
# sudo rm -Rf build
# sudo apt-get install -y gr-osmosdr
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# # gr-gsm needs to be made twice for "import arfcn" block to work
# make 
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import grgsm"
# """,True,'Out-of-Tree Modules'))

# # gr-ieee802-11-maint-3.8
# programs_dragonOS_focal.append(('gr-ieee802-11-maint-3.8',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-11-maint-3.8/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import ieee802_11"
# """,True,'Out-of-Tree Modules'))

# # gr-iridium-maint-3.8
# programs_dragonOS_focal.append(('gr-iridium-maint-3.8',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-iridium-maint-3.8/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import iridium"
# """,True,'Out-of-Tree Modules'))

# # gr-limesdr-gr-3.8
# programs_dragonOS_focal.append(('gr-limesdr-gr-3.8',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-limesdr-gr-3.8/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import limesdr"
# """,True,'Out-of-Tree Modules'))

# # gr-nrsc5-maint-3.8
# programs_dragonOS_focal.append(('gr-nrsc5-maint-3.8',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-nrsc5-maint-3.8/
# sudo rm -Rf build
# sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import nrsc5"
# """,True,'Out-of-Tree Modules'))

# # gr-paint-maint-3.8
# programs_dragonOS_focal.append(('gr-paint-maint-3.8',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-paint-maint-3.8/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-paint-maint-3.8/
# gcc tgatoluma.c -o tgatoluma
# chmod +x tgatoluma
# cp tgatoluma ~/.local/bin/
# ########## Verify ##########
# python3 -c "import paint"
# """,True,'Out-of-Tree Modules'))

# # gr-rds-maint-3.8
# programs_dragonOS_focal.append(('gr-rds-maint-3.8',
# """cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-rds-maint-3.8/
# sudo rm -Rf build
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# ########## Verify ##########
# python3 -c "import rds"
# """,True,'Out-of-Tree Modules'))

# # QSpectrumAnalyzer
# programs_dragonOS_focal.append(('QSpectrumAnalyzer',
# """#sudo add-apt-repository -y ppa:myriadrf/drivers
# #sudo apt-get -y update
# sudo apt-get install -y python3-pip python3-pyqt5 python3-numpy python3-scipy python3-soapysdr  # No package: soapysdr
# sudo apt-get install -y soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7
# python3 -m pip install --user qspectrumanalyzer  # log in again, run without sudo
# ########## Verify ##########
# ls ~/.local/bin/qspectrumanalyzer
# """,True,None))

# # GQRX
# programs_dragonOS_focal.append(('GQRX',
# """sudo apt-get install -y gqrx-sdr
# ########## Verify ##########
# ls /usr/bin/gqrx
# """,True,None))

# # QtDesigner
# programs_dragonOS_focal.append(('QtDesigner',
# """sudo apt-get install -y build-essential qtcreator qt5-default
# ########## Verify ##########
# ls /usr/bin/designer
# """,True,None))

# # Grip
# programs_dragonOS_focal.append(('Grip',
# """sudo python3 -m pip install grip
# ########## Verify ##########
# grip --help
# """,True,None))

# # Kismet
# programs_dragonOS_focal.append(('Kismet',
# """sudo apt-get install -y kismet  # add your computer's username to the group
# ########## Verify ##########
# ls /usr/bin/kismet
# """,True,None))

# # UDP Replay
# programs_dragonOS_focal.append(('UDP Replay',
# """sudo apt-get install -y libpcap-dev
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/rigtorp/udpreplay.git
# cd ~/Installed_by_FISSURE/udpreplay
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# ########## Verify ##########
# ls /usr/local/bin/udpreplay
# """,True,None))

# # V2Verifier
# programs_dragonOS_focal.append(('V2Verifier',
# """sudo apt-get install -y libgmp3-dev python3-tk python3-pil.imagetk
# sudo python3 -m pip install fastecdsa
# sudo python3 -m pip install -U pyyaml
# #sudo apt install -y git cmake libuhd-dev uhd-host swig libgmp3-dev python3-pip python3-tk python3-pil 
# #python3-pil.imagetk gnuradio
# #Needs gr-foo and gr-ieee802-11
# """,True,None))

# # # OpenBTS, requires old packages not meant for 20.04
# # programs_dragonOS_focal.append(('OpenBTS',
# # """sudo apt-get install -y software-properties-common  
# # sudo add-apt-repository -y ppa:git-core/ppa
# # sudo apt-get update
# # sudo apt-get install -y git
# # sudo apt-get install -y asterisk
# # sudo apt-get install -y twinkle
# # sudo apt-get install -y autoconf libtool libosip2-dev libortp-dev libusb-1.0-0-dev g++ sqlite3 libsqlite3-dev erlang libreadline6-dev libncurses5-dev
# # mkdir ~/Installed_by_FISSURE/OpenBTS
# # cd ~/Installed_by_FISSURE/OpenBTS
# # git clone https://github.com/RangeNetworks/dev.git
# # cd dev
# # ./clone.sh
# # ./switchto.sh master
# # cd liba53/
# # sudo make install
# # cd ..
# # git clone https://github.com/tom-2015/fakecoredumper.git
# # cd fakecoredumper
# # chmod +x install.sh
# # ./install.sh
# # cd ..
# # sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/build.sh ./build.sh
# # #sudo apt install g++-5 -y
# # #sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 
# # wget http://archive.ubuntu.com/ubuntu/pool/universe/l/linphone/libortp9_3.6.1-3build1_amd64.deb
# # sudo dpkg -i libortp9_3.6.1-3build1_amd64.deb
# # wget http://archive.ubuntu.com/ubuntu/pool/universe/s/srtp/libsrtp0_1.4.5~20130609~dfsg-2ubuntu1_amd64.deb
# # sudo dpkg -i libsrtp0_1.4.5~20130609~dfsg-2ubuntu1_amd64.deb
# # wget http://archive.ubuntu.com/ubuntu/pool/universe/p/pyzmq/python-zmq_16.0.2-2build2_amd64.deb
# # sudo dpkg -i python-zmq_16.0.2-2build2_amd64.deb 
# # ./build.sh B210
# # sudo mkdir /etc/OpenBTS
# # cd openbts
# # sudo sqlite3 -init ./apps/OpenBTS.example.sql /etc/OpenBTS/OpenBTS.db ".quit"
# # #sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/usrp_b210_fpga.bin /usr/share/uhd/images/usrp_b210_fpga.bin
# # cd apps
# # ln -s ../Transceiver52M/transceiver .
# # sudo apt-get install -y sqlitebrowser
# # sudo mkdir -p /var/lib/asterisk/sqlite3dir
# # cd ../../subscriberRegistry
# # make
# # cd apps
# # cp """ + fissure_directory + """/Tools/openbts_files_18_04/sipauthserve.example.sql sipauthserve.example.sql
# # sudo sqlite3 -init sipauthserve.example.sql /etc/OpenBTS/sipauthserve.db ".quit"
# # cd ../../smqueue
# # autoconf -i
# # ./configure
# # make
# # cp """ + fissure_directory + """/Tools/openbts_files_18_04/smqueue.example.sql smqueue/smqueue.example.sql
# # sudo sqlite3 -init smqueue/smqueue.example.sql /etc/OpenBTS/smqueue.db ".quit"
# # sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/sip.conf /etc/asterisk/sip.conf
# # sudo cp """ + fissure_directory + """/Tools/openbts_files_18_04/extensions.conf /etc/asterisk/extensions.conf
# # sudo apt-get install -y pcscd pcsc-tools libccid libpcsclite-dev
# # cd ~/Installed_by_FISSURE
# # git clone git://git.osmocom.org/pysim
# # cd pysim
# # sudo pip3 install -r requirements.txt
# # sudo update-alternatives --remove-all gcc
# # sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
# # """,True))

# # FALCON
# programs_dragonOS_focal.append(('FALCON',
# """sudo apt-get install -y build-essential git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev  # For srsLTE
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# sudo apt-get install -y libglib2.0-dev libudev-dev libcurl4-gnutls-dev libboost-all-dev qtdeclarative5-dev libqt5charts5-dev  # FALCON
# git clone https://github.com/falkenber9/falcon.git
# cd falcon
# mkdir build
# cd build
# cmake -DFORCE_SUBPROJECT_SRSLTE=ON -DCMAKE_INSTALL_PREFIX=/usr ../
# make
# sudo make install
# #sudo xargs rm < install_manifest.txt  # uninstall
# #make clean
# ########## Verify ##########
# ls /usr/bin/FalconGUI
# """,True,None))

# # Aircrack-ng
# programs_dragonOS_focal.append(('Aircrack-ng',
# """sudo apt-get install -y aircrack-ng
# ########## Verify ##########
# aircrack-ng --help
# """,True,None))

# # Geany
# programs_dragonOS_focal.append(('Geany',
# """sudo apt-get install -y geany  # needs [styling] line_height=0;2; added to Tools>Configuration Files>filetypes.common to see underscores
# ########## Verify ##########
# geany --help
# """,True,None))

# # Arduino IDE
# programs_dragonOS_focal.append(('Arduino IDE',
# """wget -P ~/Installed_by_FISSURE/ https://downloads.arduino.cc/arduino-1.8.15-linux64.tar.xz
# cd ~/Installed_by_FISSURE
# tar -xf arduino-1.8.15-linux64.tar.xz
# rm arduino-1.8.15-linux64.tar.xz
# cd arduino-1.8.15/
# sudo ./install.sh
# cp -R """ + fissure_directory + """/Tools/Esp8266_listen_trigger/ ~/Installed_by_FISSURE/
# ########## Verify ##########
# arduino --version
# """,True,None))

# # Minicom
# programs_dragonOS_focal.append(('Minicom',
# """sudo apt-get install -y minicom
# ########## Verify ##########
# ls /usr/bin/minicom
# """,True,None))

# # PuTTY
# programs_dragonOS_focal.append(('PuTTY',
# """sudo apt-get install -y putty
# ########## Verify ##########
# putty --help
# """,True,None))

# # openHAB
# programs_dragonOS_focal.append(('openHAB',
# """sudo apt-get -yq install gnupg curl
# sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
# cd ~/Downloads
# curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
# sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
# sudo apt-get update
# sudo apt-get install -y zulu11-jdk
# rm zulu-repo_1.0.0-2_all.deb
# wget -qO - 'https://openhab.jfrog.io/artifactory/api/gpg/key/public' | sudo apt-key add -
# sudo apt-get install -y apt-transport-https
# echo 'deb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list
# sudo apt-get update && sudo apt-get install -y openhab
# ########## Verify ##########
# ls /usr/bin/openhab-cli
# """,True,None))

# # rtl-zwave
# programs_dragonOS_focal.append(('rtl-zwave',
# """mkdir -p ~/Installed_by_FISSURE
# sudo apt-get install -y libpcap-dev
# cp -R """ + fissure_directory + """/Tools/rtl-zwave-master ~/Installed_by_FISSURE/
# cd ~/Installed_by_FISSURE/rtl-zwave-master
# make
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/rtl-zwave-master/rtl_zwave
# """,True,None))

# # waving-z
# programs_dragonOS_focal.append(('waving-z',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE/
# git clone https://github.com/baol/waving-z.git
# cd ~/Installed_by_FISSURE/waving-z
# mkdir build
# cd build
# cmake .. -DCMAKE_BUILD_TYPE=Release
# cmake --build .
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/waving-z/build/wave-in
# """,True,None))

# # baudline
# programs_dragonOS_focal.append(('baudline',
# """mkdir -p ~/Installed_by_FISSURE
# tar -xf """ + fissure_directory + """/Tools/baudline_1.08_linux_x86_64.tar.gz -C ~/Installed_by_FISSURE
# ########## Verify ##########
# ~/Installed_by_FISSURE/baudline_1.08_linux_x86_64/baudline --help
# """,True,None))

# # Universal Radio Hacker
# programs_dragonOS_focal.append(('Universal Radio Hacker',
# """sudo python3 -m pip install cython
# sudo python3 -m pip install urh
# ########## Verify ##########
# urh --version
# """,True,None))

# # Inspectrum
# programs_dragonOS_focal.append(('Inspectrum',
# """sudo apt-get install -y inspectrum
# ########## Verify ##########
# inspectrum --help
# """,True,None))

# # OpenCPN
# programs_dragonOS_focal.append(('OpenCPN',
# """sudo add-apt-repository -y ppa:opencpn/opencpn
# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C865EB40
# sudo apt-get update
# sudo apt-get install -y opencpn
# ########## Verify ##########
# ls /usr/bin/opencpn
# """,True,None))

# # Kalibrate
# programs_dragonOS_focal.append(('Kalibrate',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/steve-m/kalibrate-rtl.git
# cd kalibrate-rtl
# ./bootstrap && CXXFLAGS='-W -Wall -O3' ./configure && make
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/kalibrate-rtl/src/kal
# """,True,None))

# # retrogram-rtlsdr
# programs_dragonOS_focal.append(('retrogram-rtlsdr',
# """mkdir -p ~/Installed_by_FISSURE
# sudo apt-get install -y librtlsdr-dev libncurses5-dev libboost-program-options-dev
# cp -R """ + fissure_directory + """/Tools/retrogram-rtlsdr-master ~/Installed_by_FISSURE/
# cd ~/Installed_by_FISSURE/retrogram-rtlsdr-master
# make
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/retrogram-rtlsdr-master/retrogram-rtlsdr
# """,True,None))

# # RTLSDR-Airband
# programs_dragonOS_focal.append(('RTLSDR-Airband',
# """sudo apt-get install -y build-essential cmake pkg-config libmp3lame-dev libshout3-dev libconfig++-dev libfftw3-dev libpulse-dev
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/szpajder/RTLSDR-Airband.git
# cd RTLSDR-Airband
# mkdir build
# cd build
# cmake ../
# make
# sudo make install
# ########## Verify ##########
# rtl_airband -h
# """,True,None))

# # Spektrum
# programs_dragonOS_focal.append(('Spektrum',
# """echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/rtl-sdr.conf  # Restart computer to use RTL device
# echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0bda", ATTRS{idProduct}=="2838", GROUP="adm", MODE="0666"' | sudo tee /etc/udev/rules.d/20.rtlsdr.rules
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# wget -P ~/Installed_by_FISSURE/ https://github.com/pavels/spektrum/releases/download/2.1.0/spektrum-linux64.tar.gz
# tar -xf spektrum-linux64.tar.gz
# rm spektrum-linux64.tar.gz
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/spektrum/spektrum
# """,True,None))

# # SDRTrunk
# programs_dragonOS_focal.append(('SDRTrunk',
# """#sudo apt-get -yq install gnupg curl  # Java (if needed)
# #sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
# #cd ~/Downloads
# #curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb
# #sudo apt-get install ./zulu-repo_1.0.0-2_all.deb
# #sudo apt-get update
# #sudo apt-get install -y zulu11-jdk
# #rm zulu-repo_1.0.0-2_all.deb
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# wget -P ~/Installed_by_FISSURE/ https://github.com/DSheirer/sdrtrunk/releases/download/v0.5.0-alpha.6/sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
# unzip -q sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
# rm sdr-trunk-linux-x86_64-v0.5.0-alpha6.zip
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/sdr-trunk-linux-x86_64-v0.5.0-alpha6/bin/sdr-trunk
# """,True,None))

# # Audio Tools
# programs_dragonOS_focal.append(('Audio Tools',
# """sudo apt-get install -y audacity sox lame mpv ffmpeg mplayer
# ########## Verify ##########
# audacity --version && sox --version
# """,True,None))

# # Video Tools
# programs_dragonOS_focal.append(('Video Tools',
# """sudo apt-get install -y snapd
# sudo snap install vlc
# sudo apt-add-repository -y ppa:maarten-baert/simplescreenrecorder
# sudo apt-get update
# sudo apt-get install -y simplescreenrecorder
# ########## Verify ##########
# simplescreenrecorder --help
# """,True,None))

# # radiosonde_auto_rx
# programs_dragonOS_focal.append(('radiosonde_auto_rx',
# """sudo apt-get install -y python3 python3-numpy python3-setuptools python3-crcmod python3-requests python3-dateutil python3-pip python3-flask sox git build-essential libtool cmake usbutils libusb-1.0-0-dev rng-tools libsamplerate-dev libatlas3-base libgfortran5
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/projecthorus/radiosonde_auto_rx.git
# cd radiosonde_auto_rx/auto_rx
# ./build.sh
# cp station.cfg.example station.cfg
# sudo python3 -m pip install -r requirements.txt
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/radiosonde_auto_rx/auto_rx/auto_rx.py
# """,True,None))

# # SdrGlut
# programs_dragonOS_focal.append(('SdrGlut',
# """sudo apt-get install -y librtaudio-dev libsoapysdr-dev libopenal-dev libliquid-dev freeglut3 freeglut3-dev libalut0 libalut-dev libsndfile1-dev 
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/jgaeddert/liquid-dsp.git
# cd liquid-dsp/
# ./bootstrap.sh
# ./configure
# make
# sudo make install
# sudo ldconfig
# cd ~/Installed_by_FISSURE
# git clone https://github.com/righthalfplane/SdrGlut.git
# cp -f """ + fissure_directory + """/Tools/SdrGlut/firstFile.h ~/Installed_by_FISSURE/SdrGlut/MainSource/
# cp -f """ + fissure_directory + """/Tools/SdrGlut/makefileUbunta ~/Installed_by_FISSURE/SdrGlut/makefileUbunta
# cd SdrGlut
# make -f makefileUbunta
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/SdrGlut/sdrglut.x
# """,True,None))

# # rehex
# programs_dragonOS_focal.append(('rehex',
# """sudo apt-get install -y build-essential git libwxgtk3.0-gtk3-dev libjansson-dev libcapstone-dev liblua5.3-dev lua5.3 lua5.2 libunistring-dev libgtk-3-dev lua-busted
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/solemnwarning/rehex.git
# cd rehex
# sudo git config --global --add safe.directory """ + os.path.expanduser('~') + """/Installed_by_FISSURE/rehex
# sudo cpan Template
# sudo make install
# ########## Verify ##########
# ls /usr/local/bin/rehex 
# """,True,None))

# # ZEPASSD
# programs_dragonOS_focal.append(('ZEPASSD',
# """#sudo apt-get install -y # boost.program-options, boost.crc, boost.circular-buffer, libfftw3, libuhd 3.9.5 or later
# sudo apt-get install -y libuhd-dev  # Might need to be installed a second time?
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/pvachon/zepassd.git
# cd zepassd
# make
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/zepassd/zepassd
# """,True,None))

# # iridium-toolkit
# programs_dragonOS_focal.append(('iridium-toolkit',
# """#Python (2.7), NumPy (scipy), crcmod
# sudo apt-get install -y mplayer
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/muccc/iridium-toolkit.git
# git clone git://git.osmocom.org/osmo-ir77
# cd osmo-ir77/codec/
# sudo make
# cp ir77_ambe_decode ~/Installed_by_FISSURE/iridium-toolkit/
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/osmo-ir77/codec/ir77_ambe_decode
# """,True,None))

# # IridiumLive
# programs_dragonOS_focal.append(('IridiumLive',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/microp11/iridiumlive.git
# wget -P ~/Installed_by_FISSURE/ https://github.com/microp11/iridiumlive/releases/download/v1.2/linux-x64.zip
# unzip -q linux-x64.zip
# rm linux-x64.zip
# cd linux-x64
# sudo chmod +x IridiumLive
# ########## Verify ##########
# ls ~/Installed_by_FISSURE/linux-x64/IridiumLive
# """,True,None))

# # NETATTACK2
# programs_dragonOS_focal.append(('NETATTACK2',
# """#sudo pip install netifaces  # fix for python2
# #sudo apt-get install -y python-scapy python-nmap python-nfqueue nmap  # this needs to be fixed, can it still run with python2?
# sudo python2 -m pip install netifaces
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/chrizator/netattack2.git
# sudo python2 -m pip install nmap
# cd netattack2
# wget http://archive.ubuntu.com/ubuntu/pool/universe/libn/libnetfilter-queue/libnetfilter-queue1_1.0.2-2_amd64.deb
# sudo dpkg -i libnetfilter-queue1_1.0.2-2_amd64.deb
# wget http://archive.ubuntu.com/ubuntu/pool/universe/n/nfqueue-bindings/python-nfqueue_0.6-1build2_amd64.deb
# sudo dpkg -i python-nfqueue_0.6-1build2_amd64.deb 
# """,True,None))

# # Wifite
# programs_dragonOS_focal.append(('Wifite',
# """# python, iwconfig, ifconfig, Aircrack-ng, tshark, reaver, bully, coWPAtty, pyrit, hashcat, hcxdumptool, hcxpcaptool
# sudo apt-get install -y build-essential libpcap-dev aircrack-ng pixiewps libssl-dev hashcat libcurl4-openssl-dev pkg-config macchanger
# sudo python3 -m pip install psycopg2-binary scapy
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/derv82/wifite2.git
# git clone https://github.com/t6x/reaver-wps-fork-t6x
# cd reaver-wps-fork-t6x/src
# ./configure
# make
# sudo make install
# cd ~/Installed_by_FISSURE
# git clone https://github.com/aanarchyy/bully
# cd bully/src
# make
# sudo make install
# cd ~/Installed_by_FISSURE
# wget http://www.willhackforsushi.com/code/cowpatty/4.6/cowpatty-4.6.tgz
# tar zxfv cowpatty-4.6.tgz
# rm cowpatty-4.6.tgz
# cd cowpatty-4.6
# make
# sudo cp cowpatty /usr/bin
# cd ~/Installed_by_FISSURE
# mkdir Pyrit-v0.5.0
# cd Pyrit-v0.5.0
# wget https://github.com/JPaulMora/Pyrit/releases/download/v0.5.0/Pyrit-v0.5.0.zip
# unzip -q Pyrit-v0.5.0.zip
# rm Pyrit-v0.5.0.zip
# sudo apt-get install -y python2-dev
# python2 setup.py clean
# python2 setup.py build
# sudo python2 setup.py install
# cd ~/Installed_by_FISSURE
# git clone https://github.com/ZerBea/hcxdumptool.git
# cd hcxdumptool
# make
# sudo make install
# cd ~/Installed_by_FISSURE
# git clone https://github.com/ZerBea/hcxtools.git
# cd hcxtools
# make
# sudo make install
# sudo ln -s /usr/bin/hcxpcapngtool /usr/bin/hcxpcaptool
# #sudo apt-get install -y tshark
# ########## Verify ##########
# ~/Installed_by_FISSURE/wifite2/Wifite.py --help
# """,True,None))

# # rtl_433
# programs_dragonOS_focal.append(('rtl_433',
# """#sudo apt-get install -y rtl-433
# sudo apt-get install -y libtool libusb-1.0-0-dev librtlsdr-dev rtl-sdr build-essential cmake pkg-config
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/merbanan/rtl_433.git
# cd rtl_433/
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# ########## Verify ##########
# rtl_433 -help
# """,True,None))

# # RouterSploit
# programs_dragonOS_focal.append(('RouterSploit',
# """sudo apt-get install -y python3-pip libglib2.0-dev rustc
# sudo python3 -m pip install setuptools-rust
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://www.github.com/threat9/routersploit
# cd routersploit
# python3 -m pip install setuptools
# python3 -m pip install -r requirements.txt
# python3 -m pip install bluepy
# ########## Verify ##########
# ~/Installed_by_FISSURE/routersploit/rsf.py --help
# """,True,None))

# # Metasploit
# programs_dragonOS_focal.append(('Metasploit',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# mkdir metasploit
# cd metasploit
# curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
# ########## Verify ##########
# ls /usr/bin/msfconsole
# """,True,None))

# # monitor_rtl433
# programs_dragonOS_focal.append(('monitor_rtl433',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/mcbridejc/monitor_rtl433.git
# cd monitor_rtl433
# sudo python3 setup.py install
# sudo python3 -m pip install python-dateutil
# sudo python3 -m pip install flask_table
# ########## Verify ##########
# ls /usr/bin/monitor_rtl433
# """,True,None))

# # scan-ssid
# programs_dragonOS_focal.append(('scan-ssid',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# sudo apt-get install -y iw
# git clone https://github.com/Resethel/scan-ssid.git
# cd scan-ssid
# sudo cp scan-ssid /usr/local/bin
# sudo chmod 755 /usr/local/bin/scan-ssid  # can't be in monitor mode, managed only
# ########## Verify ##########
# scan-ssid --help
# """,True,None))

# # minimodem
# programs_dragonOS_focal.append(('minimodem',
# """sudo apt-get install -y minimodem
# ########## Verify ##########
# minimodem --version
# """,True,None))

# # WSJT-X
# programs_dragonOS_focal.append(('WSJT-X',
# """sudo apt-get install -y wsjtx
# ########## Verify ##########
# ls /usr/bin/wsjtx
# """,True,None))

# # Google Earth Pro
# programs_dragonOS_focal.append(('Google Earth Pro',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
# sudo dpkg -i google-earth-pro-stable_current_amd64.deb
# ########## Verify ##########
# ls /usr/bin/google-earth-pro
# """,True,None))

# # gr-air-modes
# programs_dragonOS_focal.append(('gr-air-modes',
# """sudo apt-get install -y gr-air-modes
# ########## Verify ##########
# modes_rx --help
# """,True,None))

# # ESP8266 Deauther v2
# programs_dragonOS_focal.append(('ESP8266 Deauther v2',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# wget https://github.com/SpacehuhnTech/esp8266_deauther/archive/v2.zip
# unzip -q v2.zip
# rm v2.zip
# """,True,None))

# # Viking
# programs_dragonOS_focal.append(('Viking',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone git://git.code.sf.net/p/viking/code viking
# sudo apt install -y gtk-doc-tools docbook-xsl yelp-tools libpng-dev libgtk-3-dev libicu-dev libjson-glib-dev intltool
# sudo apt-get install -y libcurl4-gnutls-dev libglib2.0-dev-bin
# sudo apt-get install -y libsqlite3-dev nettle-dev libmapnik-dev libgeoclue-2-dev libgexiv2-dev libgps-dev libmagic-dev libbz2-dev libzip-dev liboauth-dev
# sudo apt-get install -y autopoint libnova-dev
# cd viking
# ./autogen.sh
# ./configure
# make
# sudo make install
# ########## Verify ##########
# viking --help
# """,True,None))

# # PyGPSClient
# programs_dragonOS_focal.append(('PyGPSClient',
# """sudo apt install -y python3-pip python3-tk python3-pil python3-pil.imagetk
# sudo python3 -m pip install --upgrade PyGPSClient
# ########## Verify ##########
# ls /usr/local/bin/pygpsclient
# """,True,None))

# # Gpredict
# programs_dragonOS_focal.append(('Gpredict',
# """sudo apt-get install -y gpredict
# ########## Verify ##########
# gpredict --help
# """,True,None))

# # FoxtrotGPS
# programs_dragonOS_focal.append(('FoxtrotGPS',
# """sudo apt-get install -y foxtrotgps
# ########## Verify ##########
# foxtrotgps --help
# """,True,None))

# # multimon-ng
# programs_dragonOS_focal.append(('multimon-ng',
# """mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/EliasOenal/multimonNG.git
# cd multimonNG
# mkdir build
# cd build
# qmake ../multimon-ng.pro
# make
# sudo make install
# ########## Verify ##########
# ls /usr/local/bin/multimon-ng
# """,True,None))

# # Xastir
# programs_dragonOS_focal.append(('Xastir',
# """sudo apt-get install -y xastir  # should non-superusers be allowed? sure, why not.
# ########## Verify ##########
# sudo xastir -V
# """,True,None))

# # LTE-Cell-Scanner
# programs_dragonOS_focal.append(('LTE-Cell-Scanner',
# """sudo apt-get install -y cmake libncurses5-dev liblapack-dev libblas-dev libboost-thread-dev libboost-system-dev libitpp-dev librtlsdr-dev libfftw3-dev
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/JiaoXianjun/LTE-Cell-Scanner.git
# cd LTE-Cell-Scanner
# mkdir build
# cd build
# cmake ..
# make 
# sudo make install
# ########## Verify ##########
# ls /usr/local/bin/CellSearch
# """,True,None))

# # btscanner
# programs_dragonOS_focal.append(('btscanner',
# """sudo apt-get install -y btscanner
# ########## Verify ##########
# btscanner --help
# """,True,None))

# # hcidump
# programs_dragonOS_focal.append(('hcidump',
# """sudo apt-get install -y bluez-hcidump
# ########## Verify ##########
# hcidump --help
# """,True,None))

# # GraphicsMagick
# programs_dragonOS_focal.append(('GraphicsMagick',
# """sudo apt-get install -y graphicsmagick-imagemagick-compat
# ########## Verify ##########
# gm -help
# """,True,None))

# # Spectrum Painter
# programs_dragonOS_focal.append(('Spectrum Painter',
# """sudo python3 -m pip install numpy imageio 
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/polygon/spectrum_painter.git
# #cd spectrum_painter/
# #pip3 install --user -e .  # call with "python3 -m spectrum_painter.img2iqstream"
# """,True,None))

# # nrsc5 and nrsc5-gui
# programs_dragonOS_focal.append(('nrsc5',
# """sudo apt install -y git build-essential cmake autoconf libtool libao-dev libfftw3-dev librtlsdr-dev libgsl-dev
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone https://github.com/theori-io/nrsc5.git
# cd nrsc5
# mkdir build
# cd build
# cmake ..
# make
# sudo make install
# sudo ldconfig
# # nrsc5-gui
# python3 -m pip install --upgrade Pillow
# python3 -m pip install pyaudio
# sudo apt-get install -y python-gobject
# cd ~/Installed_by_FISSURE
# git clone https://github.com/cmnybo/nrsc5-gui.git
# ########## Verify ##########
# nrsc5 -v
# """,True,None))

# # # HAM2MON  # Doesn't work for 20.04
# # programs_dragonOS_focal.append(('HAM2MON',
# # """mkdir -p ~/Installed_by_FISSURE
# # cd ~/Installed_by_FISSURE
# # git clone https://github.com/madengr/ham2mon.git
# # """,True,None))

# # Anki
# programs_dragonOS_focal.append(('Anki',
# """sudo apt-get install -y anki
# ########## Verify ##########
# anki -h
# """,True,None))

# # Bless
# programs_dragonOS_focal.append(('Bless',
# """sudo apt-get install -y bless
# ########## Verify ##########
# ls /usr/bin/bless
# """,True,None))

# # trackerjacker
# programs_dragonOS_focal.append(('trackerjacker',
# """sudo python3 -m pip install trackerjacker  # Downgrades Python3 Scapy from 2.4.5 to 2.4.0
# ########## Verify ##########
# sudo trackerjacker --help
# """,True,None))

# # airgeddon
# programs_dragonOS_focal.append(('airgeddon',
# """sudo apt-get install -y crunch mdk3 hostapd lighttpd ruby-dev xterm isc-dhcp-server ettercap-text-only john
# mkdir -p ~/Installed_by_FISSURE
# cd ~/Installed_by_FISSURE
# git clone --depth 1 https://github.com/v1s1t0r1sh3r3/airgeddon.git
# #asleap
# mkdir asleap
# cd asleap
# wget http://http.kali.org/pool/main/a/asleap/asleap_2.3~git20201128.254acab-0kali1_amd64.deb
# sudo dpkg -i asleap_2.3~git20201128.254acab-0kali1_amd64.deb
# #bettercap
# sudo apt-get install -y build-essential libpcap-dev net-tools 
# cd ~/Installed_by_FISSURE
# mkdir bettercap
# cd bettercap
# wget https://github.com/bettercap/bettercap/releases/download/v2.31.1/bettercap_linux_amd64_v2.31.1.zip
# unzip -q bettercap_linux_amd64_v2.31.1.zip
# rm bettercap_linux_amd64_v2.31.1.zip
# sudo cp bettercap /usr/bin/
# #mdk4
# sudo apt-get install -y libnl-genl-3-dev
# cd ~/Installed_by_FISSURE
# git clone https://github.com/aircrack-ng/mdk4
# cd mdk4
# make
# sudo make install
# """,True,None))

# # Hydra
# programs_dragonOS_focal.append(('Hydra',
# """sudo apt-get install -y hydra
# ########## Verify ##########
# ls /usr/bin/hydra
# """,True,None))

# # Enscribe
# programs_dragonOS_focal.append(('Enscribe',
# """sudo apt-get install -y enscribe
# ########## Verify ##########
# ls /usr/bin/enscribe
# """,True,None))

# # ESP32 Bluetooth Classic Sniffer - FIX
# programs_dragonOS_focal.append(('ESP32 BT Classic Sniffer',
# """mkdir -p ~/Installed_by_FISSURE  # Requires Wireshark 3.4, cannot get it to work with other versions
# cd ~/Installed_by_FISSURE
# #git clone https://github.com/Matheus-Garbelini/esp32_bluetooth_classic_sniffer
# #cd esp32_bluetooth_classic_sniffer
# #sudo ./requirements.sh
# #./build.sh
# ##sudo cp dissectors/h4bcm.so /usr/lib/x86_64-linux-gnu/wireshark/plugins/3.4/epan/  # Needs to go where "sudo Wireshark" dissectors are located, check Wireshark version for 3.4
# #rm ~/.local/lib/wireshark/plugins/3.4/epan/h4bcm.so  # To avoid "plugin 'h4bcm.so' was found in multiple directories" warning
# """,False,None))


########################################################################
       


class InstallDialog2(QtWidgets.QDialog, form_class2):
    def __init__(self,programs):
        """ Software Selection Dialog
        """
        QtWidgets.QDialog.__init__(self)
        self.setupUi(self)
        
        # Prevent Resizing/Maximizing
        self.setFixedSize(820, 600)     

        # Hide Progress Bar
        self.progressBar1.hide()   
        
        # Do SIGNAL/Slots Connections
        self._connectSlots()  
        
        # Create Categories
        for c in larger_categories:
            parent = QtWidgets.QTreeWidgetItem(self.treeWidget_software)
            parent.setText(0,c)
            parent.setFlags(parent.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
            parent.setCheckState(0, QtCore.Qt.Checked)
        
        # Load Checkboxes in Table
        self.programs = programs
        for row in range(0,len(programs)):
            # Subcategories
            if programs[row][3] != None:
                parent_name = programs[row][3]
                
                # Iterate the Tree
                iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
                while iterator.value():
                    item = iterator.value()
                    if item.text(0) == parent_name:
                        child = QtWidgets.QTreeWidgetItem(item)
                        child.setFlags(child.flags() | QtCore.Qt.ItemIsUserCheckable)
                        child.setText(0, programs[row][0])
                        if programs[row][2] == True:
                            child.setCheckState(0, QtCore.Qt.Checked)
                        else:
                            child.setCheckState(0, QtCore.Qt.Unchecked)
                        break
                    iterator+=1      
            
            # No Category
            else:            
                parent = QtWidgets.QTreeWidgetItem(self.treeWidget_software)
                parent.setText(0,programs[row][0])
                parent.setFlags(parent.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
                if programs[row][2] == True:
                    parent.setCheckState(0, QtCore.Qt.Checked)
                else:
                    parent.setCheckState(0, QtCore.Qt.Unchecked)
            
    def _connectSlots(self):
        """ Contains the connect functions for all the signals and slots
        """   
        # Push Buttons
        self.pushButton_ok.clicked.connect(self._slotOK_Clicked)
        self.pushButton_cancel.clicked.connect(self._slotCancelClicked)
        self.pushButton_deselect.clicked.connect(self._slotDeselectClicked)
        self.pushButton_default.clicked.connect(self._slotDefaultClicked)
        
        # Tables
        self.treeWidget_software.clicked.connect(self._slotTableItemClicked)
        
    def _slotOK_Clicked(self):
        """ Install the software.
        """      
        # Find Number of Checked Items and Store Names (prevents checking after starting the install)
        get_checked_items = 0
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        self.checked_items = []
        while iterator.value():
            item = iterator.value()
            if item.checkState(0) == 2:    
                # Ignore Categories
                if item.text(0) not in larger_categories:       
                    get_checked_items = get_checked_items + 1
                    self.checked_items.append(item.text(0))     
            iterator+=1   
            
        # Reset the Colors
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()
            item.setForeground(0,QtGui.QColor('Black'))
            iterator+=1   
            
        # Show Progress Bar
        self.progressBar1.show()      
        self.progressBar1.setMaximum(get_checked_items+1)
        QtWidgets.QApplication.processEvents()
        self.pushButton_ok.setEnabled(False)

        # Iterate the Checked Items
        self.checked_index = 0
        for n in range(0,len(self.checked_items)):            
            # Find the Install Code
            for p in range(0,len(self.programs)):
                if self.checked_items[n] == self.programs[p][0]:
                    self.loop = True
            
                    # Split Install Commands and Verifier Commands
                    install_command = self.programs[p][1].split("########## Verify ##########")
                    
                    # Verify Code Found
                    if len(install_command) == 2:
                        self.verify_code = install_command[1]
                    else:
                        self.verify_code = ""
                        
                    self.loadthread = MyThread(install_command[0], self)                        
                    self.loadthread.finished.connect(self.on_finished)
                    self.loadthread.start()
                                      
                    self.progressBar1.setValue(self.checked_index+1)
                    self.checked_index = self.checked_index + 1
                    
                    while self.loop == True:
                        QtWidgets.QApplication.processEvents()
                        time.sleep(0.1)

        # Finished
        self.progressBar1.setValue(self.checked_index+1)
        print("\nInstall Complete")
        time.sleep(2)
        self.progressBar1.hide()   
        self.pushButton_ok.setEnabled(True)
        #self.accept()

        
    @QtCore.pyqtSlot()
    def on_finished(self):
        """ Proceed to the next program.
        """
        # Verify
        if len(self.verify_code) > 0:
            iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
            while iterator.value():
                item = iterator.value()
                if item.text(0) == self.checked_items[self.checked_index-1]:
                    # Verify Success
                    try:
                        p1 = subprocess.check_call(self.verify_code, shell=True)
                        print("VERIFY SUCCESS")
                        item.setForeground(0,QtGui.QColor('Green'))
                        
                    # Verify Failure
                    except:
                        print("VERIFY FAILURE")
                        item.setForeground(0,QtGui.QColor('Red'))
                    break
                iterator+=1  
            
        
        self.loop = False
        
    def _slotCancelClicked(self):
        """ Close everything.
        """
        self.close()
        
    def _slotTableItemClicked(self, item):
        """ Update text edit box with command text when table row is clicked.
        """
        # Clicked Item
        try:
            current_item = self.treeWidget_software.currentItem().text(0)  # Deselect All and checking a box causes an error
        except:
            return  

        # Search Programs
        for p in range(0,len(self.programs)):
            if current_item == self.programs[p][0]:
                self.plainTextEdit1.setPlainText(self.programs[p][1])
                break
        
    def _slotDeselectClicked(self):
        """ Unchecks all the checkboxes.
        """
        # Iterate the Tree
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()
            item.setCheckState(0, QtCore.Qt.Unchecked)
            iterator+=1  
            
    def _slotDefaultClicked(self):
        """ Checks the default checkboxes.
        """
        # Iterate the Tree
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()            
            for p in range(0,len(self.programs)):
                if item.text(0) == self.programs[p][0]:
                    if self.programs[p][2] == True:
                        item.setCheckState(0, QtCore.Qt.Checked)
                    else:
                        item.setCheckState(0, QtCore.Qt.Unchecked)
                    break           
            iterator+=1  

        
        
class MyThread(QtCore.QThread):
    def __init__(self, n, parent=None):
        QtCore.QThread.__init__(self, parent)
        self.n = n

    def run(self):
        try:
            #print(self.n)
            p1 = subprocess.Popen(self.n, shell=True)
            p1.wait()
        except:
            print("FAILURE")
        


class InstallDialog1(QtWidgets.QDialog, form_class):
    def __init__(self):
        """ Operating System Dialog
        """
        QtWidgets.QDialog.__init__(self)
        self.setupUi(self)
        
        # Prevent Resizing/Maximizing
        self.setFixedSize(240, 245)         
        
        # Do SIGNAL/Slots Connections
        self._connectSlots()  
        
        # Detect Operating System
        process = subprocess.Popen('lsb_release -d', shell=True, stdout=subprocess.PIPE, encoding='utf8')
        stdout = process.communicate()[0]
        
        # Select Radio Button
        if "Ubuntu 20.04.1" in stdout:
            self.radioButton_ubuntu20_04.setChecked(True)
        elif "Ubuntu 20.04.4" in stdout:
            self.radioButton_ubuntu20_04_4.setChecked(True)            
        elif "Ubuntu 22.04" in stdout:
            self.radioButton_ubuntu22_04.setChecked(True)
        elif "DragonOS Focal" in stdout:
            self.radioButton_dragonOS_focal.setChecked(True)
        
        self.get_os = ""
        
    def _connectSlots(self):
        """ Contains the connect functions for all the signals and slots
        """   
        # Push Buttons
        self.pushButton_ok.clicked.connect(self._slotOK_Clicked)
        self.pushButton_cancel.clicked.connect(self._slotCancelClicked)
        
    def _slotOK_Clicked(self):
        """ Return to open the second install dialog.
        """        
        # Select Software for Operating System
        if self.radioButton_ubuntu20_04.isChecked():
            self.get_os = "Ubuntu 20.04.1"
        elif self.radioButton_ubuntu20_04_4.isChecked():
            self.get_os = "Ubuntu 20.04.4"            
        elif self.radioButton_ubuntu22_04.isChecked():
            self.get_os = "Ubuntu 22.04"
        elif self.radioButton_dragonOS_focal.isChecked():
            self.get_os = "DragonOS Focal"
            
        self.accept()
        
    def _slotCancelClicked(self):
        """ Close everything.
        """
        self.close()


def main(argv):
    """ The start of everything.
    """   
    app = QtWidgets.QApplication(argv) 
    
    # Operating System Dialog
    install_dlg1 = InstallDialog1()
    install_dlg1.show() 
    
    # OK Clicked
    if install_dlg1.exec_() == QtWidgets.QDialog.Accepted:
        if install_dlg1.get_os == "Ubuntu 20.04.1":
            install_dlg2 = InstallDialog2(programs_ubuntu20_04)
        elif install_dlg1.get_os == "Ubuntu 20.04.4":
            install_dlg2 = InstallDialog2(programs_ubuntu20_04_4)            
        elif install_dlg1.get_os == "Ubuntu 22.04":
            install_dlg2 = InstallDialog2(programs_ubuntu22_04)
        elif install_dlg1.get_os == "DragonOS Focal":
            install_dlg2 = InstallDialog2(programs_dragonOS_focal)
        install_dlg2.show() 
        
        # Install Clicked
        if install_dlg2.exec_() == QtWidgets.QDialog.Accepted:
            pass
        #    print("Install Complete")
            
    sys.exit()
    
 
if __name__ == "__main__":
    main(sys.argv)
